{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Yak",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"comment": "Interpreted string literals",
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.yak"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.yak"
				}
			},
			"name": "string.quoted.double.yak",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
        {
			"comment": "Interpreted string literals",
			"begin": "'(?=[^']{2,})",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.yak"
				}
			},
			"end": "(?<=[^']{2,})'",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.yak"
				}
			},
			"name": "string.quoted.single.yak",
			"patterns": [
				{
					"include": "#string_escaped_char"
				},
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Raw string literals",
			"begin": "`",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.yak"
				}
			},
			"end": "`",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.yak"
				}
			},
			"name": "string.quoted.raw.yak",
			"patterns": [
				{
					"include": "#string_placeholder"
				}
			]
		},
		{
			"comment": "Syntax error receiving channels",
			"match": "<\\-([\\t ]+)chan\\b",
			"captures": {
				"1": {
					"name": "invalid.illegal.receive-channel.yak"
				}
			}
		},
		{
			"comment": "Syntax error sending channels",
			"match": "\\bchan([\\t ]+)<-",
			"captures": {
				"1": {
					"name": "invalid.illegal.send-channel.yak"
				}
			}
		},
		{
			"comment": "Syntax error using slices",
			"match": "\\[\\](\\s+)",
			"captures": {
				"1": {
					"name": "invalid.illegal.slice.yak"
				}
			}
		},
		{
			"comment": "Syntax error numeric literals",
			"match": "\\b0[0-7]*[89]\\d*\\b",
			"name": "invalid.illegal.numeric.yak"
		},
		{
			"comment": "Built-in functions",
			"match": "\\b(append|copy|delete|get|len|cap|mkmap|mapFrom|mapOf|panic|panicf|print|printf|println|fprintln|set|mkslice|slice|sliceOf|sub|make|close)\\b(?=\\()",
			"name": "support.function.builtin.yak"
		},
		{
			"comment": "Built-in Type Convertion Functions",
			"match": "\\b(float|float64|float32|int8|int16|int32|int64|int|uint|byte|uint8|uint16|uint64|string|bool|var|type|max|min)\\b(?=\\()",
			"name": "support.function.builtin.yak"
		},
		{
			"comment": "Function declarations",
			"match": "^(\\bfunc|fn|def\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
			"captures": {
				"1": {
					"name": "keyword.function.yak"
				},
				"2": {
					"patterns": [
						{
							"include": "#brackets"
						},
						{
							"include": "#operators"
						}
					]
				},
				"3": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.yak"
						},
						{
							"match": "\\w+",
							"name": "entity.name.function.yak"
						}
					]
				}
			}
		},
		{
			"comment": "Functions",
			"match": "(\\bfunc\\b)|(\\w+)(?=\\()",
			"captures": {
				"1": {
					"name": "keyword.function.yak"
				},
				"2": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.yak"
						},
						{
							"match": "\\w+",
							"name": "support.function.yak"
						}
					]
				}
			}
		},
		{
			"comment": "Floating-point literals",
			"match": "(\\.\\d+([Ee][-+]\\d+)?i?)\\b|\\b\\d+\\.\\d*(([Ee][-+]\\d+)?i?\\b)?",
			"name": "constant.numeric.floating-point.yak"
		},
		{
			"comment": "Integers",
			"match": "\\b((0x[0-9a-fA-F]+)|(0[0-7]+i?)|(\\d+([Ee]\\d+)?i?)|(\\d+[Ee][-+]\\d+i?))\\b",
			"name": "constant.numeric.integer.yak"
		},
		{
			"comment": "Language constants",
			"match": "\\b(true|false|nil|undefined)\\b",
			"name": "constant.language.yak"
		},
		{
			"begin": "\\b(package)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.package.yak"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.yak"
				},
				{
					"match": "\\w+",
					"name": "entity.name.package.yak"
				}
			]
		},
		{
			"begin": "\\b(type)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.type.yak"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"match": "\\d\\w*",
					"name": "invalid.illegal.identifier.yak"
				},
				{
					"match": "\\w+",
					"name": "entity.name.type.yak"
				}
			]
		},
		{
			"begin": "\\b(include)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.import.yak"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#imports"
				}
			]
		},
		{
			"begin": "\\b(var)\\s+",
			"beginCaptures": {
				"1": {
					"name": "keyword.var.yak"
				}
			},
			"end": "(?!\\G)",
			"patterns": [
				{
					"include": "#variables"
				}
			]
		},
		{
			"match": "(?<!var)\\s*(\\w+(?:\\.\\w+)*(?>,\\s*\\w+(?:\\.\\w+)*)*)(?=\\s*=(?!=))",
			"captures": {
				"1": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.yak"
						},
						{
							"match": "\\w+(?:\\.\\w+)*",
							"name": "variable.other.assignment.yak",
							"captures": {
								"0": {
									"patterns": [
										{
											"include": "#delimiters"
										}
									]
								}
							}
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"match": "\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
			"captures": {
				"0": {
					"patterns": [
						{
							"match": "\\d\\w*",
							"name": "invalid.illegal.identifier.yak"
						},
						{
							"match": "\\w+",
							"name": "variable.other.assignment.yak"
						},
						{
							"include": "#delimiters"
						}
					]
				}
			}
		},
		{
			"comment": "Terminators",
			"match": ";",
			"name": "punctuation.terminator.yak"
		},
		{
			"include": "#brackets"
		},
		{
			"include": "#delimiters"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#operators"
		},
		{
			"include": "#runes"
		},
		{
			"include": "#storage_types"
		}
	],
	"repository": {
		"brackets": {
			"patterns": [
				{
					"begin": "{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.curly.yak"
						}
					},
					"end": "}",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.curly.yak"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.begin.bracket.round.yak"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.end.bracket.round.yak"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\[|\\]",
					"name": "punctuation.definition.bracket.square.yak"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.yak"
						}
					},
					"name": "comment.block.yak"
				},
				{
					"begin": "//",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.yak"
						}
					},
					"end": "$",
					"name": "comment.line.double-slash.yak"
				}
			]
		},
		"delimiters": {
			"patterns": [
				{
					"match": ",",
					"name": "punctuation.other.comma.yak"
				},
				{
					"match": "\\.(?!\\.\\.)",
					"name": "punctuation.other.period.yak"
				},
				{
					"match": ":(?!=)",
					"name": "punctuation.other.colon.yak"
				}
			]
		},
		"imports": {
			"patterns": [
				{
                    "match": "((?!\\s+['\"])[^\\s]*)?\\s*((['\"])([^'\"]*)(['\"]))",
					"captures": {
						"1": {
							"name": "entity.alias.import.yak"
						},
						"2": {
							"name": "string.quoted.yak"
						},
						"3": {
							"name": "punctuation.definition.string.begin.yak"
						},
						"4": {
							"name": "entity.name.import.yak"
						},
						"5": {
							"name": "punctuation.definition.string.end.yak"
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.imports.begin.bracket.round.yak"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.imports.end.bracket.round.yak"
						}
					},
					"patterns": [
						{
							"include": "#comments"
						},
						{
							"include": "#imports"
						}
					]
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"comment": "Flow control keywords",
					"match": "\\b(break|case|continue|default|defer|else|fallthrough|for|in|go|goto|if|range|return|select|switch|try|catch|finally)\\b",
					"name": "keyword.control.yak"
				},
				{
					"match": "\\bchan\\b",
					"name": "keyword.channel.yak"
				},
				{
					"match": "\\bconst\\b",
					"name": "keyword.const.yak"
				},
				{
					"match": "\\bfunc\\b",
					"name": "keyword.function.yak"
				},
				{
					"match": "\\bfn\\b",
					"name": "keyword.function.yak"
				},
				{
					"match": "\\bdef\\b",
					"name": "keyword.function.yak"
				},
				{
					"match": "\\binterface\\b",
					"name": "keyword.interface.yak"
				},
				{
					"match": "\\bmap\\b",
					"name": "keyword.map.yak"
				},
				{
					"match": "\\bstruct\\b",
					"name": "keyword.struct.yak"
				}
			]
		},
		"operators": {
			"comment": "Note that the order here is very important!",
			"patterns": [
				{
					"match": "(\\*|&)(?=\\w)",
					"name": "keyword.operator.address.yak"
				},
				{
					"match": "<\\-",
					"name": "keyword.operator.channel.yak"
				},
				{
					"match": "\\-\\-",
					"name": "keyword.operator.decrement.yak"
				},
				{
					"match": "\\+\\+",
					"name": "keyword.operator.increment.yak"
				},
				{
					"match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
					"name": "keyword.operator.comparison.yak"
				},
				{
					"match": "(&&|\\|\\||!)",
					"name": "keyword.operator.logical.yak"
				},
				{
					"match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
					"name": "keyword.operator.assignment.yak"
				},
				{
					"match": "(\\+|\\-|\\*|/|%)",
					"name": "keyword.operator.arithmetic.yak"
				},
				{
					"match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
					"name": "keyword.operator.arithmetic.bitwise.yak"
				},
				{
					"match": "\\.\\.\\.",
					"name": "keyword.operator.ellipsis.yak"
				}
			]
		},
		"runes": {
			"patterns": [
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.yak"
						}
					},
					"end": "'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.yak"
						}
					},
					"name": "string.quoted.rune.yak",
					"patterns": [
						{
							"match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')",
							"name": "constant.other.rune.yak"
						},
						{
							"match": "[^']+",
							"name": "invalid.illegal.unknown-rune.yak"
						}
					]
				}
			]
		},
		"storage_types": {
			"patterns": [
				{
					"match": "\\bbool\\b",
					"name": "storage.type.boolean.yak"
				},
				{
					"match": "\\bbyte\\b",
					"name": "storage.type.byte.yak"
				},
				{
					"match": "\\berror\\b",
					"name": "storage.type.error.yak"
				},
				{
					"match": "\\b(int|float)\\b",
					"name": "storage.type.numeric.yak"
				},
				{
					"match": "\\bvar\\b",
					"name": "storage.type"
				},
				{
					"match": "\\bstring\\b",
					"name": "storage.type.string.yak"
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
					"name": "constant.character.escape.yak"
				},
				{
					"match": "\\\\[^0-7xuUabfnrtv\\'\"]",
					"name": "invalid.illegal.unknown-escape.yak"
				}
			]
		},
		"string_placeholder": {
			"patterns": [
				{
					"match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGsp]",
					"name": "constant.other.placeholder.yak"
				}
			]
		},
		"variables": {
			"patterns": [
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+\\*?\\w+(?:\\.\\w+)?\\s*)?(?=\\s*=)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.yak"
								},
								{
									"match": "\\w+",
									"name": "variable.other.assignment.yak"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"match": "(\\w+(?:,\\s*\\w+)*)(\\s+(\\[(\\d*|\\.\\.\\.)\\])*\\*?(<-)?\\w+(?:\\.\\w+)?\\s*[^=].*)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\d\\w*",
									"name": "invalid.illegal.identifier.yak"
								},
								{
									"match": "\\w+",
									"name": "variable.other.declaration.yak"
								},
								{
									"include": "#delimiters"
								}
							]
						},
						"2": {
							"patterns": [
								{
									"include": "$self"
								}
							]
						}
					}
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.variables.begin.bracket.round.yak"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.variables.end.bracket.round.yak"
						}
					},
					"patterns": [
						{
							"include": "$self"
						},
						{
							"include": "#variables"
						}
					]
				}
			]
		}
	},
	"foldingStartMarker": "\\{\\s*$",
	"foldingStopMarker": "^\\s*\\}",
	"scopeName": "source.yak"
}