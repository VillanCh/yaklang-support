{
  "libNames": [
    "brute",
    "cli",
    "codec",
    "context",
    "crawler",
    "db",
    "dictutil",
    "dns",
    "dyn",
    "env",
    "exec",
    "file",
    "fuzz",
    "hook",
    "http",
    "httpool",
    "httpserver",
    "io",
    "java",
    "js",
    "json",
    "judge",
    "jwt",
    "log",
    "mitm",
    "mmdb",
    "nuclei",
    "os",
    "ping",
    "poc",
    "re",
    "report",
    "risk",
    "servicescan",
    "smb",
    "spacengine",
    "str",
    "subdomain",
    "sync",
    "synscan",
    "t3",
    "tcp",
    "time",
    "tls",
    "tools",
    "udp",
    "x",
    "xpath",
    "yakit",
    "yso"
  ],
  "libCompletions": [
    {
      "libName": "yso",
      "prefix": "yso.",
      "functions": [
        {
          "functionName": "NewLdapServerWithPort(${1:v1/*type: int*/}, ${2:v2/*type: int*/})",
          "document": "新增 LDAP 服务器，并设置端口",
          "definitionStr": "func yso.NewLdapServerWithPort(v1: int, v2: int) return (r0: ldapserver.LdapServer)"
        },
        {
          "functionName": "NewLdapServer()",
          "document": "新增 LDAP 服务器",
          "definitionStr": "func yso.NewLdapServer() return (r0: *ldapserver.LdapServer)"
        },
        {
          "functionName": "NewFacadeServer(${1:v1/*type: string*/}, ${2:v2/*type: int*/})",
          "document": "新增 Facade 反连服务器",
          "definitionStr": "func yso.NewFacadeServer(v1: string, v2: int) return (r0: *facades.FacadeServer)"
        },
        {
          "functionName": "GetTomcatEcho(${1:v1/*type: string*/})",
          "document": "新增 TomcatEcho Java 对象",
          "definitionStr": "func yso.GetTomcatEcho(v1: string) return (r0: func (v1: string) return(bytes) )"
        },
        {
          "functionName": "GetSpring2(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetSpring2(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetSpring1(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetSpring1(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetJDK8u20(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetJDK8u20(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetJDK7u21(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetJDK7u21(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollectionsK4(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollectionsK4(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollectionsK3(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollectionsK3(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollectionsK2(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollectionsK2(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollectionsK1(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollectionsK1(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections7(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections7(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections6(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections6(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections5(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections5(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections4(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections4(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections3(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections3(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections2(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections2(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsCollections1(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsCollections1(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsBeanutils2(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsBeanutils2(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetCommonsBeanutils1(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetCommonsBeanutils1(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "GetClojure(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.GetClojure(v1: string) return (r0: yserx.JavaSerializable, r1: error)"
        }
      ]
    },
    {
      "libName": "yakit",
      "prefix": "yakit.",
      "functions": [
        {
          "functionName": "Warn(${1:v1/*type: string*/}, ${2:v2/*type ...any*/})",
          "document": "让 Yakit UI 输出告警信息",
          "definitionStr": "`func yakit.Warn(v1: string, v2 ...any)`"
        },
        {
          "functionName": "UpdateYakitStoreLocal(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yakit.UpdateYakitStoreLocal(v1: string) return (r0: error)"
        },
        {
          "functionName": "UpdateYakitStoreFromGit(${1:ctx/*type: context.Context*/}, ${2:url/*type: string*/}, ${3:proxy/*type ...string*/})",
          "document": "从 Git 中更新 Yakit 商店内容",
          "definitionStr": "func yakit.UpdateYakitStoreFromGit(ctx: context.Context, url: string, proxy ...string) return (r0: error)"
        },
        {
          "functionName": "UpdateYakitStore()",
          "document": "使用 yakit 来直接更新 yakit-store 中的插件",
          "definitionStr": "func yakit.UpdateYakitStore() return (r0: error)"
        },
        {
          "functionName": "Text(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "`func yakit.Text(v1: any)`"
        },
        {
          "functionName": "TableData(${1:tableName/*type: string*/}, ${2:data/*type: map[string]any*/})",
          "document": "为启动的 table 生成数据",
          "definitionStr": "func yakit.TableData(tableName: string, data: map[string]any) return (r0: *yaklib.YakitFixedTableData)"
        },
        {
          "functionName": "StatusCard(${1:statusName/*type: string*/}, ${2:statusValue/*type: any*/}, ${3:tags/*type ...string*/})",
          "document": "",
          "definitionStr": "`func yakit.StatusCard(statusName: string, statusValue: any, tags ...string)`"
        },
        {
          "functionName": "SetProgressEx(${1:progressName/*type: string*/}, ${2:percent/*type: float64*/})",
          "document": "设置额外进度条的进度信息（默认进度条id为 `main`）",
          "definitionStr": "`func yakit.SetProgressEx(progressName: string, percent: float64)`"
        },
        {
          "functionName": "SetProgress(${1:progress/*type: float64*/})",
          "document": "",
          "definitionStr": "`func yakit.SetProgress(progress: float64)`"
        },
        {
          "functionName": "SavePortFromResult(${1:result/*type: any*/})",
          "document": "把端口信息保存到数据库中，支持 synscan 和 servicescan 的扫描结果直接保存。",
          "definitionStr": "func yakit.SavePortFromResult(result: any) return (r0: error)"
        },
        {
          "functionName": "SavePayloadByFile(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func yakit.SavePayloadByFile(v1: string, v2: string) return (r0: error)"
        },
        {
          "functionName": "SavePayload(${1:v1/*type: string*/}, ${2:v2/*type: []string*/})",
          "document": "",
          "definitionStr": "func yakit.SavePayload(v1: string, v2: []string) return (r0: error)"
        },
        {
          "functionName": "SaveHTTPFlow(${1:isHttps/*type: string*/}, ${2:request/*type: *http.Request*/}, ${3:response/*type: *http.Response*/})",
          "document": "保存 HTTP Flow 到数据库",
          "definitionStr": "func yakit.SaveHTTPFlow(isHttps: string, request: *http.Request, response: *http.Response) return (r0: error)"
        },
        {
          "functionName": "SaveDomain(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "func yakit.SaveDomain(v1: string, v2 ...string) return (r0: error)"
        },
        {
          "functionName": "QueryUrlsByKeyword(${1:keyword/*type: string*/})",
          "document": "查询所有带一定关键字的 URL",
          "definitionStr": "func yakit.QueryUrlsByKeyword(keyword: string) return (r0: chan string)"
        },
        {
          "functionName": "QueryUrlsAll()",
          "document": "搜索数据库中所有可用的 URL (httpflows 表)",
          "definitionStr": "func yakit.QueryUrlsAll() return (r0: chan string)"
        },
        {
          "functionName": "QueryPortAssetByNetwork(${1:network/*type: string*/})",
          "document": "查询端口资产",
          "definitionStr": "func yakit.QueryPortAssetByNetwork(network: string) return (channel: chan *yakit.Port, r1: error)"
        },
        {
          "functionName": "QueryHostsByNetwork(${1:network/*type: string*/})",
          "document": "根据网段查询 host 资产",
          "definitionStr": "func yakit.QueryHostsByNetwork(network: string) return (r0: chan *yakit.Host, r1: error)"
        },
        {
          "functionName": "QueryHostsByDomain(${1:domain/*type: string*/})",
          "document": "根据 Domain 查询 Host 资产",
          "definitionStr": "func yakit.QueryHostsByDomain(domain: string) return (r0: chan *yakit.Host, r1: error)"
        },
        {
          "functionName": "QueryHostPortByNetworkAndPort(${1:network/*type: string*/}, ${2:ports/*type: string*/})",
          "document": "根据 network 和 port 查询端口 host:port 格式",
          "definitionStr": "func yakit.QueryHostPortByNetworkAndPort(network: string, ports: string) return (r0: chan string)"
        },
        {
          "functionName": "QueryHostPortByNetwork(${1:network/*type: string*/})",
          "document": "根据目标网段搜索本机的 host:port",
          "definitionStr": "func yakit.QueryHostPortByNetwork(network: string) return (r0: chan string)"
        },
        {
          "functionName": "QueryHostPortByKeyword(${1:keyword/*type: string*/})",
          "document": "根据指纹信息搜索所有符合条件的 host:port",
          "definitionStr": "func yakit.QueryHostPortByKeyword(keyword: string) return (r0: chan string)"
        },
        {
          "functionName": "QueryHostPortAll()",
          "document": "查询数据库中所有的 [host]:[port] 的形式，例如（192.168.100.1:80）",
          "definitionStr": "func yakit.QueryHostPortAll() return (r0: chan string)"
        },
        {
          "functionName": "QueryHTTPFlowsByKeyword(${1:v1/*type: string*/})",
          "document": "根据关键字搜索查询符合条件的 HTTPFlow",
          "definitionStr": "func yakit.QueryHTTPFlowsByKeyword(v1: string) return (r0: chan *yakit.HTTPFlow)"
        },
        {
          "functionName": "QueryHTTPFlowsAll()",
          "document": "查询所有的 HTTPFlow，包含请求和结果的所有信息",
          "definitionStr": "func yakit.QueryHTTPFlowsAll() return (r0: chan *yakit.HTTPFlow)"
        },
        {
          "functionName": "QueryDomainsByTitle(${1:title/*type: string*/})",
          "document": "根据域名关联网站的标题查询域名",
          "definitionStr": "func yakit.QueryDomainsByTitle(title: string) return (r0: chan *yakit.Domain, r1: error)"
        },
        {
          "functionName": "QueryDomainsByNetwork(${1:network/*type: string*/})",
          "document": "通过域名关联的 IP 查询域名",
          "definitionStr": "func yakit.QueryDomainsByNetwork(network: string) return (r0: chan *yakit.Domain, r1: error)"
        },
        {
          "functionName": "QueryDomainsByDomainKeyword(${1:keyword/*type: string*/})",
          "document": "从数据库中根据域名关键字查询域名",
          "definitionStr": "func yakit.QueryDomainsByDomainKeyword(keyword: string) return (r0: chan *yakit.Domain, r1: error)"
        },
        {
          "functionName": "Output(${1:v1/*type: any*/})",
          "document": "输出任意的对象到 Yakit UI 中，如果对象是图，将会自动创建一个图，如果对象是一个其他东西，将会自动 JSON 序列化",
          "definitionStr": "`func yakit.Output(v1: any)`"
        },
        {
          "functionName": "NewWordCloud()",
          "document": "生成词云",
          "definitionStr": "func yakit.NewWordCloud() return (r0: *yaklib.YakitGraph)"
        },
        {
          "functionName": "NewTable(${1:v1/*type ...string*/})",
          "document": "生成表格（无法实时刷新，对比 EnableTable）",
          "definitionStr": "func yakit.NewTable(v1 ...string) return (r0: *yaklib.YakitTable)"
        },
        {
          "functionName": "NewPieGraph()",
          "document": "生成饼图数据",
          "definitionStr": "func yakit.NewPieGraph() return (r0: *yaklib.YakitGraph)"
        },
        {
          "functionName": "NewLineGraph()",
          "document": "生成线形图数据",
          "definitionStr": "func yakit.NewLineGraph() return (r0: *yaklib.YakitGraph)"
        },
        {
          "functionName": "NewHTTPFlowRisk(${1:riskName/*type: string*/}, ${2:isHttps/*type: bool*/}, ${3:url/*type: string*/}, ${4:req/*type: bytes*/}, ${5:rsp/*type: bytes*/})",
          "document": "生成一个 HTTPFlow 的风险项",
          "definitionStr": "func yakit.NewHTTPFlowRisk(riskName: string, isHttps: bool, url: string, req: bytes, rsp: bytes) return (r0: *yaklib.YakitHTTPFlowRisk)"
        },
        {
          "functionName": "NewClient(${1:yakitWebhook/*type: string*/})",
          "document": "创建一个与 yakit 通信的通道（webhook）",
          "definitionStr": "func yakit.NewClient(yakitWebhook: string) return (r0: *yaklib.YakitClient)"
        },
        {
          "functionName": "NewBarGraph()",
          "document": "创建一个柱形图",
          "definitionStr": "func yakit.NewBarGraph() return (r0: *yaklib.YakitGraph)"
        },
        {
          "functionName": "Markdown(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "`func yakit.Markdown(v1: any)`"
        },
        {
          "functionName": "InitYakit(${1:yakitClient/*type: *yaklib.YakitClient*/})",
          "document": "手动初始化 Yakit 客户端，用于自定义",
          "definitionStr": "`func yakit.InitYakit(yakitClient: *yaklib.YakitClient)`"
        },
        {
          "functionName": "Info(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "在 Yakit UI 中输出 Info 级别的信息",
          "definitionStr": "`func yakit.Info(fmt: string, items ...any)`"
        },
        {
          "functionName": "GetHomeDir()",
          "document": "",
          "definitionStr": "func yakit.GetHomeDir() return (r0: string)"
        },
        {
          "functionName": "GenerateYakitMITMHooksParams(${1:method/*type: string*/}, ${2:url/*type: string*/}, ${3:httpOpts/*type ...http.Opts*/})",
          "document": "用于生成 MITM 插件的参数",
          "definitionStr": "func yakit.GenerateYakitMITMHooksParams(method: string, url: string, httpOpts http.Opts) return (paramLists: []any, err: error)"
        },
        {
          "functionName": "File(${1:v1/*type: string*/}, ${2:v2/*type ...any*/})",
          "document": "",
          "definitionStr": "`func yakit.File(v1: string, v2 ...any)`"
        },
        {
          "functionName": "Error(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "在 Yakit 的 UI 中输出输出 Error 级别的信息",
          "definitionStr": "`func yakit.Error(fmt: string, items ...any)`"
        },
        {
          "functionName": "EnableWebsiteTrees(${1:websiteKeyword/*type: string*/})",
          "document": "启动在结果中启动网站树视图（案例：基础爬虫）",
          "definitionStr": "`func yakit.EnableWebsiteTrees(websiteKeyword: string)`"
        },
        {
          "functionName": "EnableTable(${1:tableName/*type: string*/}, ${2:columns/*type: []string*/})",
          "document": "启动一个实时刷新的表格，一般用这个表格来收集结果",
          "definitionStr": "`func yakit.EnableTable(tableName: string, columns: []string)`"
        },
        {
          "functionName": "DeletePayloadByGroup(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yakit.DeletePayloadByGroup(v1: string) return (r0: error)"
        },
        {
          "functionName": "AutoInitYakit()",
          "document": "自动初始化与 Yakit 的链接",
          "definitionStr": "`func yakit.AutoInitYakit()`"
        }
      ]
    },
    {
      "libName": "xpath",
      "prefix": "xpath.",
      "functions": [
        {
          "functionName": "SelectAttr(${1:v1/*type: *html.Node*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func xpath.SelectAttr(v1: *html.Node, v2: string) return (r0: string)"
        },
        {
          "functionName": "QueryAll(${1:v1/*type: *html.Node*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func xpath.QueryAll(v1: *html.Node, v2: string) return (r0: []*html.Node, r1: error)"
        },
        {
          "functionName": "Query(${1:v1/*type: *html.Node*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func xpath.Query(v1: *html.Node, v2: string) return (r0: *html.Node, r1: error)"
        },
        {
          "functionName": "OutputHTMLSelf(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "func xpath.OutputHTMLSelf(v1: *html.Node) return (r0: string)"
        },
        {
          "functionName": "OutputHTML(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "func xpath.OutputHTML(v1: *html.Node) return (r0: string)"
        },
        {
          "functionName": "LoadHTMLDocument(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func xpath.LoadHTMLDocument(v1: any) return (r0: *html.Node, r1: error)"
        },
        {
          "functionName": "InnerText(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "func xpath.InnerText(v1: *html.Node) return (r0: string)"
        },
        {
          "functionName": "FindOne(${1:v1/*type: *html.Node*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func xpath.FindOne(v1: *html.Node, v2: string) return (r0: *html.Node)"
        },
        {
          "functionName": "Find(${1:v1/*type: *html.Node*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func xpath.Find(v1: *html.Node, v2: string) return (r0: []*html.Node)"
        },
        {
          "functionName": "ExistedAttr(${1:v1/*type: *html.Node*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func xpath.ExistedAttr(v1: *html.Node, v2: string) return (r0: bool)"
        },
        {
          "functionName": "CreateXPathNavigator(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "func xpath.CreateXPathNavigator(v1: *html.Node) return (r0: *htmlquery.NodeNavigator)"
        }
      ]
    },
    {
      "libName": "x",
      "prefix": "x.",
      "functions": [
        {
          "functionName": "Zip(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func x.Zip(v1: any, v2: any) return (r0: []funk.Tuple)"
        },
        {
          "functionName": "WaitConnect(${1:addr/*type: string*/}, ${2:timeoutSeconds/*type: float64*/})",
          "document": "等待一个链接具体多少秒钟",
          "definitionStr": "func x.WaitConnect(addr: string, timeoutSeconds: float64) return (r0: error)"
        },
        {
          "functionName": "Values(${1:v1/*type: any*/})",
          "document": "取 Map 中的 Value",
          "definitionStr": "func x.Values(v1: any) return (r0: any)"
        },
        {
          "functionName": "ToMap(${1:slice/*type: any*/}, ${2:fieldName/*type: string*/})",
          "document": "数字根据某一个字段生成 Map",
          "definitionStr": "func x.ToMap(slice: any, fieldName: string) return (r0: any)"
        },
        {
          "functionName": "ToFloat64(${1:v1/*type: any*/})",
          "document": "解析成数字（double/float64）",
          "definitionStr": "func x.ToFloat64(v1: any) return (r0: float64, r1: bool)"
        },
        {
          "functionName": "Tail(${1:v1/*type: any*/})",
          "document": "出去第一个元素之外的所有数组",
          "definitionStr": "func x.Tail(v1: any) return (r0: any)"
        },
        {
          "functionName": "Sum(${1:v1/*type: any*/})",
          "document": "取和",
          "definitionStr": "func x.Sum(v1: any) return (r0: float64)"
        },
        {
          "functionName": "Subtract(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "集合相减",
          "definitionStr": "func x.Subtract(v1: any, v2: any) return (r0: any)"
        },
        {
          "functionName": "Sort(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: int, v2: int) return(bool) */})",
          "document": "",
          "definitionStr": "`func x.Sort(v1: any, v2: func (v1: int, v2: int) return(bool) )`"
        },
        {
          "functionName": "Some(${1:v1/*type: any*/}, ${2:v2/*type ...any*/})",
          "document": "",
          "definitionStr": "func x.Some(v1: any, v2 ...any) return (r0: bool)"
        },
        {
          "functionName": "Shuffle(${1:v1/*type: any*/})",
          "document": "打乱集合顺序",
          "definitionStr": "func x.Shuffle(v1: any) return (r0: any)"
        },
        {
          "functionName": "Shift(${1:v1/*type: any*/})",
          "document": "取出第一个数组元素",
          "definitionStr": "func x.Shift(v1: any) return (r0: any)"
        },
        {
          "functionName": "Reverse(${1:v1/*type: any*/})",
          "document": "数组反向",
          "definitionStr": "func x.Reverse(v1: any) return (r0: any)"
        },
        {
          "functionName": "RemoveRepeat(${1:v1/*type: any*/})",
          "document": "移除数组/Slice中重复元素",
          "definitionStr": "func x.RemoveRepeat(v1: any) return (r0: any)"
        },
        {
          "functionName": "Reduce(${1:v1/*type: any*/}, ${2:v2/*type: func funkGeneralReduceFuncType(v1: any, v2: any) return(any) */}, ${3:initValue/*type: any*/})",
          "document": "函数式编程 Reducer 支持",
          "definitionStr": "func x.Reduce(v1: any, v2: func funkGeneralReduceFuncType(v1: any, v2: any) return(any) , initValue: any) return (r0: any)"
        },
        {
          "functionName": "Range(${1:v1/*type: int*/})",
          "document": "生成一个范围数组/Slice",
          "definitionStr": "func x.Range(v1: int) return (r0: []any)"
        },
        {
          "functionName": "Min(${1:v1/*type: any*/})",
          "document": "取最小值",
          "definitionStr": "func x.Min(v1: any) return (r0: any)"
        },
        {
          "functionName": "Max(${1:v1/*type: any*/})",
          "document": "取最大值",
          "definitionStr": "func x.Max(v1: any) return (r0: any)"
        },
        {
          "functionName": "Map(${1:v1/*type: any*/}, ${2:v2/*type: func funkGeneralFuncType(v1: any) return(any) */})",
          "document": "批处理",
          "definitionStr": "func x.Map(v1: any, v2: func funkGeneralFuncType(v1: any) return(any) ) return (r0: any)"
        },
        {
          "functionName": "Keys(${1:v1/*type: any*/})",
          "document": "取 Map 的所有 Key",
          "definitionStr": "func x.Keys(v1: any) return (r0: any)"
        },
        {
          "functionName": "IsSubset(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "判断子集关系",
          "definitionStr": "func x.IsSubset(v1: any, v2: any) return (r0: bool)"
        },
        {
          "functionName": "Intersect(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "计算交集",
          "definitionStr": "func x.Intersect(v1: any, v2: any) return (r0: any)"
        },
        {
          "functionName": "IndexOf(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "判断元素在数组中的位置",
          "definitionStr": "func x.IndexOf(v1: any, v2: any) return (r0: int)"
        },
        {
          "functionName": "If(${1:condition/*type: bool*/}, ${2:obj1/*type: any*/}, ${3:obj2/*type: any*/})",
          "document": "类似 SQL 中的 IF 函数",
          "definitionStr": "func x.If(condition: bool, obj1: any, obj2: any) return (r0: any)"
        },
        {
          "functionName": "Head(${1:v1/*type: any*/})",
          "document": "取第一个元素",
          "definitionStr": "func x.Head(v1: any) return (r0: any)"
        },
        {
          "functionName": "ForeachRight(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: any) */})",
          "document": "反向 For 循环",
          "definitionStr": "`func x.ForeachRight(v1: any, v2: func (v1: any) )`"
        },
        {
          "functionName": "Foreach(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: any) */})",
          "document": "For 循环的函数式编程支持",
          "definitionStr": "`func x.Foreach(v1: any, v2: func (v1: any) )`"
        },
        {
          "functionName": "Find(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: any) return(bool) */})",
          "document": "寻找符合要求的某个元素",
          "definitionStr": "func x.Find(v1: any, v2: func (v1: any) return(bool) ) return (r0: any)"
        },
        {
          "functionName": "Filter(${1:slice/*type: any*/}, ${2:v2/*type: func (v1: any) return(bool) */})",
          "document": "使用一个函数 func(i): bool 过滤某数组",
          "definitionStr": "func x.Filter(slice: any, v2: func (v1: any) return(bool) ) return (r0: any)"
        },
        {
          "functionName": "Every(${1:v1/*type: any*/}, ${2:v2/*type ...any*/})",
          "document": "",
          "definitionStr": "func x.Every(v1: any, v2 ...any) return (r0: bool)"
        },
        {
          "functionName": "Equal(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "判断两个元素是否相等",
          "definitionStr": "func x.Equal(v1: any, v2: any) return (r0: bool)"
        },
        {
          "functionName": "Drop(${1:slice/*type: any*/}, ${2:size/*type: int*/})",
          "document": "丢弃数组",
          "definitionStr": "func x.Drop(slice: any, size: int) return (r0: any)"
        },
        {
          "functionName": "Difference(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "计算两个元素的差分",
          "definitionStr": "func x.Difference(v1: any, v2: any) return (r0: any, r1: any)"
        },
        {
          "functionName": "ConvertToMap(${1:v1/*type: any*/})",
          "document": "把一个对象尽可能转换为 map[string][]string",
          "definitionStr": "func x.ConvertToMap(v1: any) return (r0: map[string][]string)"
        },
        {
          "functionName": "Contains(${1:slice/*type: any*/}, ${2:element/*type: any*/})",
          "document": "集合中是否包含某一个元素",
          "definitionStr": "func x.Contains(slice: any, element: any) return (r0: bool)"
        },
        {
          "functionName": "Chunk(${1:sliceOrigin/*type: any*/}, ${2:groupSize/*type: int*/})",
          "document": "把集合按数量分组",
          "definitionStr": "func x.Chunk(sliceOrigin: any, groupSize: int) return (r0: any)"
        },
        {
          "functionName": "Any(${1:v1/*type ...any*/})",
          "document": "元素中至少有一个为 true",
          "definitionStr": "func x.Any(v1 ...any) return (r0: bool)"
        },
        {
          "functionName": "All(${1:v1/*type ...any*/})",
          "document": "所有元素都存在且为 true",
          "definitionStr": "func x.All(v1 ...any) return (r0: bool)"
        }
      ]
    },
    {
      "libName": "udp",
      "prefix": "udp.",
      "functions": [
        {
          "functionName": "serverTimeout(${1:v1/*type: float64*/})",
          "document": "【可选】设置服务器默认超时时间",
          "definitionStr": "func udp.serverTimeout(v1: float64) return (r0: func udpServerOpt(v1: *yaklib.udpServerConfig) )"
        },
        {
          "functionName": "serverContext(${1:v1/*type: context.Context*/})",
          "document": "【可选】设置服务器上下文",
          "definitionStr": "func udp.serverContext(v1: context.Context) return (r0: func udpServerOpt(v1: *yaklib.udpServerConfig) )"
        },
        {
          "functionName": "serverCallback(${1:v1/*type: func (v1: *yaklib.udpConn, v2: bytes, v3: net.Addr) */})",
          "document": "【重要参数】设置服务器的处理函数",
          "definitionStr": "func udp.serverCallback(v1: func (v1: *yaklib.udpConn, v2: bytes, v3: net.Addr) ) return (r0: func udpServerOpt(v1: *yaklib.udpServerConfig) )"
        },
        {
          "functionName": "clientTimeout(${1:v1/*type: float64*/})",
          "document": "【可选】设置默认的客户端超时时间",
          "definitionStr": "func udp.clientTimeout(v1: float64) return (r0: func udpClientOption(v1: *yaklib.udpClientConfig) )"
        },
        {
          "functionName": "clientLocalAddr(${1:localaddr/*type: string*/})",
          "document": "【可选】设置客户端的本地监听地址",
          "definitionStr": "func udp.clientLocalAddr(localaddr: string) return (r0: func udpClientOption(v1: *yaklib.udpClientConfig) )"
        },
        {
          "functionName": "Serve(${1:host/*type: string*/}, ${2:port/*type: any*/}, ${3:params/*type ...yaklib.udpServerOpt*/})",
          "document": "启动一个 UDP 服务器",
          "definitionStr": "func udp.Serve(host: string, port: any, params ...yaklib.udpServerOpt) return (r0: error)"
        },
        {
          "functionName": "Connect(${1:target/*type: string*/}, ${2:extraParams/*type ...yaklib.udpClientOption*/})",
          "document": "创建一个 UDP 连接",
          "definitionStr": "func udp.Connect(target: string, extraParams ...yaklib.udpClientOption) return (conn: *yaklib.udpConn, r1: error)"
        }
      ]
    },
    {
      "libName": "tools",
      "prefix": "tools.",
      "functions": [
        {
          "functionName": "NewPocInvoker()",
          "document": "",
          "definitionStr": "func tools.NewPocInvoker() return (r0: *tools.PocInvoker, r1: error)"
        },
        {
          "functionName": "NewBruteUtil(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func tools.NewBruteUtil(v1: string) return (r0: *bruteutils.BruteUtil, r1: error)"
        }
      ]
    },
    {
      "libName": "tls",
      "prefix": "tls.",
      "functions": [
        {
          "functionName": "SignX509ServerCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个服务端证书，带x509认证",
          "definitionStr": "func tls.SignX509ServerCertAndKey(caCert: bytes, caKey: bytes) return (cert: bytes, key: bytes, r2: error)"
        },
        {
          "functionName": "SignX509ClientCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个带 x509 认证的客户端证书",
          "definitionStr": "func tls.SignX509ClientCertAndKey(caCert: bytes, caKey: bytes) return (clientCert: bytes, clientKey: bytes, r2: error)"
        },
        {
          "functionName": "SignServerCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个服务端证书，不带 x509 认证",
          "definitionStr": "func tls.SignServerCertAndKey(caCert: bytes, caKey: bytes) return (serverCert: bytes, serverKey: bytes, r2: error)"
        },
        {
          "functionName": "SignClientCertAndKey(${1:caCert/*type: bytes*/}, ${2:pKey/*type: bytes*/})",
          "document": "签发一个客户端证书，不带x509认证",
          "definitionStr": "func tls.SignClientCertAndKey(caCert: bytes, pKey: bytes) return (clientCert: bytes, clientKey: bytes, r2: error)"
        },
        {
          "functionName": "GenerateSM2KeyPair()",
          "document": "",
          "definitionStr": "func tls.GenerateSM2KeyPair() return (r0: bytes, r1: bytes, r2: error)"
        },
        {
          "functionName": "GenerateRootCA(${1:commonName/*type: string*/})",
          "document": "签发一个 CA 证书",
          "definitionStr": "func tls.GenerateRootCA(commonName: string) return (cert: bytes, privateKey: bytes, r2: error)"
        },
        {
          "functionName": "GenerateRSAKeyPair(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func tls.GenerateRSAKeyPair(v1: int) return (r0: bytes, r1: bytes, r2: error)"
        },
        {
          "functionName": "GenerateRSA4096KeyPair()",
          "document": "",
          "definitionStr": "func tls.GenerateRSA4096KeyPair() return (r0: bytes, r1: bytes, r2: error)"
        },
        {
          "functionName": "GenerateRSA2048KeyPair()",
          "document": "",
          "definitionStr": "func tls.GenerateRSA2048KeyPair() return (r0: bytes, r1: bytes, r2: error)"
        },
        {
          "functionName": "GenerateRSA1024KeyPair()",
          "document": "",
          "definitionStr": "func tls.GenerateRSA1024KeyPair() return (r0: bytes, r1: bytes, r2: error)"
        }
      ]
    },
    {
      "libName": "time",
      "prefix": "time.",
      "functions": [
        {
          "functionName": "sleep(${1:seconds/*type: float64*/})",
          "document": "sleep 一段时间",
          "definitionStr": "`func time.sleep(seconds: float64)`"
        },
        {
          "functionName": "now()",
          "document": "当前时间",
          "definitionStr": "func time.now() return (r0: time.Time)"
        },
        {
          "functionName": "Until(${1:end/*type: time.Time*/})",
          "document": "计算当前时间到目标时间的时间间隔",
          "definitionStr": "func time.Until(end: time.Time) return (r0: time.Duration)"
        },
        {
          "functionName": "Unix(${1:timestampSeconds/*type: int64*/}, ${2:nano/*type: int64*/})",
          "document": "使用 Unix 时间戳构建一个时间",
          "definitionStr": "func time.Unix(timestampSeconds: int64, nano: int64) return (r0: time.Time)"
        },
        {
          "functionName": "Sleep(${1:seconds/*type: float64*/})",
          "document": "sleep 一段时间",
          "definitionStr": "`func time.Sleep(seconds: float64)`"
        },
        {
          "functionName": "Since(${1:start/*type: time.Time*/})",
          "document": "计算一个时间到现在的时间差",
          "definitionStr": "func time.Since(start: time.Time) return (r0: time.Duration)"
        },
        {
          "functionName": "ParseDuration(${1:v1/*type: string*/})",
          "document": "把一个字符串时间解析成 `time.Duration`",
          "definitionStr": "func time.ParseDuration(v1: string) return (r0: time.Duration, r1: error)"
        },
        {
          "functionName": "Parse(${1:timeStr/*type: string*/}, ${2:format/*type: string*/})",
          "document": "把时间按照一定规则进行解析（遵循 Golang 的规则）",
          "definitionStr": "func time.Parse(timeStr: string, format: string) return (r0: time.Time, r1: error)"
        },
        {
          "functionName": "Now()",
          "document": "获取当前时间",
          "definitionStr": "func time.Now() return (r0: time.Time)"
        },
        {
          "functionName": "NewTimer(${1:seconds/*type: float64*/})",
          "document": "设置一个新的定时器，seconds 秒之后触发",
          "definitionStr": "func time.NewTimer(seconds: float64) return (r0: *time.Timer)"
        },
        {
          "functionName": "NewTicker(${1:seconds/*type: float64*/})",
          "document": "获取一个 seconds 的 ticker，每隔 seconds 秒触发一次",
          "definitionStr": "func time.NewTicker(seconds: float64) return (r0: *time.Ticker)"
        },
        {
          "functionName": "GetCurrentMonday()",
          "document": "或者当前周的周一日期",
          "definitionStr": "func time.GetCurrentMonday() return (r0: time.Time, r1: error)"
        },
        {
          "functionName": "GetCurrentDate()",
          "document": "获得当前今天的日期",
          "definitionStr": "func time.GetCurrentDate() return (r0: time.Time, r1: error)"
        },
        {
          "functionName": "AfterFunc(${1:v1/*type: time.Duration*/}, ${2:v2/*type: func () */})",
          "document": "一段时间之后执行一个函数",
          "definitionStr": "func time.AfterFunc(v1: time.Duration, v2: func () ) return (r0: *time.Timer)"
        },
        {
          "functionName": "After(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "func time.After(v1: float64) return (r0: \u003c-chan time.Time)"
        }
      ]
    },
    {
      "libName": "tcp",
      "prefix": "tcp.",
      "functions": [
        {
          "functionName": "serverTls(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【服务端参数】设置 SSL/TLS 服务器",
          "definitionStr": "func tcp.serverTls(cert: any, key: any, caCerts ...any) return (r0: func tcpServerConfigOpt(v1: *yaklib.tcpServerConfig) )"
        },
        {
          "functionName": "serverContext(${1:ctx/*type: context.Context*/})",
          "document": "【服务端参数】设置服务端上下文，用于控制服务器生命周期",
          "definitionStr": "func tcp.serverContext(ctx: context.Context) return (r0: func tcpServerConfigOpt(v1: *yaklib.tcpServerConfig) )"
        },
        {
          "functionName": "serverCallback(${1:v1/*type: func (v1: *yaklib.tcpConnection) */})",
          "document": "【服务端参数】设置服务端连接处理回调函数",
          "definitionStr": "func tcp.serverCallback(v1: func (v1: *yaklib.tcpConnection) ) return (r0: func tcpServerConfigOpt(v1: *yaklib.tcpServerConfig) )"
        },
        {
          "functionName": "clientTls(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【客户端参数】设置 TLS/SSL",
          "definitionStr": "func tcp.clientTls(cert: any, key: any, caCerts ...any) return (r0: func dialerOpt(v1: *yaklib._tcpDialer) )"
        },
        {
          "functionName": "clientTimeout(${1:seconds/*type: float64*/})",
          "document": "【客户端参数】设置超时时间",
          "definitionStr": "func tcp.clientTimeout(seconds: float64) return (r0: clientOpt)"
        },
        {
          "functionName": "clientLocal(${1:host/*type: any*/})",
          "document": "【客户端参数】设置客户端本地地址",
          "definitionStr": "func tcp.clientLocal(host: any) return (r0: clientOpt)"
        },
        {
          "functionName": "Serve(${1:host/*type: any*/}, ${2:port/*type: int*/}, ${3:params/*type ...serverOpt*/})",
          "document": "启动一个 tcp 服务器",
          "definitionStr": "func tcp.Serve(host: any, port: int, params ...serverOpt) return (r0: error)"
        },
        {
          "functionName": "Forward(${1:localPort/*type: int*/}, ${2:remoteHost/*type: string*/}, ${3:remotePort/*type: int*/})",
          "document": "转发 TCP 链接，在本地开一个 TCP 服务器，把到这个服务器的链接转发到远程端口上",
          "definitionStr": "func tcp.Forward(localPort: int, remoteHost: string, remotePort: int) return (r0: error)"
        },
        {
          "functionName": "Connect(${1:host/*type: string*/}, ${2:port/*type: any*/}, ${3:params/*type ...clientOpt*/})",
          "document": "",
          "definitionStr": "func tcp.Connect(host: string, port: any, params ...clientOpt) return (conn: *yaklib.tcpConnection, r1: error)"
        }
      ]
    },
    {
      "libName": "t3",
      "prefix": "t3.",
      "functions": [
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "func t3.timeout(v1: float64) return (r0: func OptionFun(v1: *t3.T3Paylaod) )"
        },
        {
          "functionName": "clearBackdoor(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func t3.clearBackdoor(v1: bool) return (r0: func OptionFun(v1: *t3.T3Paylaod) )"
        },
        {
          "functionName": "SendJavaObjectStreamBytes(${1:v1/*type: string*/}, ${2:v2/*type: any*/}, ${3:v3/*type ...t3.OptionFun*/})",
          "document": "",
          "definitionStr": "func t3.SendJavaObjectStreamBytes(v1: string, v2: any, v3 ...t3.OptionFun) return (r0: error)"
        },
        {
          "functionName": "GenerateJavaObjectStreamBytes(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func t3.GenerateJavaObjectStreamBytes(v1: string) return (r0: bytes)"
        },
        {
          "functionName": "ExecCommand(${1:addr/*type: string*/}, ${2:command/*type: string*/}, ${3:v3/*type ...t3.OptionFun*/})",
          "document": "T3 命令执行",
          "definitionStr": "func t3.ExecCommand(addr: string, command: string, v3 ...t3.OptionFun) return (r0: string, r1: error)"
        }
      ]
    },
    {
      "libName": "synscan",
      "prefix": "synscan.",
      "functions": [
        {
          "functionName": "wait(${1:v1/*type: float64*/})",
          "document": "【参数】当所有数据包发出之后，等待多少秒？",
          "definitionStr": "func synscan.wait(v1: float64) return (r0: func scanOpt(v1: *tools._yakPortScanConfig) )"
        },
        {
          "functionName": "outputPrefix(${1:prefix/*type: string*/})",
          "document": "【参数】输出的文件每一行的前缀（用于增加 `https://` 这样的协议名等）",
          "definitionStr": "func synscan.outputPrefix(prefix: string) return (r0: opt)"
        },
        {
          "functionName": "outputFile(${1:v1/*type: string*/})",
          "document": "【参数】synscan 对外输出的文件",
          "definitionStr": "func synscan.outputFile(v1: string) return (r0: opt)"
        },
        {
          "functionName": "initPortFilter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func synscan.initPortFilter(v1: string) return (r0: func scanOpt(v1: *tools._yakPortScanConfig) )"
        },
        {
          "functionName": "initHostFilter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func synscan.initHostFilter(v1: string) return (r0: func scanOpt(v1: *tools._yakPortScanConfig) )"
        },
        {
          "functionName": "ScanFromPing(${1:v1/*type: chan *pingutil.PingResult*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...tools.scanOpt*/})",
          "document": "新增从 Ping 中的扫描",
          "definitionStr": "func synscan.ScanFromPing(v1: chan *pingutil.PingResult, v2: string, v3 ...tools.scanOpt) return (r0: chan *synscan.SynScanResult, r1: error)"
        },
        {
          "functionName": "Scan(${1:hosts/*type: string*/}, ${2:ports/*type: string*/}, ${3:v3/*type ...tools.scanOpt*/})",
          "document": "扫描核心函数",
          "definitionStr": "func synscan.Scan(hosts: string, ports: string, v3 ...tools.scanOpt) return (r0: chan *synscan.SynScanResult, r1: error)"
        }
      ]
    },
    {
      "libName": "sync",
      "prefix": "sync.",
      "functions": [
        {
          "functionName": "NewWaitGroup()",
          "document": "",
          "definitionStr": "func sync.NewWaitGroup() return (r0: *sync.WaitGroup)"
        },
        {
          "functionName": "NewSizedWaitGroup(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func sync.NewSizedWaitGroup(v1: int) return (r0: *utils.SizedWaitGroup)"
        },
        {
          "functionName": "NewRWMutex()",
          "document": "",
          "definitionStr": "func sync.NewRWMutex() return (r0: *sync.RWMutex)"
        },
        {
          "functionName": "NewPool()",
          "document": "",
          "definitionStr": "func sync.NewPool() return (r0: *sync.Pool)"
        },
        {
          "functionName": "NewOnce()",
          "document": "",
          "definitionStr": "func sync.NewOnce() return (r0: *sync.Once)"
        },
        {
          "functionName": "NewMutex()",
          "document": "",
          "definitionStr": "func sync.NewMutex() return (r0: *sync.Mutex)"
        },
        {
          "functionName": "NewMap()",
          "document": "",
          "definitionStr": "func sync.NewMap() return (r0: *sync.Map)"
        },
        {
          "functionName": "NewLock()",
          "document": "",
          "definitionStr": "func sync.NewLock() return (r0: *sync.Mutex)"
        },
        {
          "functionName": "NewCond()",
          "document": "",
          "definitionStr": "func sync.NewCond() return (r0: *sync.Cond)"
        }
      ]
    },
    {
      "libName": "subdomain",
      "prefix": "subdomain.",
      "functions": [
        {
          "functionName": "workerConcurrent(${1:concurrent/*type: int*/})",
          "document": "发送 DNS 请求的最大并发（同时允许多少个 DNS 请求同时发出？）主要用于控制速率",
          "definitionStr": "func subdomain.workerConcurrent(concurrent: int) return (r0: subdomain.param)"
        },
        {
          "functionName": "wildcardToStop(${1:v1/*type: bool*/})",
          "document": "遇到泛解析就停止",
          "definitionStr": "func subdomain.wildcardToStop(v1: bool) return (r0: subdomain.param)"
        },
        {
          "functionName": "targetTimeout(${1:seconds/*type: float64*/})",
          "document": "每一个目标应该最多爆破多久？单个目标的超时时间",
          "definitionStr": "func subdomain.targetTimeout(seconds: float64) return (r0: subdomain.param)"
        },
        {
          "functionName": "targetConcurrent(${1:concurrent/*type: int*/})",
          "document": "针对多个目标进行并发爆破的时候，通过这个选项设置并发",
          "definitionStr": "func subdomain.targetConcurrent(concurrent: int) return (r0: subdomain.param)"
        },
        {
          "functionName": "recursiveDict(${1:dict/*type: string|fileName|[]string|bytes|reader*/})",
          "document": "如果开启了递归，则可以设置递归字典（默认自带一个小字典）",
          "definitionStr": "func subdomain.recursiveDict(dict: string|fileName|[]string|bytes|reader) return (r0: subdomain.param)"
        },
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "是否开启递归爆破",
          "definitionStr": "func subdomain.recursive(v1: bool) return (r0: subdomain.param)"
        },
        {
          "functionName": "maxDepth(${1:depth/*type: int*/})",
          "document": "设置递归爆破的最大深度",
          "definitionStr": "func subdomain.maxDepth(depth: int) return (r0: subdomain.param)"
        },
        {
          "functionName": "mainDict(${1:dict/*type: string|[]string|fileName|bytes|reader*/})",
          "document": "子域名爆破使用的主字典（字典名/字典内容[]string/bytes/reader）均支持",
          "definitionStr": "func subdomain.mainDict(dict: string|[]string|fileName|bytes|reader) return (r0: subdomain.param)"
        },
        {
          "functionName": "eachSearchTimeout(${1:seconds/*type: float64*/})",
          "document": "每次调用第三方接口进行子域名搜索的时候，HTTP 请求的超时时间",
          "definitionStr": "func subdomain.eachSearchTimeout(seconds: float64) return (r0: subdomain.param)"
        },
        {
          "functionName": "eachQueryTimeout(${1:seconds/*type: float64*/})",
          "document": "每一次 DNS 请求发送的超时时间",
          "definitionStr": "func subdomain.eachQueryTimeout(seconds: float64) return (r0: subdomain.param)"
        },
        {
          "functionName": "dnsServer(${1:servers/*type: []string*/})",
          "document": "为扫描过程设置自定义 dnsServer",
          "definitionStr": "func subdomain.dnsServer(servers: []string) return (r0: subdomain.param)"
        },
        {
          "functionName": "Scan(${1:domains/*type: []string|string|bytes*/}, ${2:params/*type ...subdomain.param*/})",
          "document": "扫描子域名的核心函数，通过和这个函数，输入想要扫描的子域名和相关参数",
          "definitionStr": "func subdomain.Scan(domains: []string|string|bytes, params subdomain.param) return (resultsChannel: chan *subdomain.SubdomainResult, err: error)"
        }
      ]
    },
    {
      "libName": "str",
      "prefix": "str.",
      "functions": [
        {
          "functionName": "f(${1:strFmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "相当于 `fmt.Sprintf`",
          "definitionStr": "func str.f(strFmt: string, items ...any) return (r0: string)"
        },
        {
          "functionName": "UrlJoin(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "URL Join，可以拼接 URL Path",
          "definitionStr": "func str.UrlJoin(v1: string, v2 ...string) return (r0: string, r1: error)"
        },
        {
          "functionName": "TrimSuffix(${1:origin/*type: string*/}, ${2:suffix/*type: string*/})",
          "document": "移除后缀",
          "definitionStr": "func str.TrimSuffix(origin: string, suffix: string) return (r0: string)"
        },
        {
          "functionName": "TrimSpace(${1:v1/*type: string*/})",
          "document": "移除前后空白字符",
          "definitionStr": "func str.TrimSpace(v1: string) return (r0: string)"
        },
        {
          "functionName": "TrimRight(${1:origin/*type: string*/}, ${2:subs/*type: string*/})",
          "document": "移除右边的某些字符",
          "definitionStr": "func str.TrimRight(origin: string, subs: string) return (r0: string)"
        },
        {
          "functionName": "TrimPrefix(${1:origin/*type: string*/}, ${2:prefix/*type: string*/})",
          "document": "移除某个前缀",
          "definitionStr": "func str.TrimPrefix(origin: string, prefix: string) return (r0: string)"
        },
        {
          "functionName": "TrimLeft(${1:origin/*type: string*/}, ${2:subs/*type: string*/})",
          "document": "移除左边的某些字符",
          "definitionStr": "func str.TrimLeft(origin: string, subs: string) return (r0: string)"
        },
        {
          "functionName": "Trim(${1:origin/*type: string*/}, ${2:subs/*type: string*/})",
          "document": "把字符串前后任何包含子字符串中字符移除",
          "definitionStr": "func str.Trim(origin: string, subs: string) return (r0: string)"
        },
        {
          "functionName": "ToValidUTF8(${1:originStr/*type: string*/}, ${2:replaced/*type: string*/})",
          "document": "把字符串中不安全的UTF8字符替换掉，避免 panic",
          "definitionStr": "func str.ToValidUTF8(originStr: string, replaced: string) return (r0: string)"
        },
        {
          "functionName": "ToUpperSpecial(${1:v1/*type: unicode.SpecialCase*/}, ${2:v2/*type: string*/})",
          "document": "同 Golang `strings.ToUpperSpecial`",
          "definitionStr": "func str.ToUpperSpecial(v1: unicode.SpecialCase, v2: string) return (r0: string)"
        },
        {
          "functionName": "ToUpper(${1:v1/*type: string*/})",
          "document": "把字符串变成全大写",
          "definitionStr": "func str.ToUpper(v1: string) return (r0: string)"
        },
        {
          "functionName": "ToTitleSpecial(${1:v1/*type: unicode.SpecialCase*/}, ${2:v2/*type: string*/})",
          "document": "同 Golang `strings.ToTitleSpecial`",
          "definitionStr": "func str.ToTitleSpecial(v1: unicode.SpecialCase, v2: string) return (r0: string)"
        },
        {
          "functionName": "ToTitle(${1:v1/*type: string*/})",
          "document": "同 Golang `strings.ToTitle`",
          "definitionStr": "func str.ToTitle(v1: string) return (r0: string)"
        },
        {
          "functionName": "ToLowerSpecial(${1:v1/*type: unicode.SpecialCase*/}, ${2:v2/*type: string*/})",
          "document": "同 Golang `strings.ToLowerSpecial`",
          "definitionStr": "func str.ToLowerSpecial(v1: unicode.SpecialCase, v2: string) return (r0: string)"
        },
        {
          "functionName": "ToLower(${1:v1/*type: string*/})",
          "document": "把字符串变成小写",
          "definitionStr": "func str.ToLower(v1: string) return (r0: string)"
        },
        {
          "functionName": "ToJsonIndentStr(${1:v1/*type: any*/})",
          "document": "把一个对象解析成 Json，并保证 indent 合理",
          "definitionStr": "func str.ToJsonIndentStr(v1: any) return (r0: string)"
        },
        {
          "functionName": "Title(${1:v1/*type: string*/})",
          "document": "把字符串每个单词首字母大写，变成 Title",
          "definitionStr": "func str.Title(v1: string) return (r0: string)"
        },
        {
          "functionName": "Subtract(${1:v1/*type: []string*/}, ${2:v2/*type: []string*/})",
          "document": "列表相减",
          "definitionStr": "func str.Subtract(v1: []string, v2: []string) return (r0: []string)"
        },
        {
          "functionName": "StringSliceContainsAll(${1:slice/*type: []string*/}, ${2:subStrs/*type ...string*/})",
          "document": "判断一个 Slice 中是否包含后续所有子串？",
          "definitionStr": "func str.StringSliceContainsAll(slice: []string, subStrs ...string) return (r0: bool)"
        },
        {
          "functionName": "StringSliceContains(${1:slice/*type: []string*/}, ${2:sub/*type: string*/})",
          "document": "判断一个 Slice 中是否包含一个子字符串？",
          "definitionStr": "func str.StringSliceContains(slice: []string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "StringContainsAnyOfSubString(${1:all/*type: string*/}, ${2:subStrs/*type: []string*/})",
          "document": "判断字符串是否包含任意一个后续 Slice 中的元素？",
          "definitionStr": "func str.StringContainsAnyOfSubString(all: string, subStrs: []string) return (r0: bool)"
        },
        {
          "functionName": "StartsWith(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断主字符串是否是子串开头？",
          "definitionStr": "func str.StartsWith(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "SplitN(${1:all/*type: string*/}, ${2:sep/*type: string*/}, ${3:n/*type: int*/})",
          "document": "分割字符串，分割成N块",
          "definitionStr": "func str.SplitN(all: string, sep: string, n: int) return (r0: []string)"
        },
        {
          "functionName": "SplitHTTPHeadersAndBodyFromPacket(${1:packet/*type: bytes*/}, ${2:v2/*type ...func(string)*/})",
          "document": "把数据包的 headers 和 body 进行分离",
          "definitionStr": "func str.SplitHTTPHeadersAndBodyFromPacket(packet: bytes, v2 ...func(string)) return (r0: string, r1: bytes)"
        },
        {
          "functionName": "SplitAndTrim(${1:all/*type: string*/}, ${2:sep/*type: string*/})",
          "document": "分割，并清除每一个部分的前后空白",
          "definitionStr": "func str.SplitAndTrim(all: string, sep: string) return (r0: []string)"
        },
        {
          "functionName": "SplitAfterN(${1:all/*type: string*/}, ${2:sep/*type: string*/}, ${3:n/*type: int*/})",
          "document": "分割字符串，不移除分隔符，最多分割成N个块",
          "definitionStr": "func str.SplitAfterN(all: string, sep: string, n: int) return (r0: []string)"
        },
        {
          "functionName": "SplitAfter(${1:all/*type: string*/}, ${2:sep/*type: string*/})",
          "document": "分割字符串，不移除分隔符",
          "definitionStr": "func str.SplitAfter(all: string, sep: string) return (r0: []string)"
        },
        {
          "functionName": "Split(${1:all/*type: string*/}, ${2:sep/*type: string*/})",
          "document": "分割字符串",
          "definitionStr": "func str.Split(all: string, sep: string) return (r0: []string)"
        },
        {
          "functionName": "ReplaceHTTPPacketBody(${1:packetRaw/*type: bytes*/}, ${2:newBody/*type: bytes*/}, ${3:isHttps/*type: bool*/})",
          "document": "整体替代一个数据包的 body",
          "definitionStr": "func str.ReplaceHTTPPacketBody(packetRaw: bytes, newBody: bytes, isHttps: bool) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceAll(${1:raw/*type: string*/}, ${2:old/*type: string*/}, ${3:new/*type: string*/})",
          "document": "字符串替换，全部",
          "definitionStr": "func str.ReplaceAll(raw: string, old: string, new: string) return (r0: string)"
        },
        {
          "functionName": "Replace(${1:raw/*type: string*/}, ${2:old/*type: string*/}, ${3:new/*type: string*/}, ${4:matchTimes/*type: int*/})",
          "document": "字符串替换（次数）",
          "definitionStr": "func str.Replace(raw: string, old: string, new: string, matchTimes: int) return (r0: string)"
        },
        {
          "functionName": "Repeat(${1:strContent/*type: string*/}, ${2:count/*type: int*/})",
          "document": "重复字符串",
          "definitionStr": "func str.Repeat(strContent: string, count: int) return (r0: string)"
        },
        {
          "functionName": "RemoveRepeat(${1:v1/*type: []string*/})",
          "document": "移除 slice 中重复元素",
          "definitionStr": "func str.RemoveRepeat(v1: []string) return (r0: []string)"
        },
        {
          "functionName": "RegexpMatch(${1:regexpPattern/*type: string*/}, ${2:content/*type: any*/})",
          "document": "使用正则匹配",
          "definitionStr": "func str.RegexpMatch(regexpPattern: string, content: any) return (r0: bool)"
        },
        {
          "functionName": "RandStr(${1:length/*type: int*/})",
          "document": "生成一个随机字符串",
          "definitionStr": "func str.RandStr(length: int) return (r0: string)"
        },
        {
          "functionName": "RandSecret(${1:length/*type: int*/})",
          "document": "生成一个随机密码",
          "definitionStr": "func str.RandSecret(length: int) return (r0: string)"
        },
        {
          "functionName": "PathJoin(${1:v1/*type ...string*/})",
          "document": "把 path 进行拼接",
          "definitionStr": "func str.PathJoin(v1 ...string) return (r0: string)"
        },
        {
          "functionName": "ParseStringUrlToWebsiteRootPath(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func str.ParseStringUrlToWebsiteRootPath(v1: string) return (r0: string)"
        },
        {
          "functionName": "ParseStringUrlToUrlInstance(${1:v1/*type: string*/})",
          "document": "把 URL 解析成 *url.URL",
          "definitionStr": "func str.ParseStringUrlToUrlInstance(v1: string) return (r0: *url.URL, r1: error)"
        },
        {
          "functionName": "ParseStringToUrlsWith3W(${1:v1/*type ...string*/})",
          "document": "把字符串（域名/IP/URL）解析成可能的 URL（如果是域名，自动补充 WWW 前缀）",
          "definitionStr": "func str.ParseStringToUrlsWith3W(v1 ...string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToUrls(${1:v1/*type ...string*/})",
          "document": "把字符串（域名/IP/URL）解析成可能的 URL（如果是域名，不自动补充 WWW 前缀）",
          "definitionStr": "func str.ParseStringToUrls(v1 ...string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToPorts(${1:v1/*type: string*/})",
          "document": "把字符串解析成多个端口，逗号分隔",
          "definitionStr": "func str.ParseStringToPorts(v1: string) return (r0: []int)"
        },
        {
          "functionName": "ParseStringToLines(${1:v1/*type: string*/})",
          "document": "把一个字符串按行解析",
          "definitionStr": "func str.ParseStringToLines(v1: string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToHosts(${1:v1/*type: string*/})",
          "document": "把字符串解析成 hosts，字符串可以是逗号分割的网段/域名/ip地址",
          "definitionStr": "func str.ParseStringToHosts(v1: string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToHostPort(${1:v1/*type: string*/})",
          "document": "把字符串解析成 host 和 port",
          "definitionStr": "func str.ParseStringToHostPort(v1: string) return (host: string, port: int, r2: error)"
        },
        {
          "functionName": "ParseStringToHTTPResponse(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func str.ParseStringToHTTPResponse(v1: string) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "ParseStringToHTTPRequest(${1:v1/*type: string*/})",
          "document": "把字符串解析为 *http.Request",
          "definitionStr": "func str.ParseStringToHTTPRequest(v1: string) return (r0: *http.Request, r1: error)"
        },
        {
          "functionName": "ParseStringToCClassHosts(${1:v1/*type: string*/})",
          "document": "把网络段的字符串变为整理后的 C 段主机",
          "definitionStr": "func str.ParseStringToCClassHosts(v1: string) return (r0: string)"
        },
        {
          "functionName": "ParseBytesToHTTPResponse(${1:v1/*type: bytes*/})",
          "document": "把 bytes 解析成 *http.Response",
          "definitionStr": "func str.ParseBytesToHTTPResponse(v1: bytes) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "ParseBytesToHTTPRequest(${1:v1/*type: bytes*/})",
          "document": "把 bytes 解析成 *http.Request",
          "definitionStr": "func str.ParseBytesToHTTPRequest(v1: bytes) return (r0: *http.Request, r1: error)"
        },
        {
          "functionName": "ParamsGetOr(${1:params/*type: map[string]string*/}, ${2:key/*type: string*/}, ${3:defaulValue/*type: string*/})",
          "document": "从 `map[string]string` 中获取参数",
          "definitionStr": "func str.ParamsGetOr(params: map[string]string, key: string, defaulValue: string) return (r0: string)"
        },
        {
          "functionName": "NewReader(${1:v1/*type: string*/})",
          "document": "创建一个 Reader",
          "definitionStr": "func str.NewReader(v1: string) return (r0: *strings.Reader)"
        },
        {
          "functionName": "NewFilter()",
          "document": "创建一个字符串过滤器",
          "definitionStr": "func str.NewFilter() return (r0: *filter.StringFilter)"
        },
        {
          "functionName": "MergeUrlFromHTTPRequest(${1:reqRaw/*type: bytes*/}, ${2:newUrl/*type: string*/}, ${3:isHttps/*type: bool*/})",
          "document": "根据原始数据包拼接一个新的 URL",
          "definitionStr": "func str.MergeUrlFromHTTPRequest(reqRaw: bytes, newUrl: string, isHttps: bool) return (r0: string)"
        },
        {
          "functionName": "MatchAnyOfSubString(${1:data/*type: any*/}, ${2:subStrs/*type ...string*/})",
          "document": "包含任何一个子字符串",
          "definitionStr": "func str.MatchAnyOfSubString(data: any, subStrs ...string) return (r0: bool)"
        },
        {
          "functionName": "MatchAnyOfRegexp(${1:data/*type: any*/}, ${2:regexps/*type ...string*/})",
          "document": "匹配任何一条正则语句",
          "definitionStr": "func str.MatchAnyOfRegexp(data: any, regexps ...string) return (r0: bool)"
        },
        {
          "functionName": "MatchAnyOfGlob(${1:data/*type: any*/}, ${2:globRules/*type ...string*/})",
          "document": "只要有一条规则被匹配到规则即可",
          "definitionStr": "func str.MatchAnyOfGlob(data: any, globRules ...string) return (r0: bool)"
        },
        {
          "functionName": "MatchAllOfSubString(${1:data/*type: any*/}, ${2:subStrs/*type ...string*/})",
          "document": "所有的子字符串都被匹配到",
          "definitionStr": "func str.MatchAllOfSubString(data: any, subStrs ...string) return (r0: bool)"
        },
        {
          "functionName": "MatchAllOfRegexp(${1:data/*type: any*/}, ${2:regexps/*type ...string*/})",
          "document": "所有的正则都被匹配到",
          "definitionStr": "func str.MatchAllOfRegexp(data: any, regexps ...string) return (r0: bool)"
        },
        {
          "functionName": "MatchAllOfGlob(${1:data/*type: any*/}, ${2:globRules/*type ...string*/})",
          "document": "所有的 glob 规则都被匹配到",
          "definitionStr": "func str.MatchAllOfGlob(data: any, globRules ...string) return (r0: bool)"
        },
        {
          "functionName": "LowerAndTrimSpace(${1:v1/*type: string*/})",
          "document": "把字符串前后空白移除，并变成小写",
          "definitionStr": "func str.LowerAndTrimSpace(v1: string) return (r0: string)"
        },
        {
          "functionName": "LastIndexByte(${1:all/*type: string*/}, ${2:byte/*type: byte*/})",
          "document": "最后一个目标 byte 的位置",
          "definitionStr": "func str.LastIndexByte(all: string, byte: byte) return (r0: int)"
        },
        {
          "functionName": "LastIndexAny(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "子字符串中任何一个字符在主字符串中最后出现的位置",
          "definitionStr": "func str.LastIndexAny(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "LastIndex(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "从后往前匹配最后一个子字符串位置",
          "definitionStr": "func str.LastIndex(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "JsonToMapList(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func str.JsonToMapList(v1: string) return (r0: []map[string]string)"
        },
        {
          "functionName": "JsonToMap(${1:v1/*type: string*/})",
          "document": "把 Json 解析成 `map[string]string`",
          "definitionStr": "func str.JsonToMap(v1: string) return (r0: map[string]string)"
        },
        {
          "functionName": "JsonStreamToMapList(${1:v1/*type: io.Reader*/})",
          "document": "把 json 流解析成多个 `map[string]interface{}`",
          "definitionStr": "func str.JsonStreamToMapList(v1: io.Reader) return (r0: []map[string]any)"
        },
        {
          "functionName": "Join(${1:strSlice/*type: []string*/}, ${2:seperator/*type: string*/})",
          "document": "Join 一个字符串，把 slice 中拼成字符串，使用 seperator 作为分隔符",
          "definitionStr": "func str.Join(strSlice: []string, seperator: string) return (r0: string)"
        },
        {
          "functionName": "IsXmlValue(${1:v1/*type: any*/})",
          "document": "判断一个值是不是 XML",
          "definitionStr": "func str.IsXmlValue(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsXmlRequest(${1:v1/*type: any*/})",
          "document": "判断一个请求是不是 XML 请求",
          "definitionStr": "func str.IsXmlRequest(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsXmlParam(${1:v1/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "判断一个参数是否是 XML 参数",
          "definitionStr": "func str.IsXmlParam(v1: string, v2: any) return (r0: bool)"
        },
        {
          "functionName": "IsUsernameField(${1:v1/*type: string*/})",
          "document": "判断一个字段名是不是可能是用户名？",
          "definitionStr": "func str.IsUsernameField(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsUrlPath(${1:v1/*type: any*/})",
          "document": "判断一个参数是不是路径？",
          "definitionStr": "func str.IsUrlPath(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsUrlParam(${1:v1/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "判断一个参数是不是 URL",
          "definitionStr": "func str.IsUrlParam(v1: string, v2: any) return (r0: bool)"
        },
        {
          "functionName": "IsTLSServer(${1:v1/*type: string*/})",
          "document": "判断一个地址是不是 TLS",
          "definitionStr": "func str.IsTLSServer(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsStrongPassword(${1:v1/*type: string*/})",
          "document": "判断一个密码是不是强密码",
          "definitionStr": "func str.IsStrongPassword(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsSha256Value(${1:v1/*type: string*/})",
          "document": "判断是否是一个可能的 SHA256 值",
          "definitionStr": "func str.IsSha256Value(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsServerError(${1:v1/*type: any*/})",
          "document": "判断是否有服务器常见错误",
          "definitionStr": "func str.IsServerError(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsSensitiveTokenField(${1:v1/*type: string*/})",
          "document": "判断是不是敏感 Token/AC/SecretKey",
          "definitionStr": "func str.IsSensitiveTokenField(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsSensitiveJson(${1:v1/*type: bytes*/})",
          "document": "判断是否是敏感 JSON（Key:Value）",
          "definitionStr": "func str.IsSensitiveJson(v1: bytes) return (r0: bool)"
        },
        {
          "functionName": "IsSQLColumnField(${1:v1/*type: string*/})",
          "document": "判断字段名是不是 SQL 列名",
          "definitionStr": "func str.IsSQLColumnField(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsRedirectParam(${1:v1/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "判断参数是不是可能是 Redirect 参数",
          "definitionStr": "func str.IsRedirectParam(v1: string, v2: any) return (r0: bool)"
        },
        {
          "functionName": "IsPlainBase64Value(${1:v1/*type: string*/})",
          "document": "判断Base64的结果是不是都是可见字符",
          "definitionStr": "func str.IsPlainBase64Value(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsPasswordField(${1:v1/*type: string*/})",
          "document": "判断是否是密码字段",
          "definitionStr": "func str.IsPasswordField(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsMD5Value(${1:v1/*type: string*/})",
          "document": "判断有没有参数是 MD5 值的",
          "definitionStr": "func str.IsMD5Value(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsJsonResponse(${1:v1/*type: any*/})",
          "document": "判断请求是不是 JSON 请求",
          "definitionStr": "func str.IsJsonResponse(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsJSONPParam(${1:v1/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "判断 JSONP 参数",
          "definitionStr": "func str.IsJSONPParam(v1: string, v2: any) return (r0: bool)"
        },
        {
          "functionName": "IsIPv6(${1:v1/*type: string*/})",
          "document": "判断一个字符串是不是 IPv6",
          "definitionStr": "func str.IsIPv6(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsIPv4(${1:v1/*type: string*/})",
          "document": "判断一个字符串是不是 IPv4",
          "definitionStr": "func str.IsIPv4(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsHttpURL(${1:v1/*type: any*/})",
          "document": "判断 URL 是不是 http(s):// ",
          "definitionStr": "func str.IsHttpURL(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsHtmlResponse(${1:v1/*type: any*/})",
          "document": "判断一个 Response 是不是 HTML",
          "definitionStr": "func str.IsHtmlResponse(v1: any) return (r0: bool)"
        },
        {
          "functionName": "IsCaptchaField(${1:v1/*type: string*/})",
          "document": "判断一个参数是不是验证码",
          "definitionStr": "func str.IsCaptchaField(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsBase64Value(${1:v1/*type: string*/})",
          "document": "判断一个值是不是 base64",
          "definitionStr": "func str.IsBase64Value(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IntersectString(${1:v1/*type: []string*/}, ${2:v2/*type: []string*/})",
          "document": "取两个集合的交集",
          "definitionStr": "func str.IntersectString(v1: []string, v2: []string) return (r0: []string)"
        },
        {
          "functionName": "IndexByte(${1:all/*type: string*/}, ${2:byte/*type: byte*/})",
          "document": "判断一个 byte 的位置",
          "definitionStr": "func str.IndexByte(all: string, byte: byte) return (r0: int)"
        },
        {
          "functionName": "IndexAny(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断子字符串中任意一个字符在主串中的位置",
          "definitionStr": "func str.IndexAny(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "Index(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断子字符串在字符串中的位置",
          "definitionStr": "func str.Index(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "IPv4ToCClassNetwork(${1:ip/*type: string*/})",
          "document": "把一个 IPv4 变成对应的 C段网络",
          "definitionStr": "func str.IPv4ToCClassNetwork(ip: string) return (network: string, r1: error)"
        },
        {
          "functionName": "HostPort(${1:host/*type: string*/}, ${2:port/*type: any*/})",
          "document": "把字符串Host和Port拼接起来",
          "definitionStr": "func str.HostPort(host: string, port: any) return (r0: string)"
        },
        {
          "functionName": "HasSuffix(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断字符串是否以子字符串为后缀",
          "definitionStr": "func str.HasSuffix(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "HasPrefix(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断字符串是不是以子串为前缀",
          "definitionStr": "func str.HasPrefix(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "Grok(${1:content/*type: string*/}, ${2:grokRule/*type: string*/})",
          "document": "同 `re.Grok`",
          "definitionStr": "func str.Grok(content: string, grokRule: string) return (r0: yaklib.GrokResult)"
        },
        {
          "functionName": "FixHTTPResponse(${1:response/*type: bytes*/})",
          "document": "修复 HTTPResponse 的 bytes",
          "definitionStr": "func str.FixHTTPResponse(response: bytes) return (rsp: bytes, body: bytes, r2: error)"
        },
        {
          "functionName": "FixHTTPRequest(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func str.FixHTTPRequest(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "Fields(${1:v1/*type: string*/})",
          "document": "按空格把字符串分割开",
          "definitionStr": "func str.Fields(v1: string) return (r0: []string)"
        },
        {
          "functionName": "ExtractURLFromHTTPRequestRaw(${1:reqRaw/*type: bytes*/}, ${2:isHttps/*type: bool*/})",
          "document": "从一个原始数据包中提取 URL",
          "definitionStr": "func str.ExtractURLFromHTTPRequestRaw(reqRaw: bytes, isHttps: bool) return (r0: *url.URL, r1: error)"
        },
        {
          "functionName": "ExtractURLFromHTTPRequest(${1:req/*type: *http.Request*/}, ${2:isHttps/*type: bool*/})",
          "document": "从一个请求对象提取 URL",
          "definitionStr": "func str.ExtractURLFromHTTPRequest(req: *http.Request, isHttps: bool) return (r0: *url.URL, r1: error)"
        },
        {
          "functionName": "ExtractTitle(${1:v1/*type: any*/})",
          "document": "从 HTML 中提取标题",
          "definitionStr": "func str.ExtractTitle(v1: any) return (r0: string)"
        },
        {
          "functionName": "ExtractStrContext(${1:v1/*type: bytes*/}, ${2:keywords/*type: []string*/})",
          "document": "提取 str 的上下文，（前后字符串）",
          "definitionStr": "func str.ExtractStrContext(v1: bytes, keywords: []string) return (r0: []string)"
        },
        {
          "functionName": "ExtractChineseIDCards(${1:v1/*type: any*/})",
          "document": "提取内容中的身份证号",
          "definitionStr": "func str.ExtractChineseIDCards(v1: any) return (r0: []string)"
        },
        {
          "functionName": "ExtractBodyFromHTTPResponseRaw(${1:rsp/*type: bytes*/})",
          "document": "从 response bytes 中提取 body",
          "definitionStr": "func str.ExtractBodyFromHTTPResponseRaw(rsp: bytes) return (body: bytes, r1: error)"
        },
        {
          "functionName": "EqualFold(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "判断忽略大小写字符串是否相等？",
          "definitionStr": "func str.EqualFold(v1: string, v2: string) return (r0: bool)"
        },
        {
          "functionName": "EndsWith(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断字符串是否以子串为结尾",
          "definitionStr": "func str.EndsWith(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "Count(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "字符串中包含多少个字串？",
          "definitionStr": "func str.Count(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "ContainsAny(${1:all/*type: string*/}, ${2:chars/*type: string*/})",
          "document": "字符串中包含字串的任何一个字符",
          "definitionStr": "func str.ContainsAny(all: string, chars: string) return (r0: bool)"
        },
        {
          "functionName": "Contains(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "字符串中是否包含一个子串",
          "definitionStr": "func str.Contains(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "Compare(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "比较字符串",
          "definitionStr": "func str.Compare(v1: string, v2: string) return (r0: int)"
        },
        {
          "functionName": "CalcTextMaxSubStrStability(${1:v1/*type ...bytes*/})",
          "document": "计算文本相似度（SQLMap 文本相似度算法）",
          "definitionStr": "func str.CalcTextMaxSubStrStability(v1 ...bytes) return (r0: float64, r1: error)"
        },
        {
          "functionName": "CalcSimilarity(${1:v1/*type ...bytes*/})",
          "document": "计算多个文本的相似度（综合）",
          "definitionStr": "func str.CalcSimilarity(v1 ...bytes) return (r0: float64)"
        },
        {
          "functionName": "CalcSimHashStability(${1:v1/*type ...bytes*/})",
          "document": "计算多个值 SimHash 的相似度",
          "definitionStr": "func str.CalcSimHashStability(v1 ...bytes) return (r0: float64, r1: error)"
        },
        {
          "functionName": "CalcSimHash(${1:v1/*type: bytes*/})",
          "document": "计算 SimHash 的值",
          "definitionStr": "func str.CalcSimHash(v1: bytes) return (r0: uint64)"
        },
        {
          "functionName": "CalcSSDeepStability(${1:v1/*type ...bytes*/})",
          "document": "计算多个文本的 SSDeep 平均相似度，0-1.0，越大越稳定（相似）",
          "definitionStr": "func str.CalcSSDeepStability(v1 ...bytes) return (r0: float64, r1: error)"
        },
        {
          "functionName": "CalcSSDeep(${1:v1/*type: bytes*/})",
          "document": "计算 SSDeep 的 Hash 值",
          "definitionStr": "func str.CalcSSDeep(v1: bytes) return (r0: string)"
        }
      ]
    },
    {
      "libName": "spacengine",
      "prefix": "spacengine.",
      "functions": [
        {
          "functionName": "maxRecord(${1:maxRecord/*type: int*/})",
          "document": "【参数】最多获取多少条数据？但是由于 limit 的限制，这个数据往往比 maxRecord 多，直到补满当前页",
          "definitionStr": "func spacengine.maxRecord(maxRecord: int) return (r0: opt)"
        },
        {
          "functionName": "maxPage(${1:maxPage/*type: int*/})",
          "document": "【参数】最多筛选多少页？",
          "definitionStr": "func spacengine.maxPage(maxPage: int) return (r0: opt)"
        },
        {
          "functionName": "ShodanQuery(${1:apiKey/*type: string*/}, ${2:filter/*type: string*/}, ${3:params/*type ...yaklib._spaceEngineConfigOpt*/})",
          "document": "",
          "definitionStr": "func spacengine.ShodanQuery(apiKey: string, filter: string, params ...yaklib._spaceEngineConfigOpt) return (resultChan: chan *spacengine.NetSpaceEngineResult, r1: error)"
        },
        {
          "functionName": "QuakeQuery(${1:apiKey/*type: string*/}, ${2:filter/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "",
          "definitionStr": "func spacengine.QuakeQuery(apiKey: string, filter: string, params ...opt) return (resultChan: chan *spacengine.NetSpaceEngineResult, r1: error)"
        },
        {
          "functionName": "HunterQuery(${1:username/*type: string*/}, ${2:apikey/*type: string*/}, ${3:query/*type: string*/}, ${4:opts/*type ...yaklib._spaceEngineConfigOpt*/})",
          "document": "新增 Hunter 空间引擎接口",
          "definitionStr": "func spacengine.HunterQuery(username: string, apikey: string, query: string, opts ...yaklib._spaceEngineConfigOpt) return (r0: chan *spacengine.NetSpaceEngineResult, r1: error)"
        },
        {
          "functionName": "FofaQuery(${1:email/*type: string*/}, ${2:key/*type: string*/}, ${3:filter/*type: string*/}, ${4:params/*type ...opt*/})",
          "document": "查询 Fofa 中的数据",
          "definitionStr": "func spacengine.FofaQuery(email: string, key: string, filter: string, params ...opt) return (resultChan: chan *spacengine.NetSpaceEngineResult, r1: error)"
        }
      ]
    },
    {
      "libName": "smb",
      "prefix": "smb.",
      "functions": [
        {
          "functionName": "workstation(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func smb.workstation(v1: string) return (r0: func _smbConfigHandler(v1: *yaklib._smbConfig) )"
        },
        {
          "functionName": "username(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func smb.username(v1: string) return (r0: func _smbConfigHandler(v1: *yaklib._smbConfig) )"
        },
        {
          "functionName": "password(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func smb.password(v1: string) return (r0: func _smbConfigHandler(v1: *yaklib._smbConfig) )"
        },
        {
          "functionName": "hash(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func smb.hash(v1: string) return (r0: func _smbConfigHandler(v1: *yaklib._smbConfig) )"
        },
        {
          "functionName": "domain(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func smb.domain(v1: string) return (r0: func _smbConfigHandler(v1: *yaklib._smbConfig) )"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func smb.debug(v1: bool) return (r0: func _smbConfigHandler(v1: *yaklib._smbConfig) )"
        },
        {
          "functionName": "Connect(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._smbConfigHandler*/})",
          "document": "",
          "definitionStr": "func smb.Connect(v1: string, v2 ...yaklib._smbConfigHandler) return (r0: *smb.Session, r1: error)"
        }
      ]
    },
    {
      "libName": "servicescan",
      "prefix": "servicescan.",
      "functions": [
        {
          "functionName": "webRule(${1:v1/*type: any*/})",
          "document": "启用用户自定义 web 规则",
          "definitionStr": "func servicescan.webRule(v1: any) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "web()",
          "document": "强制启用 web 扫描",
          "definitionStr": "func servicescan.web() return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "service()",
          "document": "启动服务扫描（nmap 规则库）",
          "definitionStr": "func servicescan.service() return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "设置代理！",
          "definitionStr": "func servicescan.proxy(v1 ...string) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "proto(${1:protos/*type ...any*/})",
          "document": "设置扫描的协议",
          "definitionStr": "func servicescan.proto(protos ...any) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "probeTimeout(${1:请求超时时间/*type: float64*/})",
          "document": "",
          "definitionStr": "func servicescan.probeTimeout(请求超时时间: float64) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "nmapRule(${1:v1/*type: any*/})",
          "document": "【参数】设置 nmap 规则文件（可以自己写）",
          "definitionStr": "func servicescan.nmapRule(v1: any) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "nmapRarityMax(${1:max/*type: int*/})",
          "document": "【参数】设置nmap规则的最大稀有度",
          "definitionStr": "func servicescan.nmapRarityMax(max: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "maxProbesConcurrent(${1:size/*type: int*/})",
          "document": "【参数】每个指纹扫描目标允许的并发量",
          "definitionStr": "func servicescan.maxProbesConcurrent(size: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "maxProbes(${1:count/*type: int*/})",
          "document": "【参数】设置每个指纹扫描过程最多主动发送多少个数据包",
          "definitionStr": "func servicescan.maxProbes(count: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "concurrent(${1:concurrentSize/*type: int*/})",
          "document": "",
          "definitionStr": "func servicescan.concurrent(concurrentSize: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "all()",
          "document": "【参数】扫描全部指纹",
          "definitionStr": "func servicescan.all() return (scanAll: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "active(${1:isActive/*type: bool*/})",
          "document": "【参数】主动扫描模式",
          "definitionStr": "func servicescan.active(isActive: bool) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "ScanOne(${1:host/*type: string*/}, ${2:port/*type: int*/}, ${3:params/*type ...opt*/})",
          "document": "同步扫描单个目标",
          "definitionStr": "func servicescan.ScanOne(host: string, port: int, params ...opt) return (resultChan: *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "ScanFromSynResult(${1:chanForSynScan/*type: any*/}, ${2:params/*type ...opt*/})",
          "document": "从 synscan 中返回的结果直接进入 servicescan 扫描的通道",
          "definitionStr": "func servicescan.ScanFromSynResult(chanForSynScan: any, params ...opt) return (resultChan: chan *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "ScanFromSpaceEngine(${1:chanFromSpacengine/*type: any*/}, ${2:params/*type ...opt*/})",
          "document": "从网络空间搜索引擎的结果中扫描指纹信息",
          "definitionStr": "func servicescan.ScanFromSpaceEngine(chanFromSpacengine: any, params ...opt) return (resultChan: chan *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "ScanFromPing(${1:v1/*type: chan *pingutil.PingResult*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...fp.ConfigOption*/})",
          "document": "从 Ping 中扫描",
          "definitionStr": "func servicescan.ScanFromPing(v1: chan *pingutil.PingResult, v2: string, v3 ...fp.ConfigOption) return (r0: chan *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "Scan(${1:hosts/*type: string*/}, ${2:ports/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "扫描服务指纹的核心函数",
          "definitionStr": "func servicescan.Scan(hosts: string, ports: string, params ...opt) return (resultChannel: chan *fp.MatchResult, r1: error)"
        }
      ]
    },
    {
      "libName": "risk",
      "prefix": "risk.",
      "functions": [
        {
          "functionName": "typeVerbose(${1:v1/*type: string*/})",
          "document": "【参数】：漏洞类型别名",
          "definitionStr": "func risk.typeVerbose(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "type(${1:v1/*type: string*/})",
          "document": "【参数】：必填，设置漏洞类型",
          "definitionStr": "func risk.type(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "token(${1:v1/*type: string*/})",
          "document": "【参数】：设置 reverse_token",
          "definitionStr": "func risk.token(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "titleVerbose(${1:v1/*type: string*/})",
          "document": "【参数】：展示标题",
          "definitionStr": "func risk.titleVerbose(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "title(${1:v1/*type: string*/})",
          "document": "【参数】：设置漏洞标题（必须）",
          "definitionStr": "func risk.title(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "severity(${1:v1/*type: string*/})",
          "document": "设置漏洞级别",
          "definitionStr": "func risk.severity(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "payload(${1:v1/*type: string*/})",
          "document": "【参数】：设置 Payload",
          "definitionStr": "func risk.payload(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "parameter(${1:name/*type: string*/})",
          "document": "【参数】：设置漏洞/Risk的出问题的参数名",
          "definitionStr": "func risk.parameter(name: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "level(${1:v1/*type: string*/})",
          "document": "设置漏洞级别",
          "definitionStr": "func risk.level(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
<<<<<<< HEAD
          "functionName": "fromYakScript(${1:v1/*type: string*/})",
          "document": "为漏洞设置来源脚本",
          "definitionStr": "func risk.fromYakScript(v1: string) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
          "functionName": "details(${1:v1/*type: any*/})",
          "document": "【参数】：为漏洞设置参数内容，一般传入一个 map[string]interface{} 即可",
          "definitionStr": "func risk.details(v1: any) return (r0: func riskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "Save(${1:v1/*type: *yakit.Risk*/})",
          "document": "",
          "definitionStr": "func risk.Save(v1: *yakit.Risk) return (r0: error)"
        },
        {
          "functionName": "NewUnverifiedRisk(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个 Risk 记录（可理解为漏洞），并标记为没有验证的漏洞",
          "definitionStr": "func risk.NewUnverifiedRisk(v1: string, v2: string, v3 ...yakit.riskParamsOpt) return (r0: *yakit.Risk, r1: error)"
        },
        {
          "functionName": "NewRisk(${1:v1/*type: string*/}, ${2:v2/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个 Risk 记录（可理解为漏洞）",
          "definitionStr": "func risk.NewRisk(v1: string, v2 ...yakit.riskParamsOpt) return (r0: *yakit.Risk, r1: error)"
        },
        {
          "functionName": "NewRandomPortTrigger(${1:riskOpt/*type ...yakit.riskParamsOpt*/})",
          "document": "创建个新的随机端口检测记录",
          "definitionStr": "func risk.NewRandomPortTrigger(riskOpt ...yakit.riskParamsOpt) return (token: string, hostPort: string, err: error)"
        },
        {
          "functionName": "NewPublicReverseRMIUrl(${1:v1/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个远程服务器的 RMI URL（仅 yakit 内生效，并且需要配置 yak bridge）",
          "definitionStr": "func risk.NewPublicReverseRMIUrl(v1 ...yakit.riskParamsOpt) return (r0: string)"
        },
        {
          "functionName": "NewPublicReverseHTTPUrl(${1:v1/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个远程服务器的 HTTP URL（仅 yakit 内生效，并且需要配置 yak bridge）",
          "definitionStr": "func risk.NewPublicReverseHTTPUrl(v1 ...yakit.riskParamsOpt) return (r0: string)"
        },
        {
          "functionName": "NewPublicReverseHTTPSUrl(${1:v1/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个远程服务器的 HTTPS URL（仅 yakit 内生效，并且需要配置 yak bridge）",
          "definitionStr": "func risk.NewPublicReverseHTTPSUrl(v1 ...yakit.riskParamsOpt) return (r0: string)"
        },
        {
          "functionName": "NewLocalReverseRMIUrl(${1:v1/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个本地服务器的 RMI URL（仅 yakit 内生效）",
          "definitionStr": "func risk.NewLocalReverseRMIUrl(v1 ...yakit.riskParamsOpt) return (r0: string)"
        },
        {
          "functionName": "NewLocalReverseHTTPUrl(${1:v1/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个本地服务器的 HTTP URL（仅 yakit 内生效）",
          "definitionStr": "func risk.NewLocalReverseHTTPUrl(v1 ...yakit.riskParamsOpt) return (r0: string)"
        },
        {
          "functionName": "NewLocalReverseHTTPSUrl(${1:v1/*type ...yakit.riskParamsOpt*/})",
          "document": "创建一个本地服务器的 HTTPS(TLS+HTTP)URL（仅 yakit 内生效）",
          "definitionStr": "func risk.NewLocalReverseHTTPSUrl(v1 ...yakit.riskParamsOpt) return (r0: string)"
        },
        {
          "functionName": "NewDNSLogDomain()",
          "document": "",
          "definitionStr": "func risk.NewDNSLogDomain() return (r0: string, r1: string, r2: error)"
        },
        {
          "functionName": "HaveReverseRisk(${1:token/*type: string*/})",
          "document": "判断一个 Token 的反连是否触发",
          "definitionStr": "func risk.HaveReverseRisk(token: string) return (r0: boolvendor/github.com/projectdiscovery/fileutil/file.go)"
        },
        {
          "functionName": "ExtractTokenFromUrl(${1:url/*type: string*/})",
          "document": "从 URL 中提取 token",
          "definitionStr": "func risk.ExtractTokenFromUrl(url: string) return (r0: string)"
        },
        {
          "functionName": "CheckRandomTriggerByToken(${1:token/*type: string*/})",
          "document": "通过 Token 来查询随机触发器",
          "definitionStr": "func risk.CheckRandomTriggerByToken(token: string) return (event: *tpb.RandomPortTriggerEvent, err: error)"
        },
        {
          "functionName": "CheckICMPTriggerByLength(${1:v1/*type: int*/})",
          "document": "检查 ICMP 触发器",
          "definitionStr": "func risk.CheckICMPTriggerByLength(v1: int) return (r0: *tpb.ICMPTriggerNotification, r1: error)"
        },
        {
          "functionName": "CheckDNSLogByToken(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func risk.CheckDNSLogByToken(v1: string) return (r0: []*tpb.DNSLogEvent, r1: error)"
        }
      ]
    },
    {
      "libName": "report",
      "prefix": "report.",
      "functions": [
        {
          "functionName": "New()",
          "document": "新增 报告 机制",
          "definitionStr": "func report.New() return (r0: *yakit.Report)"
        }
      ]
    },
    {
      "libName": "re",
      "prefix": "re.",
      "functions": [
        {
          "functionName": "ReplaceAllWithFunc(${1:data/*type: any*/}, ${2:regexp/*type: string*/}, ${3:replaceFunc/*type: func (v1: string) return(string) */})",
          "document": "正则批量替换数据（使用函数处理匹配结果）",
          "definitionStr": "func re.ReplaceAllWithFunc(data: any, regexp: string, replaceFunc: func (v1: string) return(string) ) return (r0: string)"
        },
        {
          "functionName": "ReplaceAll(${1:data/*type: any*/}, ${2:regexp/*type: string*/}, ${3:newStr/*type: any*/})",
          "document": "整体批量替换",
          "definitionStr": "func re.ReplaceAll(data: any, regexp: string, newStr: any) return (r0: string)"
        },
        {
          "functionName": "QuoteMeta(${1:v1/*type: string*/})",
          "document": "把正则保留字符进行转义",
          "definitionStr": "func re.QuoteMeta(v1: string) return (r0: string)"
        },
        {
          "functionName": "MustCompilePOSIX(${1:regexpStr/*type: string*/})",
          "document": "编译正则 POSIX 模式，编译失败则 Panic",
          "definitionStr": "func re.MustCompilePOSIX(regexpStr: string) return (r0: *regexp.Regexp)"
        },
        {
          "functionName": "MustCompile(${1:regexpStr/*type: string*/})",
          "document": "编译正则，如果编译失败则 Panic",
          "definitionStr": "func re.MustCompile(regexpStr: string) return (r0: *regexp.Regexp)"
        },
        {
          "functionName": "Match(${1:regexpPattern/*type: string*/}, ${2:content/*type: any*/})",
          "document": "",
          "definitionStr": "func re.Match(regexpPattern: string, content: any) return (r0: bool)"
        },
        {
          "functionName": "Grok(${1:content/*type: string*/}, ${2:grokRule/*type: string*/})",
          "document": "从内容中按照 Grok 规则提取数据",
          "definitionStr": "func re.Grok(content: string, grokRule: string) return (data: yaklib.GrokResult)"
        },
        {
          "functionName": "FindSubmatchIndex(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "只匹配并提取第一组的分组带索引（起止位置）",
          "definitionStr": "func re.FindSubmatchIndex(data: any, regexp: string) return (r0: []int)"
        },
        {
          "functionName": "FindSubmatchAllIndex(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "匹配并提取分组带索引（起止位置）",
          "definitionStr": "func re.FindSubmatchAllIndex(data: any, regexp: string) return (indexes: [][matchStart, matchEnd, group1Start, group1End, ...])"
        },
        {
          "functionName": "FindSubmatchAll(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "正则匹配提取带分组的数据（匹配全部）",
          "definitionStr": "func re.FindSubmatchAll(data: any, regexp: string) return (r0: [][]string)"
        },
        {
          "functionName": "FindSubmatch(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "正则匹配提取带分组的数据（只匹配一个）",
          "definitionStr": "func re.FindSubmatch(data: any, regexp: string) return (results: []string)"
        },
        {
          "functionName": "FindIndex(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "提取匹配到的数据索引位置（起止位置）",
          "definitionStr": "func re.FindIndex(data: any, regexp: string) return (index: [start:int, end:int])"
        },
        {
          "functionName": "FindAllIndex(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "提取匹配到的数据的索引（起止位置）",
          "definitionStr": "func re.FindAllIndex(data: any, regexp: string) return (indexes: [][start: int, end: int])"
        },
        {
          "functionName": "FindAll(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "提取所有正则匹配到的数据",
          "definitionStr": "func re.FindAll(data: any, regexp: string) return (results: []string)"
        },
        {
          "functionName": "Find(${1:data/*type: any*/}, ${2:regexp/*type: string*/})",
          "document": "匹配并提取数据中符合正则的数据",
          "definitionStr": "func re.Find(data: any, regexp: string) return (result: string)"
        },
        {
          "functionName": "ExtractURL(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 URL",
          "definitionStr": "func re.ExtractURL(content: []byte|string|io.Reader|any) return (urls: []string)"
        },
        {
          "functionName": "ExtractTTY(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 TTY 内容",
          "definitionStr": "func re.ExtractTTY(content: []byte|string|io.Reader|any) return (ttys: []string)"
        },
        {
          "functionName": "ExtractPath(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取路径",
          "definitionStr": "func re.ExtractPath(content: []byte|string|io.Reader|any) return (paths: []string)"
        },
        {
          "functionName": "ExtractMac(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从字符串中提取可用的 Mac 地址",
          "definitionStr": "func re.ExtractMac(content: []byte|string|io.Reader|any) return (macAddrs: []string)"
        },
        {
          "functionName": "ExtractIPv6(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 IPv6 地址",
          "definitionStr": "func re.ExtractIPv6(content: []byte|string|io.Reader|any) return (ipAddrs: []string)"
        },
        {
          "functionName": "ExtractIPv4(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 IPv4 地址",
          "definitionStr": "func re.ExtractIPv4(content: []byte|string|io.Reader|any) return (ipAddrs: []string)"
        },
        {
          "functionName": "ExtractIP(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 IP 地址",
          "definitionStr": "func re.ExtractIP(content: []byte|string|io.Reader|any) return (ipAddrs: []string)"
        },
        {
          "functionName": "ExtractHostPort(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从结果中提取 `host:port`",
          "definitionStr": "func re.ExtractHostPort(content: []byte|string|io.Reader|any) return (hostPorts: []string)"
        },
        {
          "functionName": "ExtractEmail(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从字符串中提取 email",
          "definitionStr": "func re.ExtractEmail(content: []byte|string|io.Reader|any) return (emails: []string)"
        },
        {
          "functionName": "CompilePOSIX(${1:regexpStr/*type: string*/})",
          "document": "",
          "definitionStr": "func re.CompilePOSIX(regexpStr: string) return (r0: *regexp.Regexp, r1: error)"
        },
        {
          "functionName": "Compile(${1:regexpStr/*type: string*/})",
          "document": "编译正则",
          "definitionStr": "func re.Compile(regexpStr: string) return (r0: *regexp.Regexp, r1: error)"
        }
      ]
    },
    {
      "libName": "poc",
      "prefix": "poc.",
      "functions": [
        {
          "functionName": "timeout(${1:seconds/*type: float64*/})",
          "document": "设置 PoC Timeout",
          "definitionStr": "func poc.timeout(seconds: float64) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "redirectTimes(${1:maxRetry/*type: int*/})",
          "document": "设置重定向的次数",
          "definitionStr": "func poc.redirectTimes(maxRetry: int) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "redirectHandler(${1:v1/*type: func (v1: bool, v2: bytes, v3: bytes) return(bool) */})",
          "document": "设置重定向处理函数",
          "definitionStr": "func poc.redirectHandler(v1: func (v1: bool, v2: bytes, v3: bytes) return(bool) ) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "proxy(${1:proxyUrl/*type ...string*/})",
          "document": "设置代理",
          "definitionStr": "func poc.proxy(proxyUrl ...string) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "port(${1:v1/*type: int*/})",
          "document": "强行设置远端连接的端口（默认可以自动设置）",
          "definitionStr": "func poc.port(v1: int) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "params(${1:params/*type: any*/})",
          "document": "构造数据包时的参数，需要一个 map[string]any",
          "definitionStr": "func poc.params(params: any) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "noRedirect(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func poc.noRedirect(v1: bool) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "noFixContentLength(${1:v1/*type: bool*/})",
          "document": "不修复 ContentLength 控制开关",
          "definitionStr": "func poc.noFixContentLength(v1: bool) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "jsRedirect(${1:enable/*type: bool*/})",
          "document": "控制 js 跳转是否启用",
          "definitionStr": "func poc.jsRedirect(enable: bool) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "https(${1:b/*type: bool*/})",
          "document": "forceHttps",
          "definitionStr": "func poc.https(b: bool) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "host(${1:host/*type: string*/})",
          "document": "强制指定连接 Host（一般用于 host）",
          "definitionStr": "func poc.host(host: string) return (r0: func pocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "Split(${1:v1/*type: bytes*/}, ${2:v2/*type ...func(string)*/})",
          "document": "把一个数据包的 Header 部分和 Body 分开，Header 是 string，body 部分是 bytes",
          "definitionStr": "func poc.Split(v1: bytes, v2 ...func(string)) return (r0: string, r1: bytes)"
        },
        {
          "functionName": "ParseBytesToHTTPResponse(${1:raw/*type: bytes*/})",
          "document": "把一个数据包转变成可用的 HTTP Response 对象",
          "definitionStr": "func poc.ParseBytesToHTTPResponse(raw: bytes) return (rsp: *http.Response, r1: error)"
        },
        {
          "functionName": "ParseBytesToHTTPRequest(${1:requestRaw/*type: bytes*/})",
          "document": "把一个原始数据包 bytes 转变成 HTTP 请求",
          "definitionStr": "func poc.ParseBytesToHTTPRequest(requestRaw: bytes) return (req: *http.Request, err: error)"
        },
        {
          "functionName": "HTTPPacketForceChunked(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.HTTPPacketForceChunked(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "HTTP(${1:packet/*type: any*/}, ${2:extraParams/*type ...yaklib.pocConfig*/})",
          "document": "直接使用一个数据包，发送 HTTP 请求",
          "definitionStr": "func poc.HTTP(packet: any, extraParams ...yaklib.pocConfig) return (responsePacket: bytes, requestPacket: bytes, err: error)"
        },
        {
          "functionName": "FixHTTPResponse(${1:v1/*type: bytes*/})",
          "document": "修复可能有问题的 http response 数据包",
          "definitionStr": "func poc.FixHTTPResponse(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "FixHTTPRequest(${1:v1/*type: bytes*/})",
          "document": "修复可能有问题的 http request 数据包",
          "definitionStr": "func poc.FixHTTPRequest(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "FixHTTPPacketCRLF(${1:v1/*type: bytes*/}, ${2:v2/*type: bool*/})",
          "document": "",
          "definitionStr": "func poc.FixHTTPPacketCRLF(v1: bytes, v2: bool) return (r0: bytes)"
        }
      ]
    },
    {
      "libName": "ping",
      "prefix": "ping.",
      "functions": [
        {
          "functionName": "timeout(${1:seconds/*type: float64*/})",
          "document": "设置 ping 超时",
          "definitionStr": "func ping.timeout(seconds: float64) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "tcpPingPorts(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func ping.tcpPingPorts(v1: string) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "skip(${1:v1/*type: bool*/})",
          "document": "跳过存活检查，默认均为存活",
          "definitionStr": "func ping.skip(v1: bool) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "scanCClass(${1:v1/*type: bool*/})",
          "document": "直接 ping 整个 C 段",
          "definitionStr": "func ping.scanCClass(v1: bool) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "为 TCP Ping 增加代理",
          "definitionStr": "func ping.proxy(v1 ...string) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "dnsTimeout(${1:v1/*type: float64*/})",
          "document": "设置 DNS 超时时间",
          "definitionStr": "func ping.dnsTimeout(v1: float64) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "dnsServers(${1:v1/*type ...string*/})",
          "document": "设置 DNS 服务器",
          "definitionStr": "func ping.dnsServers(v1 ...string) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "设置 Ping 扫的并发",
          "definitionStr": "func ping.concurrent(v1: int) return (r0: func _pingConfigOpt(v1: *yaklib._pingConfig) )"
        },
        {
          "functionName": "Scan(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._pingConfigOpt*/})",
          "document": "ping 扫描",
          "definitionStr": "func ping.Scan(v1: string, v2 ...yaklib._pingConfigOpt) return (r0: chan *pingutil.PingResult)"
        },
        {
          "functionName": "Ping(${1:target/*type: string*/}, ${2:opts/*type ...yaklib._pingConfigOpt*/})",
          "document": "原生 ICMP ping",
          "definitionStr": "func ping.Ping(target: string, opts ...yaklib._pingConfigOpt) return (r0: *pingutil.PingResult)"
        }
      ]
    },
    {
      "libName": "os",
      "prefix": "os.",
      "functions": [
        {
          "functionName": "Unsetenv(${1:key/*type: string*/})",
          "document": "清除环境变量",
          "definitionStr": "func os.Unsetenv(key: string) return (r0: error)"
        },
        {
          "functionName": "Setenv(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置环境变量",
          "definitionStr": "func os.Setenv(key: string, value: string) return (r0: error)"
        },
        {
          "functionName": "Rename(${1:oldFile/*type: string*/}, ${2:newFile/*type: string*/})",
          "document": "重命名一个文件：同 Golang `os.Rename`",
          "definitionStr": "func os.Rename(oldFile: string, newFile: string) return (r0: error)"
        },
        {
          "functionName": "RemoveAll(${1:fileName/*type: string*/})",
          "document": "移除一个文件（强制）",
          "definitionStr": "func os.RemoveAll(fileName: string) return (r0: error)"
        },
        {
          "functionName": "Remove(${1:fileName/*type: string*/})",
          "document": "移除一个文件",
          "definitionStr": "func os.Remove(fileName: string) return (r0: error)"
        },
        {
          "functionName": "Pipe()",
          "document": "返回文件管道，两个结果互通，均可互相读写",
          "definitionStr": "func os.Pipe() return (file1: *os.File, file2: *os.File, r2: error)"
        },
        {
          "functionName": "LookupEnv(${1:envName/*type: string*/})",
          "document": "判断这个环境变量是否存在，如果存在，返回环境变量的值，不存在设置 ok 为 false",
          "definitionStr": "func os.LookupEnv(envName: string) return (value: string, ok: bool)"
        },
        {
          "functionName": "IsUDPPortOpen(${1:port/*type: int*/})",
          "document": "判断一个本地 UDP 端口是否开放",
          "definitionStr": "func os.IsUDPPortOpen(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsUDPPortAvailable(${1:port/*type: int*/})",
          "document": "判断一个本地 UDP 端口是否可用",
          "definitionStr": "func os.IsUDPPortAvailable(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsTCPPortOpen(${1:port/*type: int*/})",
          "document": "判断一个本地端口是否开放",
          "definitionStr": "func os.IsTCPPortOpen(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsTCPPortAvailable(${1:port/*type: int*/})",
          "document": "判断一个本地 TCP 端口是否可用（监听可用）",
          "definitionStr": "func os.IsTCPPortAvailable(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsRemoteTCPPortOpen(${1:host/*type: string*/}, ${2:port/*type: int*/})",
          "document": "判断一个远程 TCP 端口是否开放",
          "definitionStr": "func os.IsRemoteTCPPortOpen(host: string, port: int) return (r0: bool)"
        },
        {
          "functionName": "Getenv(${1:envName/*type: string*/})",
          "document": "获得一个环境变量的值",
          "definitionStr": "func os.Getenv(envName: string) return (value: string)"
        },
        {
          "functionName": "GetRandomAvailableUDPPort()",
          "document": "随机获得一个可用的 UDP 端口",
          "definitionStr": "func os.GetRandomAvailableUDPPort() return (port: int)"
        },
        {
          "functionName": "GetRandomAvailableTCPPort()",
          "document": "随机获得一个可用的 TCP 端口",
          "definitionStr": "func os.GetRandomAvailableTCPPort() return (port: int)"
        },
        {
          "functionName": "ExpandEnv(${1:targetWithEnv/*type: string*/})",
          "document": "同 Golang 的 `os.ExpandEnv`：根据当前环境变量的值来替换字符串中的${var}或者$var",
          "definitionStr": "func os.ExpandEnv(targetWithEnv: string) return (r0: string)"
        },
        {
          "functionName": "Exit(${1:exitCode/*type: int*/})",
          "document": "退出主程序，手动结束当前进程",
          "definitionStr": "`func os.Exit(exitCode: int)`"
        },
        {
          "functionName": "Executable()",
          "document": "获取当前正在执行的二进制程序的路径",
          "definitionStr": "func os.Executable() return (path: string, r1: error)"
        },
        {
          "functionName": "Environ()",
          "document": "获取当前所有的环境变量内容",
          "definitionStr": "func os.Environ() return (r0: []string)"
        },
        {
          "functionName": "Clearenv()",
          "document": "清除环境变量，与原生 Golang `go.Clearenv` 相同",
          "definitionStr": "`func os.Clearenv()`"
        }
      ]
    },
    {
      "libName": "nuclei",
      "prefix": "nuclei.",
      "functions": [
        {
          "functionName": "workflows(${1:v1/*type ...string*/})",
          "document": "【参数】使用 templates 中的特定 workflow 来扫描",
          "definitionStr": "func nuclei.workflows(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "version(${1:v1/*type: bool*/})",
          "document": "【参数】展示版本信息",
          "definitionStr": "func nuclei.version(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "verbose(${1:v1/*type: bool*/})",
          "document": "【参数】设置输出更多的调试信息",
          "definitionStr": "func nuclei.verbose(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "updateTemplates(${1:v1/*type: bool*/})",
          "document": "【参数】更新 nuclei template",
          "definitionStr": "func nuclei.updateTemplates(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "timeout(${1:v1/*type: int*/})",
          "document": "【参数】设置超时时间",
          "definitionStr": "func nuclei.timeout(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templatesVersion(${1:v1/*type: bool*/})",
          "document": "【参数】展示 templates 的版本",
          "definitionStr": "func nuclei.templatesVersion(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templatesThreads(${1:threadSize/*type: int*/})",
          "document": "【参数】设置 templates 的线程",
          "definitionStr": "func nuclei.templatesThreads(threadSize: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templatesDir(${1:v1/*type: string*/})",
          "document": "【参数】设置存放 templates 的目录",
          "definitionStr": "func nuclei.templatesDir(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templates(${1:v1/*type ...string*/})",
          "document": "【参数】设置想要扫描的 templates 或者存放 templates 的目录",
          "definitionStr": "func nuclei.templates(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templateList(${1:v1/*type: bool*/})",
          "document": "【参数】展示所有的 templates",
          "definitionStr": "func nuclei.templateList(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "tags(${1:v1/*type ...string*/})",
          "document": "【参数】扫描特定 nuclei templates，通过 tags 筛选",
          "definitionStr": "func nuclei.tags(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "systemDnsResolver(${1:v1/*type: bool*/})",
          "document": "【参数】使用系统 DNS",
          "definitionStr": "func nuclei.systemDnsResolver(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "stopAtFirstMatch(${1:v1/*type: bool*/})",
          "document": "【参数】第一次检测出结果就马上停止",
          "definitionStr": "func nuclei.stopAtFirstMatch(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "silent(${1:v1/*type: bool*/})",
          "document": "【参数】尽量少的输出结果，只展示成功的结果",
          "definitionStr": "func nuclei.silent(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "showBrowser(${1:v1/*type: bool*/})",
          "document": "【参数】展示浏览器",
          "definitionStr": "func nuclei.showBrowser(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "severity(${1:level/*type ...string*/})",
          "document": "【参数】设置扫描级别（middle/high/critical/low），筛选 nuclei templates",
          "definitionStr": "func nuclei.severity(level ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "reverseUrl(${1:v1/*type: string*/})",
          "document": "反连 URL",
          "definitionStr": "func nuclei.reverseUrl(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "retry(${1:v1/*type: int*/})",
          "document": "【参数】设置重试次数",
          "definitionStr": "func nuclei.retry(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "reportingDB(${1:v1/*type: string*/})",
          "document": "【参数】报告数据库",
          "definitionStr": "func nuclei.reportingDB(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "reportingConfig(${1:v1/*type: string*/})",
          "document": "【参数】配置报告",
          "definitionStr": "func nuclei.reportingConfig(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "rateLimit(${1:v1/*type: int*/})",
          "document": "【参数】限制每秒最大请求（150默认）",
          "definitionStr": "func nuclei.rateLimit(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "proxy(${1:proxies/*type ...string*/})",
          "document": "为 nuclei 设置代理",
          "definitionStr": "func nuclei.proxy(proxies ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "project(${1:v1/*type: bool*/})",
          "document": "【参数】避免发送相同请求，声明当前是同一个项目",
          "definitionStr": "func nuclei.project(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "pageTimeout(${1:v1/*type: int*/})",
          "document": "【参数】页超时时间",
          "definitionStr": "func nuclei.pageTimeout(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "output(${1:v1/*type: string*/})",
          "document": "【参数】设置最终结果输出到的文件",
          "definitionStr": "func nuclei.output(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "noMeta(${1:v1/*type: bool*/})",
          "document": "【参数】不显示匹配的元数据",
          "definitionStr": "func nuclei.noMeta(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "noInteractsh(${1:v1/*type: bool*/})",
          "document": "【参数】不要交互式 Shell",
          "definitionStr": "func nuclei.noInteractsh(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "noColor(${1:v1/*type: bool*/})",
          "document": "【参数】输入不带颜色",
          "definitionStr": "func nuclei.noColor(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "newTemplates(${1:v1/*type: bool*/})",
          "document": "【参数】表明当前进行新模版的编写模式",
          "definitionStr": "func nuclei.newTemplates(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "metrics(${1:v1/*type: bool*/})",
          "document": "【参数】打印统计信息",
          "definitionStr": "func nuclei.metrics(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "logFile(${1:v1/*type: string*/})",
          "document": "【参数】设置日志文件",
          "definitionStr": "func nuclei.logFile(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "headless(${1:v1/*type: bool*/})",
          "document": "【参数】启动浏览器无界面模式",
          "definitionStr": "func nuclei.headless(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "headers(${1:v1/*type ...string*/})",
          "document": "【参数】设置特定 Headers（x-bug-bounty:hacker）",
          "definitionStr": "func nuclei.headers(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "excludeTemplates(${1:v1/*type ...string*/})",
          "document": "【参数】排除 Nuclei 模版中特定模版",
          "definitionStr": "func nuclei.excludeTemplates(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "excludeTags(${1:v1/*type ...string*/})",
          "document": "【参数】排除 nuclei 扫描模版中的 Tag",
          "definitionStr": "func nuclei.excludeTags(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "dnsResolver(${1:v1/*type ...string*/})",
          "document": "【参数】设置 DNS 解析服务器",
          "definitionStr": "func nuclei.dnsResolver(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "debugResponse(${1:v1/*type: bool*/})",
          "document": "【参数】调试响应信息",
          "definitionStr": "func nuclei.debugResponse(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "debugRequest(${1:v1/*type: bool*/})",
          "document": "【参数】打印所有发出的请求，调试",
          "definitionStr": "func nuclei.debugRequest(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "【参数】调试模式，打印更多的调试信息",
          "definitionStr": "func nuclei.debug(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "bulkSize(${1:size/*type: int*/})",
          "document": "【参数】同 nuclei 每个模板最大并行的主机数(默认25)",
          "definitionStr": "func nuclei.bulkSize(size: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "UpdatePoC()",
          "document": "更新 PoC",
          "definitionStr": "func nuclei.UpdatePoC() return (r0: error)"
        },
        {
<<<<<<< HEAD
          "functionName": "UpdateDatabase(${1:localPath/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.UpdateDatabase(localPath ...string) return (r0: error)"
=======
          "functionName": "UpdateDatabase()",
          "document": "自动更新 nuclei 数据库",
          "definitionStr": "func nuclei.UpdateDatabase() return (r0: error)"
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
        },
        {
          "functionName": "ScanWithContext(${1:ctx/*type: context.Context*/}, ${2:targets/*type: string*/}, ${3:opts/*type ...tools.nucleiOpt*/})",
          "document": "带上下文进行扫描，通过上下文控制通断",
          "definitionStr": "func nuclei.ScanWithContext(ctx: context.Context, targets: string, opts ...tools.nucleiOpt) return (r0: chan *tools.PocVul, r1: error)"
        },
        {
          "functionName": "Scan(${1:targets/*type: string*/}, ${2:nucleiParams/*type ...params*/})",
          "document": "nuclei 核心函数，v1 为扫描目标，输入网段/IP/域名/URL 都可以，会被自动解析为 URL（可能会自动补充 www.）",
          "definitionStr": "func nuclei.Scan(targets: string, nucleiParams ...params) return (pocChannel: chan *tools.PocVul, r1: error)"
        },
        {
          "functionName": "RemoveDatabase()",
          "document": "移除 nuclei 数据库",
          "definitionStr": "func nuclei.RemoveDatabase() return (r0: error)"
        },
        {
<<<<<<< HEAD
          "functionName": "PullDatabase(${1:gitUrl/*type: string*/}, ${2:proxies/*type ...string*/})",
          "document": "拉去数据库",
          "definitionStr": "func nuclei.PullDatabase(gitUrl: string, proxies ...string) return (r0: string, r1: error)"
        },
        {
          "functionName": "AllPoC(${1:v1/*type ...string*/})",
          "document": "获取当前所有 PoC 对象",
          "definitionStr": "func nuclei.AllPoC(v1 ...string) return (r0: []*tools.templateDesc, r1: error)"
=======
          "functionName": "AllPoC()",
          "document": "获取当前所有可用 PoC",
          "definitionStr": "func nuclei.AllPoC() return (r0: []*tools.templateDesc, error: error)"
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
        }
      ]
    },
    {
      "libName": "mmdb",
      "prefix": "mmdb.",
      "functions": [
        {
          "functionName": "QueryIPCity(${1:v1/*type: *maxminddb.Reader*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func mmdb.QueryIPCity(v1: *maxminddb.Reader, v2: string) return (r0: *geo.City, r1: error)"
        },
        {
          "functionName": "Open(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func mmdb.Open(v1: string) return (r0: *maxminddb.Reader, r1: error)"
        }
      ]
    },
    {
      "libName": "mitm",
      "prefix": "mitm.",
      "functions": [
        {
          "functionName": "useDefaultCA(${1:v1/*type: bool*/})",
          "document": "设置是否使用默认CA，如果使用了默认CA会在当前目录自动生成一套CA证书和Key",
          "definitionStr": "func mitm.useDefaultCA(v1: bool) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "rootCA(${1:caCert/*type: bytes*/}, ${2:key/*type: bytes*/})",
          "document": "设置中间人根 CA 证书（可以用 `tls` 工具包生成）",
          "definitionStr": "func mitm.rootCA(caCert: bytes, key: bytes) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "maxContentLength(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func mitm.maxContentLength(v1: int) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "isTransparent(${1:v1/*type: bool*/})",
          "document": "设置启动一个透明 mitm 劫持接口！",
          "definitionStr": "func mitm.isTransparent(v1: bool) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "host(${1:v1/*type: string*/})",
          "document": "【参数】设置中间人代理/服务器的监听主机端口",
          "definitionStr": "func mitm.host(v1: string) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "context(${1:v1/*type: context.Context*/})",
          "document": "【参数】设置中间人的 context，用来控制生命周期",
          "definitionStr": "func mitm.context(v1: context.Context) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "callback(${1:v1/*type: func(isHttps, url, req: *http.Request, rsp: *http.Resposne)*/})",
          "document": "",
          "definitionStr": "func mitm.callback(v1: func(isHttps, url, req: *http.Request, rsp: *http.Resposne)) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "Start(${1:port/*type: int*/}, ${2:params/*type ...opt*/})",
          "document": "启动一个中间人代理",
          "definitionStr": "func mitm.Start(port: int, params ...opt) return (r0: error)"
        },
        {
          "functionName": "Bridge(${1:listenedPort/*type: any*/}, ${2:nextProxy/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "桥接模式中间人",
          "definitionStr": "func mitm.Bridge(listenedPort: any, nextProxy: string, params ...opt) return (r0: error)"
        }
      ]
    },
    {
      "libName": "log",
      "prefix": "log.",
      "functions": [
        {
          "functionName": "warn(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志信息【警告级别】",
          "definitionStr": "`func log.warn(fmt: string, items ...any)`"
        },
        {
          "functionName": "setLevel(${1:level/*type: any*/})",
          "document": "设置当前脚本的日志级别",
          "definitionStr": "`func log.setLevel(level: any)`"
        },
        {
          "functionName": "info(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志【信息】",
          "definitionStr": "`func log.info(fmt: string, items ...any)`"
        },
        {
          "functionName": "error(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志错误信息",
          "definitionStr": "`func log.error(fmt: string, items ...any)`"
        },
        {
          "functionName": "debug(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志调试信息",
          "definitionStr": "`func log.debug(fmt: string, items ...any)`"
        }
      ]
    },
    {
      "libName": "jwt",
      "prefix": "jwt.",
      "functions": [
        {
          "functionName": "RemoveAlg(${1:token/*type: string*/})",
          "document": "把一个 JWT 的 Token 移除加密算法部分",
          "definitionStr": "func jwt.RemoveAlg(token: string) return (newToken: string, err: error)"
        },
        {
          "functionName": "Parse(${1:token/*type: string*/}, ${2:secretKeys/*type ...string*/})",
          "document": "解析 JWT 的 Token，使用默认弱口令，如果需要自定义 secretKey，可以在 v2 不定长参数中设置",
          "definitionStr": "func jwt.Parse(token: string, secretKeys ...string) return (params: *jwt.Token, secretKey: bytes, err: error)"
        },
        {
          "functionName": "JWTGenerate(${1:alg/*type: string*/}, ${2:params/*type: any*/}, ${3:secretKey/*type: bytes*/})",
          "document": "生成 JWT Token",
          "definitionStr": "func jwt.JWTGenerate(alg: string, params: any, secretKey: bytes) return (token: string, err: error)"
        },
        {
          "functionName": "JWSGenerate(${1:algName/*type: string*/}, ${2:params/*type: any*/}, ${3:secretKey/*type: bytes*/})",
          "document": "生成一个 JWS 的 Token",
          "definitionStr": "func jwt.JWSGenerate(algName: string, params: any, secretKey: bytes) return (r0: string, r1: error)"
        },
        {
          "functionName": "AllAlgs()",
          "document": "返回所有当前支持的 JWT 签名算法",
          "definitionStr": "func jwt.AllAlgs() return (r0: []string)"
        }
      ]
    },
    {
      "libName": "judge",
      "prefix": "judge.",
      "functions": [
        {
          "functionName": "NewDiscriminator(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func judge.NewDiscriminator(v1: bytes) return (r0: *comparer.Discriminator)"
        },
        {
          "functionName": "CompareRaw(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func judge.CompareRaw(v1: bytes, v2: bytes) return (r0: float64)"
        },
        {
          "functionName": "CompareHTTPResponse(${1:v1/*type: *http.Response*/}, ${2:v2/*type: *http.Response*/})",
          "document": "",
          "definitionStr": "func judge.CompareHTTPResponse(v1: *http.Response, v2: *http.Response) return (r0: float64)"
        }
      ]
    },
    {
      "libName": "json",
      "prefix": "json.",
      "functions": [
        {
          "functionName": "loads(${1:v1/*type: string|[]byte*/})",
          "document": "把一个JSON字符串解析成Yak对象，要注意参数支持 string 或 bytes",
          "definitionStr": "func json.loads(v1: string|[]byte) return (r0: any)"
        },
        {
          "functionName": "dumps(${1:v1/*type: any*/})",
          "document": "把一个任何Yak/Golang对象解析为 string",
          "definitionStr": "func json.dumps(v1: any) return (r0: string)"
        },
        {
          "functionName": "New(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func json.New(v1: any) return (r0: *yaklib.yakJson, r1: error)"
        },
        {
          "functionName": "Marshal(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func json.Marshal(v1: any) return (r0: bytes, r1: error)"
        }
      ]
    },
    {
      "libName": "js",
      "prefix": "js.",
      "functions": [
        {
          "functionName": "UndefinedValue()",
          "document": "",
          "definitionStr": "func js.UndefinedValue() return (r0: otto.Value)"
        },
        {
          "functionName": "TrueValue()",
          "document": "",
          "definitionStr": "func js.TrueValue() return (r0: otto.Value)"
        },
        {
          "functionName": "ToValue(${1:v1/*type: any*/})",
          "document": "把 Golang/Yak 对象转变为 otto.Value 对象",
          "definitionStr": "func js.ToValue(v1: any) return (r0: otto.Value, r1: error)"
        },
        {
          "functionName": "Run(${1:v1/*type: any*/})",
          "document": "执行一段 JS 代码，返回上下文以及代码的执行结果",
          "definitionStr": "func js.Run(v1: any) return (r0: *otto.Otto, r1: otto.Value, r2: error)"
        },
        {
          "functionName": "NullValue()",
          "document": "返回 JS 的 NULL 对象",
          "definitionStr": "func js.NullValue() return (r0: otto.Value)"
        },
        {
          "functionName": "New()",
          "document": "新创建一个 JS 执行上下文",
          "definitionStr": "func js.New() return (r0: *otto.Otto)"
        },
        {
          "functionName": "NaNValue()",
          "document": "",
          "definitionStr": "func js.NaNValue() return (r0: otto.Value)"
        },
        {
          "functionName": "FalseValue()",
          "document": "返回 JS 的 False 对象",
          "definitionStr": "func js.FalseValue() return (r0: otto.Value)"
        },
        {
          "functionName": "CallFunctionFromCode(${1:code/*type: any*/}, ${2:funcName/*type: string*/}, ${3:params/*type ...any*/})",
          "document": "从一段代码中调用某个函数",
          "definitionStr": "func js.CallFunctionFromCode(code: any, funcName: string, params ...any) return (ottoValue: otto.Value, r1: error)"
        }
      ]
    },
    {
      "libName": "java",
      "prefix": "java.",
      "functions": [
        {
          "functionName": "ToJson(${1:v1/*type: any*/})",
          "document": "把 Java 对象转变为 JSON",
          "definitionStr": "func java.ToJson(v1: any) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "ParseJavaObjectStream(${1:raw/*type: bytes*/})",
          "document": "把 bytes 转变为 Java 对象",
          "definitionStr": "func java.ParseJavaObjectStream(raw: bytes) return (obj: []yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "ParseHexJavaObjectStream(${1:hexStream/*type: string*/})",
          "document": "把 HEX 流(aced0005...)转变为对象",
          "definitionStr": "func java.ParseHexJavaObjectStream(hexStream: string) return (objs: []yserx.JavaSerializable, r1: error)"
        },
        {
          "functionName": "NewJavaString(${1:data/*type: string*/})",
          "document": "创建一个 TC_STRING (4byte length)",
          "definitionStr": "func java.NewJavaString(data: string) return (r0: *yserx.JavaString)"
        },
        {
          "functionName": "NewJavaReference(${1:handle/*type: uint64*/})",
          "document": "根据 Handle 创建一个 TC_REFERENCE",
          "definitionStr": "func java.NewJavaReference(handle: uint64) return (r0: *yserx.JavaReference)"
        },
        {
          "functionName": "NewJavaObject(${1:desc/*type: *yserx.JavaClassDesc*/}, ${2:classDataArr/*type ...*yserx.JavaClassData*/})",
          "document": "创建一个 Java TC_OBJECT",
          "definitionStr": "func java.NewJavaObject(desc: *yserx.JavaClassDesc, classDataArr ...*yserx.JavaClassData) return (TC_OBJECT: *yserx.JavaObject)"
        },
        {
          "functionName": "NewJavaNull()",
          "document": "创建一个 TC_NULL",
          "definitionStr": "func java.NewJavaNull() return (r0: *yserx.JavaNull)"
        },
        {
          "functionName": "NewJavaLongString(${1:data/*type: string*/})",
          "document": "创建一个 Long String(8byte length)",
          "definitionStr": "func java.NewJavaLongString(data: string) return (r0: *yserx.JavaString)"
        },
        {
          "functionName": "NewJavaFieldValue(${1:typeFlag/*type: byte*/}, ${2:raw/*type: bytes*/})",
          "document": "根据类型，和 bytes 创建一个字段值",
          "definitionStr": "func java.NewJavaFieldValue(typeFlag: byte, raw: bytes) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldShortValue(${1:data/*type: int*/})",
          "document": "创建一个 short 作为字段值",
          "definitionStr": "func java.NewJavaFieldShortValue(data: int) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldObjectValue(${1:obj/*type: yserx.JavaSerializable*/})",
          "document": "创建一个 TC_OBJECT 作为字段值",
          "definitionStr": "func java.NewJavaFieldObjectValue(obj: yserx.JavaSerializable) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldLongValue(${1:data/*type: uint64*/})",
          "document": "创建一个 Long 作为字段值(uint64)",
          "definitionStr": "func java.NewJavaFieldLongValue(data: uint64) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldIntValue(${1:data/*type: uint64*/})",
          "document": "创建一个整数作为字段值",
          "definitionStr": "func java.NewJavaFieldIntValue(data: uint64) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldFloatValue(${1:data/*type: float32*/})",
          "document": "创建一个 float32 作为字段值",
          "definitionStr": "func java.NewJavaFieldFloatValue(data: float32) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldDoubleValue(${1:data/*type: float64*/})",
          "document": "创建一个 float64 作为字段值",
          "definitionStr": "func java.NewJavaFieldDoubleValue(data: float64) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldCharValue(${1:data/*type: int*/})",
          "document": "创建一个 Char 作为字段值",
          "definitionStr": "func java.NewJavaFieldCharValue(data: int) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldByteValue(${1:data/*type: byte*/})",
          "document": "创建一个 Byte 的字段值",
          "definitionStr": "func java.NewJavaFieldByteValue(data: byte) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldBoolValue(${1:result/*type: bool*/})",
          "document": "创建一个布尔值作为 Java 字段值",
          "definitionStr": "func java.NewJavaFieldBoolValue(result: bool) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaFieldArrayValue(${1:element/*type: yserx.JavaSerializable*/})",
          "document": "创建一个 X_FIELDVALUE",
          "definitionStr": "func java.NewJavaFieldArrayValue(element: yserx.JavaSerializable) return (r0: *yserx.JavaFieldValue)"
        },
        {
          "functionName": "NewJavaEnum(${1:desc/*type: *yserx.JavaClassDesc*/}, ${2:constantName/*type: *yserx.JavaString*/})",
          "document": "创建一个 TC_ENUM",
          "definitionStr": "func java.NewJavaEnum(desc: *yserx.JavaClassDesc, constantName: *yserx.JavaString) return (TC_ENUM: *yserx.JavaEnumDesc)"
        },
        {
          "functionName": "NewJavaEndBlockData()",
          "document": "创建一个块数据结束符（TC_ENDBLOCKDATA）",
          "definitionStr": "func java.NewJavaEndBlockData() return (r0: *yserx.JavaEndBlockData)"
        },
        {
          "functionName": "NewJavaClassFields(${1:fields/*type ...*yserx.JavaClassField*/})",
          "document": "创建参数组 X_CLASSFIELDS",
          "definitionStr": "func java.NewJavaClassFields(fields ...*yserx.JavaClassField) return (r0: *yserx.JavaClassFields)"
        },
        {
          "functionName": "NewJavaClassField(${1:fieldName/*type: string*/}, ${2:fieldType/*type: byte*/}, ${3:fieldObject/*type: yserx.JavaSerializable*/})",
          "document": "创建一个类参数结构 X_CLASSFIELD",
          "definitionStr": "func java.NewJavaClassField(fieldName: string, fieldType: byte, fieldObject: yserx.JavaSerializable) return (r0: *yserx.JavaClassField)"
        },
        {
          "functionName": "NewJavaClassDetails(${1:className/*type: string*/}, ${2:serialId/*type: bytes*/}, ${3:flag/*type: byte*/}, ${4:fields/*type: *yserx.JavaClassFields*/}, ${5:annotations/*type: []yserx.JavaSerializable*/}, ${6:superClass/*type: *yserx.JavaClassDetails*/})",
          "document": "创建一个 X_CLASSDETAILS",
          "definitionStr": "func java.NewJavaClassDetails(className: string, serialId: bytes, flag: byte, fields: *yserx.JavaClassFields, annotations: []yserx.JavaSerializable, superClass: *yserx.JavaClassDetails) return (X_CLASSDETAILS: *yserx.JavaClassDetails)"
        },
        {
          "functionName": "NewJavaClassDesc(${1:className/*type: string*/}, ${2:serialId/*type: bytes*/}, ${3:flag/*type: byte*/}, ${4:X_FIELDS/*type: *yserx.JavaClassFields*/}, ${5:annotations/*type: []yserx.JavaSerializable*/}, ${6:superClass/*type: *yserx.JavaClassDetails*/})",
          "document": "创建一个 TC_CLASSDESC",
          "definitionStr": "func java.NewJavaClassDesc(className: string, serialId: bytes, flag: byte, X_FIELDS: *yserx.JavaClassFields, annotations: []yserx.JavaSerializable, superClass: *yserx.JavaClassDetails) return (TC_CLASSDESC: *yserx.JavaClassDesc)"
        },
        {
          "functionName": "NewJavaClassData(${1:fields/*type: []yserx.JavaSerializable*/}, ${2:blockdatas/*type: []yserx.JavaSerializable*/})",
          "document": "创建一个 CLASSDATA 块",
          "definitionStr": "func java.NewJavaClassData(fields: []yserx.JavaSerializable, blockdatas: []yserx.JavaSerializable) return (X_CLASSDATA: *yserx.JavaClassData)"
        },
        {
          "functionName": "NewJavaClass(${1:tcClassDesc/*type: *yserx.JavaClassDesc*/})",
          "document": "创建一个 JavaClass TC_CLASS",
          "definitionStr": "func java.NewJavaClass(tcClassDesc: *yserx.JavaClassDesc) return (TC_CLASS: *yserx.JavaClass)"
        },
        {
          "functionName": "NewJavaBlockDataBytes(${1:data/*type: bytes*/})",
          "document": "创建一个 Java TC_BLOCKDATA (bytes)",
          "definitionStr": "func java.NewJavaBlockDataBytes(data: bytes) return (TC_BLOCKDATA: *yserx.JavaBlockData)"
        },
        {
          "functionName": "NewJavaArray(${1:classDesc/*type: *yserx.JavaClassDesc*/}, ${2:fields/*type ...*yserx.JavaFieldValue*/})",
          "document": "创建一个 JAVA TC_ARRAY",
          "definitionStr": "func java.NewJavaArray(classDesc: *yserx.JavaClassDesc, fields ...*yserx.JavaFieldValue) return (TC_ARRAY: *yserx.JavaArray)"
        },
        {
          "functionName": "MarshalJavaObjects(${1:v1/*type ...yserx.JavaSerializable*/})",
          "document": "序列化 Java 对象",
          "definitionStr": "func java.MarshalJavaObjects(v1 ...yserx.JavaSerializable) return (r0: bytes)"
        },
        {
          "functionName": "FromJson(${1:bytes/*type: bytes*/})",
          "document": "把 JSON 转变为 Java 对象",
          "definitionStr": "func java.FromJson(bytes: bytes) return (tcObjects: []yserx.JavaSerializable, r1: error)"
        }
      ]
    },
    {
      "libName": "io",
      "prefix": "io.",
      "functions": [
        {
          "functionName": "WriteString(${1:writer/*type: io.Writer*/}, ${2:content/*type: string*/})",
          "document": "把一个 string 写到 writer 中",
          "definitionStr": "func io.WriteString(writer: io.Writer, content: string) return (r0: int, r1: error)"
        },
        {
          "functionName": "TeeReader(${1:srcReader/*type: io.Reader*/}, ${2:teeWriter/*type: io.Writer*/})",
          "document": "reader 分流，把 srcReader 读出来的内容会同步写到 teeWriter，通过返回值的 reader 来驱动",
          "definitionStr": "func io.TeeReader(srcReader: io.Reader, teeWriter: io.Writer) return (r0: io.Reader)"
        },
        {
          "functionName": "ReadStable(${1:v1/*type: net.Conn*/}, ${2:v2/*type: float64*/})",
          "document": "增加一个【稳定即可】的 Reader",
          "definitionStr": "func io.ReadStable(v1: net.Conn, v2: float64) return (r0: bytes)"
        },
        {
          "functionName": "ReadFile(${1:fileName/*type: string*/})",
          "document": "把一个文件中的内容全部读出来",
          "definitionStr": "func io.ReadFile(fileName: string) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "ReadEvery1s(${1:ctx/*type: context.Context*/}, ${2:reader/*type: io.Reader*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "使用一个 ctx 控制生命周期，每隔一秒钟读一次 Reader，每隔一秒钟执行一次回调函数，回调函数如果返回 false，则立即停止读取",
          "definitionStr": "`func io.ReadEvery1s(ctx: context.Context, reader: io.Reader, callback: func (v1: bytes) return(bool) )`"
        },
        {
          "functionName": "ReadAll(${1:reader/*type: io.Reader*/})",
          "document": "把一个 reader 中的内容全部读出来",
          "definitionStr": "func io.ReadAll(reader: io.Reader) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Pipe()",
          "document": "创建一个 io 管道",
          "definitionStr": "func io.Pipe() return (reader: *io.PipeReader, writer: *io.PipeWriter)"
        },
        {
          "functionName": "NopCloser(${1:reader/*type: io.Reader*/})",
          "document": "把一个 io.Reader 包装成 io.ReadCloser，遇到 Nop/EOF 即关闭",
          "definitionStr": "func io.NopCloser(reader: io.Reader) return (r0: io.ReadCloser)"
        },
        {
          "functionName": "MultiReader(${1:readers/*type ...io.Reader*/})",
          "document": "把多个 Reader 合并成一个",
          "definitionStr": "func io.MultiReader(readers ...io.Reader) return (r0: io.Reader)"
        },
        {
          "functionName": "LimitReader(${1:srcReader/*type: io.Reader*/}, ${2:length/*type: int64*/})",
          "document": "创建一个新的 `io.Reader` 这个 Reader 只读固定长度",
          "definitionStr": "func io.LimitReader(srcReader: io.Reader, length: int64) return (r0: io.Reader)"
        },
        {
          "functionName": "CopyN(${1:dstWriter/*type: io.Writer*/}, ${2:srcReader/*type: io.Reader*/}, ${3:copyLen/*type: int64*/})",
          "document": "从 srcReader 中复制固定长度的字节到 dstWriter",
          "definitionStr": "func io.CopyN(dstWriter: io.Writer, srcReader: io.Reader, copyLen: int64) return (r0: int64, r1: error)"
        },
        {
          "functionName": "Copy(${1:dstWriter/*type: io.Writer*/}, ${2:srcReader/*type: io.Reader*/})",
          "document": "把一个 `io.Reader` 中的内容对接到 `io.Writer` 中",
          "definitionStr": "func io.Copy(dstWriter: io.Writer, srcReader: io.Reader) return (r0: int64, r1: error)"
        }
      ]
    },
    {
      "libName": "httpserver",
      "prefix": "httpserver.",
      "functions": [
        {
          "functionName": "tlsCertAndKey(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【参数】设置 TLS/SSL，启动一个 HTTPS 服务器",
          "definitionStr": "func httpserver.tlsCertAndKey(cert: any, key: any, caCerts ...any) return (r0: func _httpServerConfigOpt(v1: *yaklib._httpServerConfig) )"
        },
        {
          "functionName": "handler(${1:handler/*type: func (v1: http.ResponseWriter, v2: *http.Request) */})",
          "document": "",
          "definitionStr": "func httpserver.handler(handler: func (v1: http.ResponseWriter, v2: *http.Request) ) return (r0: opt)"
        },
        {
          "functionName": "context(${1:ctx/*type: context.Context*/})",
          "document": "【参数】为 HTTP Server 增加上下文控制生命周期",
          "definitionStr": "func httpserver.context(ctx: context.Context) return (r0: opt)"
        },
        {
          "functionName": "Serve(${1:host/*type: string*/}, ${2:port/*type: int*/}, ${3:params/*type ...opt*/})",
          "document": "启动一个 HTTP 服务器",
          "definitionStr": "func httpserver.Serve(host: string, port: int, params ...opt) return (r0: error)"
        }
      ]
    },
    {
      "libName": "httpool",
      "prefix": "httpool.",
      "functions": [
        {
          "functionName": "size(${1:bodySize/*type: int*/})",
          "document": "【参数】设置每个请求的 body 的最大大小",
          "definitionStr": "func httpool.size(bodySize: int) return (r0: opt)"
        },
        {
          "functionName": "redirectTimes(${1:count/*type: int*/})",
          "document": "限制重定向次数",
          "definitionStr": "func httpool.redirectTimes(count: int) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "rawMode(${1:v1/*type: bool*/})",
          "document": "rawMode 模式意味着直接发送包，尽量少的去改动数据包内容",
          "definitionStr": "func httpool.rawMode(v1: bool) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "proxy(${1:proxyUrls/*type ...string*/})",
          "document": "【参数】设置整个请求池的代理",
          "definitionStr": "func httpool.proxy(proxyUrls ...string) return (r0: opt)"
        },
        {
          "functionName": "port(${1:port/*type: int*/})",
          "document": "【参数】设置请求发送到的真正 Port",
          "definitionStr": "func httpool.port(port: int) return (r0: opt)"
        },
        {
          "functionName": "perRequestTimeout(${1:seconds/*type: float64*/})",
          "document": "【参数】为每个请求设置超时时间",
          "definitionStr": "func httpool.perRequestTimeout(seconds: float64) return (r0: opt)"
        },
        {
          "functionName": "noFixContentLength(${1:v1/*type: bool*/})",
          "document": "新增不修复 Content-Length 的可能性",
          "definitionStr": "func httpool.noFixContentLength(v1: bool) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "https(${1:isHttps/*type: bool*/})",
          "document": "为请求设置 HTTPS",
          "definitionStr": "func httpool.https(isHttps: bool) return (r0: opt)"
        },
        {
          "functionName": "host(${1:v1/*type: string*/}, ${2:v2/*type: bool*/})",
          "document": "",
          "definitionStr": "func httpool.host(v1: string, v2: bool) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "fuzzParams(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func httpool.fuzzParams(v1: any) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "fuzz(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func httpool.fuzz(v1: bool) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "context(${1:v1/*type: context.Context*/})",
          "document": "为 pool 增加上下文",
          "definitionStr": "func httpool.context(v1: context.Context) return (r0: func httpPoolConfigOption(v1: *mutate.httpPoolConfig) )"
        },
        {
          "functionName": "Pool(${1:requests/*type: []*http.Request|FuzzHTTPRequest|FuzzHTTPRequestBatch|FuzzHTTPRequestIf|*http.Request*/}, ${2:params/*type ...opt*/})",
          "document": "批量执行 http 请求",
          "definitionStr": "func httpool.Pool(requests: []*http.Request|FuzzHTTPRequest|FuzzHTTPRequestBatch|FuzzHTTPRequestIf|*http.Request, params ...opt) return (r0: chan *mutate._httpResult, r1: error)"
        }
      ]
    },
    {
      "libName": "http",
      "prefix": "http.",
      "functions": [
        {
          "functionName": "useragent(${1:userAgent/*type: any*/})",
          "document": "【参数】设置 UserAgent",
          "definitionStr": "func http.useragent(userAgent: any) return (r0: func httpOption(v1: *yaklib.yakHttpRequest) )"
        },
        {
          "functionName": "uarand()",
          "document": "【参数】设置随机 UserAgent",
          "definitionStr": "func http.uarand() return (r0: string)"
        },
        {
          "functionName": "ua(${1:userAgent/*type: any*/})",
          "document": "【参数】设置 UserAgent",
          "definitionStr": "func http.ua(userAgent: any) return (r0: httpOpt)"
        },
        {
          "functionName": "timeout(${1:seconds/*type: float64*/})",
          "document": "【参数】设置超时时间",
          "definitionStr": "func http.timeout(seconds: float64) return (r0: httpOpt)"
        },
        {
          "functionName": "showhead(${1:reqOrRsp/*type: http.Request/Response*/})",
          "document": "调试函数，展示原始数据包内容，不包含 body",
          "definitionStr": "`func http.showhead(reqOrRsp: http.Request/Response)`"
        },
        {
          "functionName": "show(${1:reqOrRsp/*type: http.Request/Response*/})",
          "document": "调试函数，展示原始数据包内容",
          "definitionStr": "`func http.show(reqOrRsp: http.Request/Response)`"
        },
        {
          "functionName": "redirect(${1:v1/*type: func (v1: *http.Request, v2: []*http.Request) return(bool) */})",
          "document": "设置重定向",
          "definitionStr": "func http.redirect(v1: func (v1: *http.Request, v2: []*http.Request) return(bool) ) return (r0: func httpOption(v1: *yaklib.yakHttpRequest) )"
        },
        {
          "functionName": "proxy(${1:proxyUrls/*type ...string*/})",
          "document": "【参数】为请求设置 http 代理",
          "definitionStr": "func http.proxy(proxyUrls ...string) return (r0: httpOpt)"
        },
        {
          "functionName": "json(${1:obj/*type: any*/})",
          "document": "设置发送模式为 JSON，传入的参数会被 JSON 序列化，把结果设置为 Body，然后设置 application/json 为 Content-Type",
          "definitionStr": "func http.json(obj: any) return (r0: func httpOption(v1: *yaklib.yakHttpRequest) )"
        },
        {
          "functionName": "header(${1:headerName/*type: string*/}, ${2:headerValue/*type: string*/})",
          "document": "【参数】为请求设置 http header",
          "definitionStr": "func http.header(headerName: string, headerValue: string) return (r0: httpOpt)"
        },
        {
          "functionName": "dumphead(${1:reqOrRsp/*type: http.Response/Request*/})",
          "document": "工具函数，把 `http.Request/http.Response` 的数据包的头序列化程 `[]byte`",
          "definitionStr": "func http.dumphead(reqOrRsp: http.Response/Request) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "dump(${1:reqOrRsp/*type: http.Response/Request*/})",
          "document": "工具函数，把 `http.Request/http.Response` 变成完整的数据包 `[]byte`",
          "definitionStr": "func http.dump(reqOrRsp: http.Response/Request) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "cookie(${1:cookieRaw/*type: string*/})",
          "document": "【参数】设置请求的 Cookie",
          "definitionStr": "func http.cookie(cookieRaw: string) return (r0: httpOpt)"
        },
        {
          "functionName": "body(${1:body/*type: string|[]byte|io.Reader|any(fmt.Sprint)*/})",
          "document": "【参数】设置请求的 body",
          "definitionStr": "func http.body(body: string|[]byte|io.Reader|any(fmt.Sprint)) return (r0: httpOpt)"
        },
        {
          "functionName": "RequestToSha256(${1:url/*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 sha256",
          "definitionStr": "func http.RequestToSha256(url: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "RequestToSha1(${1:url/*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 sha1",
          "definitionStr": "func http.RequestToSha1(url: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "RequestToMMH3Hash128x64(${1:url/*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 hash128x64",
          "definitionStr": "func http.RequestToMMH3Hash128x64(url: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "RequestToMMH3Hash128(${1:url/*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 hash128",
          "definitionStr": "func http.RequestToMMH3Hash128(url: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "RequestToMD5(${1:url/*type: string*/})",
          "document": "把对 url 的 GET 请求的内容直接编码成 md5",
          "definitionStr": "func http.RequestToMD5(url: string) return (md5Str: string, r1: error)"
        },
        {
          "functionName": "RequestFaviconHash(${1:v1/*type: string*/})",
          "document": "生成 favicon 的 hash(mmh3 32)",
          "definitionStr": "func http.RequestFaviconHash(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "Request(${1:method/*type: string*/}, ${2:url/*type: string*/}, ${3:params/*type ...httpOpt*/})",
          "document": "立即发起一个 http 请求，不需要 `http.Do` 来执行",
          "definitionStr": "func http.Request(method: string, url: string, params ...httpOpt) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "Raw(${1:req/*type: []byte|string|*http.Request|http.Request*/})",
          "document": "创建一个 Golang 原生的 `*http.Request`",
          "definitionStr": "func http.Raw(req: []byte|string|*http.Request|http.Request) return (r0: *http.Request, r1: error)"
        },
        {
          "functionName": "Post(${1:url/*type: string*/}, ${2:params/*type ...httpOpt*/})",
          "document": "",
          "definitionStr": "func http.Post(url: string, params ...httpOpt) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "NewRequest(${1:method/*type: string*/}, ${2:url/*type: string*/}, ${3:params/*type ...httpOpt*/})",
          "document": "创建一个新的 Request，创建之后，需要通过 `http.Do` 来发送",
          "definitionStr": "func http.NewRequest(method: string, url: string, params ...httpOpt) return (r0: *yaklib.yakHttpRequest, r1: error)"
        },
        {
          "functionName": "GetAllBody(${1:response/*type: *http.Response*/})",
          "document": "",
          "definitionStr": "func http.GetAllBody(response: *http.Response) return (r0: []byte)"
        },
        {
          "functionName": "Get(${1:url/*type: opt*/}, ${2:params/*type ...httpOpt*/})",
          "document": "发送一个 http 请求",
          "definitionStr": "func http.Get(url: opt, params ...httpOpt) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "Do(${1:request/*type: *yaklib.yakHttpRequest*/})",
          "document": "执行一个 http 请求，这个请求是 `http.NewRequest` 创建的",
          "definitionStr": "func http.Do(request: *yaklib.yakHttpRequest) return (r0: *http.Response, r1: error)"
        }
      ]
    },
    {
      "libName": "hook",
      "prefix": "hook.",
      "functions": [
        {
          "functionName": "RemoveYakitPluginByName(${1:manager/*type: *yak.YakToCallerManager*/}, ${2:pluginNames/*type ...string*/})",
          "document": "移除已经加载的插件（通过插件名）",
          "definitionStr": "`func hook.RemoveYakitPluginByName(manager: *yak.YakToCallerManager, pluginNames ...string)`"
        },
        {
          "functionName": "NewMixPluginCaller()",
          "document": "新增用于配合插件资深联动的主程序",
          "definitionStr": "func hook.NewMixPluginCaller() return (r0: *yak.MixPluginCaller, r1: error)"
        },
        {
          "functionName": "NewManager()",
          "document": "",
          "definitionStr": "func hook.NewManager() return (r0: *yak.YakToCallerManager)"
        },
        {
          "functionName": "LoadYakitPluginContext(${1:v1/*type: *yak.YakToCallerManager*/}, ${2:v2/*type: context.Context*/}, ${3:v3/*type: string*/}, ${4:v4/*type ...string*/})",
          "document": "",
          "definitionStr": "func hook.LoadYakitPluginContext(v1: *yak.YakToCallerManager, v2: context.Context, v3: string, v4 ...string) return (r0: error)"
        },
        {
          "functionName": "LoadYakitPluginByName(${1:manager/*type: *yak.YakToCallerManager*/}, ${2:pluginName/*type: string*/}, ${3:exportFuncs/*type ...string*/})",
          "document": "通过插件名加载特定插件",
          "definitionStr": "func hook.LoadYakitPluginByName(manager: *yak.YakToCallerManager, pluginName: string, exportFuncs ...string) return (r0: error)"
        },
        {
          "functionName": "LoadYakitPlugin(${1:manager/*type: *yak.YakToCallerManager*/}, ${2:pluginType/*type: string*/}, ${3:funcNames/*type ...string*/})",
          "document": "为 Manager 加载特定类型的 Yakit 插件",
          "definitionStr": "func hook.LoadYakitPlugin(manager: *yak.YakToCallerManager, pluginType: string, funcNames ...string) return (r0: error)"
        },
        {
          "functionName": "CallYakitPluginFunc(${1:pluginName/*type: string*/}, ${2:funcName/*type: string*/})",
          "document": "导出插件特定函数",
          "definitionStr": "func hook.CallYakitPluginFunc(pluginName: string, funcName: string) return (caller: any, err: error)"
        }
      ]
    },
    {
      "libName": "fuzz",
      "prefix": "fuzz.",
      "functions": [
        {
          "functionName": "https(${1:isHttps/*type: bool*/})",
          "document": "`http.HTTPRequest` 的 extraParams 中的额外选项之一",
          "definitionStr": "func fuzz.https(isHttps: bool) return (r0: fuzzHTTPRequestOpt)"
        },
        {
          "functionName": "UrlsToHTTPRequests(${1:urlTemplate/*type ...[]byte|string|[]string*/})",
          "document": "把多个 URL 变成可以批量 Fuzz 的请求组(Batch)",
          "definitionStr": "func fuzz.UrlsToHTTPRequests(urlTemplate []byte|string|[]string) return (r0: *mutate.FuzzHTTPRequestBatch, r1: error)"
        },
        {
<<<<<<< HEAD
          "functionName": "StringsWithParam(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "新增带参数的 fuzz",
          "definitionStr": "func fuzz.StringsWithParam(v1: any, v2: any) return (r0: []string)"
        },
        {
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
          "functionName": "StringsFunc(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: *mutate.MutateResult) */}, ${3:v3/*type ...any*/})",
          "document": "",
          "definitionStr": "func fuzz.StringsFunc(v1: any, v2: func (v1: *mutate.MutateResult) , v3 ...any) return (r0: error)"
        },
        {
          "functionName": "Strings(${1:fuzzTemplate/*type: []byte|string|[]string*/})",
          "document": "执行 Fuzz 模版，可以支持把一个模版字符串渲染多个字符串，参考 [web/http fuzz教程](/docs/buildinlibs/lib_fuzz)",
          "definitionStr": "func fuzz.Strings(fuzzTemplate: []byte|string|[]string) return (r0: []string)"
        },
        {
          "functionName": "HTTPRequest(${1:originRequest/*type: []byte|string|http.Request|*http.Request*/}, ${2:extraParams/*type ...fuzzHTTPRequestOpt*/})",
          "document": "HTTP模糊测试核心函数，构建一个模糊测试 HTTP 请求",
          "definitionStr": "func fuzz.HTTPRequest(originRequest: []byte|string|http.Request|*http.Request, extraParams ...fuzzHTTPRequestOpt) return (r0: *mutate.FuzzHTTPRequest, r1: error)"
        }
      ]
    },
    {
      "libName": "file",
      "prefix": "file.",
      "functions": [
        {
          "functionName": "TempFile(${1:dirName/*type: string*/})",
          "document": "打开一个临时文件",
          "definitionStr": "func file.TempFile(dirName: string) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Stat(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func file.Stat(v1: string) return (r0: fs.FileInfo, r1: error)"
        },
        {
          "functionName": "SaveJson(${1:filePath/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func file.SaveJson(filePath: string, v2: any) return (r0: error)"
        },
        {
          "functionName": "Save(${1:fileName/*type: string*/}, ${2:content/*type: []byte|string|[]string*/})",
          "document": "把 content 中的内容写入文件名为 fileName 中的文件，支持 bytes/string/[]string",
          "definitionStr": "func file.Save(fileName: string, content: []byte|string|[]string) return (r0: error)"
        },
        {
          "functionName": "Rm(${1:fileName/*type: string*/})",
          "document": "同 `file.Remove` / Golang `os.RemoveAll`",
          "definitionStr": "func file.Rm(fileName: string) return (r0: error)"
        },
        {
          "functionName": "Rename(${1:oldPath/*type: string*/}, ${2:newPath/*type: string*/})",
          "document": "把一个路径重命名",
          "definitionStr": "func file.Rename(oldPath: string, newPath: string) return (r0: error)"
        },
        {
          "functionName": "Remove(${1:fileName/*type: string*/})",
          "document": "把一个文件移除，相当于 `os.RemoveAll`",
          "definitionStr": "func file.Remove(fileName: string) return (r0: error)"
        },
        {
          "functionName": "ReadFile(${1:fileName/*type: string*/})",
          "document": "把一个文件内容读出来",
          "definitionStr": "func file.ReadFile(fileName: string) return (fileContent: bytes, r1: error)"
        },
        {
          "functionName": "ReadAll(${1:ioReader/*type: io.Reader*/})",
          "document": "把一个 reader 的内容全部读出来",
          "definitionStr": "func file.ReadAll(ioReader: io.Reader) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "OpenFile(${1:v1/*type: string*/}, ${2:v2/*type: int*/}, ${3:v3/*type: fs.FileMode*/})",
          "document": "",
          "definitionStr": "func file.OpenFile(v1: string, v2: int, v3: fs.FileMode) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Open(${1:fileName/*type: string*/})",
          "document": "打开一个文件，如果没有就创建，使用最多权限",
          "definitionStr": "func file.Open(fileName: string) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Mv(${1:oldPath/*type: string*/}, ${2:newPath/*type: string*/})",
          "document": "把一个文件 move 到另一个地方，本质上执行 `os.Rename`",
          "definitionStr": "func file.Mv(oldPath: string, newPath: string) return (r0: error)"
        },
        {
          "functionName": "MkdirAll(${1:path/*type: string*/})",
          "document": "强制创建个文件夹，如果没有父路径，则会强制创建，相当于执行 `mkdir -p [path]`",
          "definitionStr": "func file.MkdirAll(path: string) return (r0: error)"
        },
        {
          "functionName": "Mkdir(${1:path/*type: string*/})",
          "document": "创建一个文件夹，如果无法创建，基本等同于 `mkdir [path]`，则会失败",
          "definitionStr": "func file.Mkdir(path: string) return (r0: error)"
        },
        {
          "functionName": "Lstat(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func file.Lstat(v1: string) return (r0: fs.FileInfo, r1: error)"
        },
        {
          "functionName": "Ls(${1:dirPath/*type: string*/})",
          "document": "查看当前路径下是否有其他文件",
          "definitionStr": "func file.Ls(dirPath: string) return (r0: []*utils.FileInfo)"
        },
        {
          "functionName": "Join(${1:paths/*type ...string*/})",
          "document": "拼接路径",
          "definitionStr": "func file.Join(paths ...string) return (r0: string)"
        },
        {
          "functionName": "IsLink(${1:path/*type: string*/})",
          "document": "判断一个路径是否是一个文件链接/快捷方式",
          "definitionStr": "func file.IsLink(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsFile(${1:path/*type: string*/})",
          "document": "判断文件是否存在",
          "definitionStr": "func file.IsFile(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsExisted(${1:path/*type: string*/})",
          "document": "判断路径文件是否存在",
          "definitionStr": "func file.IsExisted(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsDir(${1:path/*type: string*/})",
          "document": "判断路径是否是一个文件夹",
          "definitionStr": "func file.IsDir(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsAbs(${1:absPath/*type: string*/})",
          "document": "判断路径是否是绝对路径名",
          "definitionStr": "func file.IsAbs(absPath: string) return (r0: bool)"
        },
        {
          "functionName": "Dir(${1:dirName/*type: string*/})",
          "document": "同 `file.Ls`",
          "definitionStr": "func file.Dir(dirName: string) return (fileInfos: []*utils.FileInfo)"
        },
        {
          "functionName": "Create(${1:fileName/*type: string*/})",
          "document": "创建一个文件，当前用户下读写执行权限均打开",
          "definitionStr": "func file.Create(fileName: string) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Cp(${1:originFile/*type: string*/}, ${2:targetFile/*type: string*/})",
          "document": "复制文件",
          "definitionStr": "func file.Cp(originFile: string, targetFile: string) return (r0: error)"
        },
        {
          "functionName": "Cat(${1:fileName/*type: string*/})",
          "document": "把文件内容 `cat`到显示屏",
          "definitionStr": "`func file.Cat(fileName: string)`"
        },
        {
          "functionName": "Abs(${1:path/*type: string*/})",
          "document": "把相对路径变为绝对路径，如果出错，原样返回",
          "definitionStr": "func file.Abs(path: string) return (absPath: string)"
        }
      ]
    },
    {
      "libName": "exec",
      "prefix": "exec.",
      "functions": [
        {
          "functionName": "timeout(${1:timeout/*type: float64*/})",
          "document": "设置 SystemBatch 批量执行的 timeout",
          "definitionStr": "func exec.timeout(timeout: float64) return (r0: func poolOpt(v1: *yaklib._execPoolConfig) )"
        },
        {
          "functionName": "concurrent(${1:poolSize/*type: int*/})",
          "document": "设置 SystemBatch 批量执行的并发量",
          "definitionStr": "func exec.concurrent(poolSize: int) return (r0: func poolOpt(v1: *yaklib._execPoolConfig) )"
        },
        {
          "functionName": "callback(${1:callbackFunc/*type: func (v1: string, v2: bytes) */})",
          "document": "设置 SystemBatch 批量执行的回调函数，命令执行结束后会执行的函数",
          "definitionStr": "func exec.callback(callbackFunc: func (v1: string, v2: bytes) ) return (r0: func poolOpt(v1: *yaklib._execPoolConfig) )"
        },
        {
          "functionName": "WatchStdout(${1:v1/*type: string*/}, ${2:v2/*type: float64*/}, ${3:v3/*type: func (v1: bytes) return(bool) */})",
          "document": "",
          "definitionStr": "func exec.WatchStdout(v1: string, v2: float64, v3: func (v1: bytes) return(bool) ) return (r0: error)"
        },
        {
          "functionName": "WatchStderr(${1:cmd/*type: string*/}, ${2:timeout/*type: float64*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "使用方法同 `exec.WatchOutput` 只是监控的输出是标准错误流",
          "definitionStr": "func exec.WatchStderr(cmd: string, timeout: float64, callback: func (v1: bytes) return(bool) ) return (err: error)"
        },
        {
          "functionName": "WatchOutput(${1:cmd/*type: string*/}, ${2:timeout/*type: float64*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "监控一个命令执行的中间结果，一般用于检测这个命令是否得到了想要的结果，或者获取一个命令的中间结果。该函数监控命令执行的标准输出流+标准错误流结果",
          "definitionStr": "func exec.WatchOutput(cmd: string, timeout: float64, callback: func (v1: bytes) return(bool) ) return (Err: error)"
        },
        {
          "functionName": "SystemContext(${1:ctx/*type: context.Context*/}, ${2:cmd/*type: string*/})",
          "document": "带 context 控制生命周期的 `exec.System`",
          "definitionStr": "func exec.SystemContext(ctx: context.Context, cmd: string) return (results: bytes, err: error)"
        },
        {
          "functionName": "SystemBatch(${1:cmd/*type: string*/}, ${2:params/*type ...yaklib.poolOpt*/})",
          "document": "批量执行系统命令，cmd 会经过 `fuzz.Strings` 进行变异",
          "definitionStr": "`func exec.SystemBatch(cmd: string, params ...yaklib.poolOpt)`"
        },
        {
          "functionName": "System(${1:cmd/*type: string*/})",
          "document": "直接执行一条系统命令，把结果标准输出和标准错误流一起输出出来，bytes 数据流作为结果",
          "definitionStr": "func exec.System(cmd: string) return (results: bytes, r1: error)"
        },
        {
          "functionName": "CommandContext(${1:ctx/*type: context.Context*/}, ${2:cmd/*type: string*/})",
          "document": "同 `exec.Command` 函数，但是增加了 context 的配置，可以使用 context.Context 来解决生命周期管理的问题",
          "definitionStr": "func exec.CommandContext(ctx: context.Context, cmd: string) return (cmdInstance: *exec.Cmd, r1: error)"
        },
        {
          "functionName": "Command(${1:cmd/*type: string*/})",
          "document": "最基础的，创建一个 `*exec.Cmd` 对象，可以执行，这个功能就是 Golang 原生的 `exec.Command`",
          "definitionStr": "func exec.Command(cmd: string) return (cmdInstance: *exec.Cmd, r1: error)"
        },
        {
          "functionName": "CheckCrash(${1:v1/*type: *exec.Cmd*/})",
          "document": "检查这个进程是否崩溃",
          "definitionStr": "func exec.CheckCrash(v1: *exec.Cmd) return (r0: bool, r1: error)"
        }
      ]
    },
    {
      "libName": "env",
      "prefix": "env.",
      "functions": [
        {
          "functionName": "Set(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "设置环境变量",
          "definitionStr": "`func env.Set(v1: string, v2: string)`"
        },
        {
          "functionName": "Get(${1:v1/*type: string*/})",
          "document": "获取环境变量的内容",
          "definitionStr": "func env.Get(v1: string) return (r0: string)"
        }
      ]
    },
    {
      "libName": "dyn",
      "prefix": "dyn.",
      "functions": [
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "用于 `dyn.LoadVarFromFile` 函数的额外参数，递归加载文件夹内容，会解析文件夹以及自文件下面所有的内容。",
          "definitionStr": "func dyn.recursive(v1: bool) return (r0: func yakEvalConfigOpt(v1: *yak.yakEvalConfig) )"
        },
        {
          "functionName": "params(${1:v1/*type: map[string]any*/})",
          "document": "给导入的脚本额外增加一些变量",
          "definitionStr": "func dyn.params(v1: map[string]any) return (r0: func yakEvalConfigOpt(v1: *yak.yakEvalConfig) )"
        },
        {
          "functionName": "LoadVarFromFile(${1:fromModules/*type: string*/}, ${2:varName/*type: string*/}, ${3:params/*type ...dyn.param*/})",
          "document": "从一个文件/文件夹/模块中，批量导入一个对象，通常用于 exp/poc 编写的时候，需要批量导入一些模块的函数",
          "definitionStr": "func dyn.LoadVarFromFile(fromModules: string, varName: string, params dyn.param) return (r0: []*yak.yakVariable, r1: error)"
        },
        {
          "functionName": "IsYakFunc(${1:obj/*type: any*/})",
          "document": "判断一个对象是不是可供 yak 调用的函数，类似 python 的 `callable`",
          "definitionStr": "func dyn.IsYakFunc(obj: any) return (result: bool)"
        },
        {
          "functionName": "Import(${1:fileOrModel/*type: string*/}, ${2:varName/*type: string*/})",
          "document": "加载一个 yak 文件，并把代码中的某些变量提取出来",
          "definitionStr": "func dyn.Import(fileOrModel: string, varName: string) return (yakVariable: *yak.yakVariable, err: error)"
        },
        {
          "functionName": "Eval(${1:code/*type: any*/})",
          "document": "独立上下文执行一段新的 yak 代码",
          "definitionStr": "func dyn.Eval(code: any) return (err: error)"
        }
      ]
    },
    {
      "libName": "dns",
      "prefix": "dns.",
      "functions": [
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "设置 timeout",
          "definitionStr": "func dns.timeout(v1: float64) return (r0: func _dnsConfigOpt(v1: *yaklib._dnsConfig) )"
        },
        {
          "functionName": "dnsServers(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func dns.dnsServers(v1 ...string) return (r0: func _dnsConfigOpt(v1: *yaklib._dnsConfig) )"
        },
        {
          "functionName": "QueryTXT(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._dnsConfigOpt*/})",
          "document": "",
          "definitionStr": "func dns.QueryTXT(v1: string, v2 ...yaklib._dnsConfigOpt) return (r0: []string)"
        },
        {
          "functionName": "QueryNS(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._dnsConfigOpt*/})",
          "document": "查询 NameServers",
          "definitionStr": "func dns.QueryNS(v1: string, v2 ...yaklib._dnsConfigOpt) return (r0: []string)"
        },
        {
          "functionName": "QueryIPAll(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._dnsConfigOpt*/})",
          "document": "查询一个域名的所有 IP",
          "definitionStr": "func dns.QueryIPAll(v1: string, v2 ...yaklib._dnsConfigOpt) return (r0: []string)"
        },
        {
          "functionName": "QueryIP(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._dnsConfigOpt*/})",
          "document": "新增查询域名 IP 的接口",
          "definitionStr": "func dns.QueryIP(v1: string, v2 ...yaklib._dnsConfigOpt) return (r0: string)"
        },
        {
          "functionName": "QuertAxfr(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib._dnsConfigOpt*/})",
          "document": "",
          "definitionStr": "func dns.QuertAxfr(v1: string, v2 ...yaklib._dnsConfigOpt) return (r0: []string)"
        }
      ]
    },
    {
      "libName": "dictutil",
      "prefix": "dictutil.",
      "functions": [
        {
          "functionName": "Mix(${1:lists/*type ...[]string*/})",
          "document": "混合多个 list，进行笛卡尔乘（直积）一般用于字典的混合",
          "definitionStr": "func dictutil.Mix(lists ...[]string) return (r0: chan []string, r1: error)"
        }
      ]
    },
    {
      "libName": "db",
      "prefix": "db.",
      "functions": [
        {
          "functionName": "SetKey(${1:key/*type: any*/}, ${2:value/*type: any*/})",
          "document": "设置持久化 Key",
          "definitionStr": "func db.SetKey(key: any, value: any) return (r0: error)"
        },
        {
          "functionName": "SavePortFromResult(${1:result/*type: any*/})",
          "document": "从某个结果中保存端口",
          "definitionStr": "func db.SavePortFromResult(result: any) return (r0: error)"
        },
        {
          "functionName": "SavePayloadByFile(${1:group/*type: string*/}, ${2:fileName/*type: string*/})",
          "document": "保存 Payload 到文件",
          "definitionStr": "func db.SavePayloadByFile(group: string, fileName: string) return (r0: error)"
        },
        {
          "functionName": "SavePayload(${1:group/*type: string*/}, ${2:payload/*type: []string*/})",
          "document": "保存 Payload 到一个组",
          "definitionStr": "func db.SavePayload(group: string, payload: []string) return (r0: error)"
        },
        {
          "functionName": "SaveHTTPFlowFromNative(${1:url/*type: string*/}, ${2:req/*type: *http.Request*/}, ${3:rsp/*type: *http.Response*/})",
          "document": "从原始对象中保存 HTTP 资产",
          "definitionStr": "func db.SaveHTTPFlowFromNative(url: string, req: *http.Request, rsp: *http.Response) return (r0: error)"
        },
        {
          "functionName": "SaveDomain(${1:domain/*type: string*/}, ${2:ipaddress/*type ...string*/})",
          "document": "保存域名",
          "definitionStr": "func db.SaveDomain(domain: string, ipaddress ...string) return (r0: error)"
        },
        {
          "functionName": "QueryUrlsByKeyword(${1:v1/*type: string*/})",
          "document": "根据关键字查询 URL",
          "definitionStr": "func db.QueryUrlsByKeyword(v1: string) return (r0: chan string)"
        },
        {
          "functionName": "QueryUrlsAll()",
          "document": "查询所有可用 URL",
          "definitionStr": "func db.QueryUrlsAll() return (r0: chan string)"
        },
        {
          "functionName": "QueryIPForIPS(${1:v1/*type: string*/})",
          "document": "根据 IP 查询运营商",
          "definitionStr": "func db.QueryIPForIPS(v1: string) return (r0: *geo.ISP, r1: error)"
        },
        {
          "functionName": "QueryIPCity(${1:v1/*type: string*/})",
          "document": "查询 IP 对应的城市位置",
          "definitionStr": "func db.QueryIPCity(v1: string) return (r0: *geo.City, r1: error)"
        },
        {
          "functionName": "QueryHostsByDomain(${1:v1/*type: string*/})",
          "document": "根据域名查询 Hosts 资产",
          "definitionStr": "func db.QueryHostsByDomain(v1: string) return (r0: chan *yakit.Host, r1: error)"
        },
        {
          "functionName": "QueryHostPortByNetwork(${1:network/*type: string*/})",
          "document": "根据网络查询 Host:Port",
          "definitionStr": "func db.QueryHostPortByNetwork(network: string) return (r0: chan string)"
        },
        {
          "functionName": "QueryHostPortByKeyword(${1:keyword/*type: string*/})",
          "document": "通过关键字查询 HostPort",
          "definitionStr": "func db.QueryHostPortByKeyword(keyword: string) return (r0: chan *yakit.Host, r1: error)"
        },
        {
          "functionName": "QueryHTTPFlowsByKeyword(${1:v1/*type: string*/})",
          "document": "根据关键字插件 HTTP 流对象",
          "definitionStr": "func db.QueryHTTPFlowsByKeyword(v1: string) return (r0: chan *yakit.HTTPFlow)"
        },
        {
          "functionName": "QueryHTTPFlowsAll()",
          "document": "查询所有的 HTTP 流",
          "definitionStr": "func db.QueryHTTPFlowsAll() return (r0: chan *yakit.HTTPFlow)"
        },
        {
          "functionName": "QueryDomainsByTitle(${1:title/*type: string*/})",
          "document": "根据网站名查询域名",
          "definitionStr": "func db.QueryDomainsByTitle(title: string) return (r0: chan *yakit.Domain, r1: error)"
        },
        {
          "functionName": "QueryDomainsByNetwork(${1:cidrNetwork/*type: string*/})",
          "document": "根据解析到的网段查询域名资产",
          "definitionStr": "func db.QueryDomainsByNetwork(cidrNetwork: string) return (r0: chan *yakit.Domain, r1: error)"
        },
        {
          "functionName": "QueryDomainsByDomainKeyword(${1:keyword/*type: string*/})",
          "document": "根据关键字查询域名资产",
          "definitionStr": "func db.QueryDomainsByDomainKeyword(keyword: string) return (r0: chan *yakit.Domain, r1: error)"
        },
        {
          "functionName": "GetKey(${1:key/*type: any*/})",
          "document": "获取持久化 Key",
          "definitionStr": "func db.GetKey(key: any) return (r0: string)"
        },
        {
          "functionName": "DownloadGeoIP()",
          "document": "下载并自动解压 GeoIP",
          "definitionStr": "func db.DownloadGeoIP() return (r0: error)"
        },
        {
          "functionName": "DeletePayloadByGroup(${1:group/*type: string*/})",
          "document": "删除 Payload",
          "definitionStr": "func db.DeletePayloadByGroup(group: string) return (r0: error)"
        },
        {
          "functionName": "DelKey(${1:v1/*type: any*/})",
          "document": "删除 Key 对应的值(数据库中)",
          "definitionStr": "`func db.DelKey(v1: any)`"
        }
      ]
    },
    {
      "libName": "crawler",
      "prefix": "crawler.",
      "functions": [
        {
          "functionName": "userAgent(${1:userAgent/*type: string*/})",
          "document": "设置 useragent",
          "definitionStr": "func crawler.userAgent(userAgent: string) return (r0: crawler.param)"
        },
        {
          "functionName": "urlRegexpInclude(${1:urlRegexp/*type: string*/})",
          "document": "想要爬 url 的白名单，用于定向爬虫",
          "definitionStr": "func crawler.urlRegexpInclude(urlRegexp: string) return (r0: crawler.param)"
        },
        {
          "functionName": "urlRegexpExclude(${1:urlRegexp/*type: string*/})",
          "document": "禁止爬取的 url 正则，用于排除一些 login delete 等状况",
          "definitionStr": "func crawler.urlRegexpExclude(urlRegexp: string) return (r0: crawler.param)"
        },
        {
          "functionName": "ua(${1:userAgent/*type: string*/})",
          "document": "设置 useragent",
          "definitionStr": "func crawler.ua(userAgent: string) return (r0: crawler.param)"
        },
        {
          "functionName": "timeout(${1:timeout/*type: float64*/})",
          "document": "等效于 `crawler.connectTimeout`",
          "definitionStr": "func crawler.timeout(timeout: float64) return (r0: crawler.param)"
        },
        {
          "functionName": "responseTimeout(${1:seconds/*type: float64*/})",
          "document": "响应超时时间",
          "definitionStr": "func crawler.responseTimeout(seconds: float64) return (r0: crawler.param)"
        },
        {
          "functionName": "proxy(${1:proxyUrl/*type ...string*/})",
          "document": "为爬虫设置代理，如果代理失效，爬虫则请求失败",
          "definitionStr": "func crawler.proxy(proxyUrl ...string) return (r0: crawler.param)"
        },
        {
          "functionName": "maxUrls(${1:limit/*type: int*/})",
          "document": "最多获取到多少个 URL 就停止爬虫",
          "definitionStr": "func crawler.maxUrls(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxRetry(${1:limit/*type: int*/})",
          "document": "最大重试次数（如果失败了就会重试）",
          "definitionStr": "func crawler.maxRetry(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxRequest(${1:limit/*type: int*/})",
          "document": "设置爬虫最大发出的请求数量，默认为 1000",
          "definitionStr": "func crawler.maxRequest(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxRedirect(${1:limit/*type: int*/})",
          "document": "设置最大重定向次数，默认为5",
          "definitionStr": "func crawler.maxRedirect(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxDepth(${1:depth/*type: int*/})",
          "document": "设置爬虫的最大深度，默认为5",
          "definitionStr": "func crawler.maxDepth(depth: int) return (r0: crawler.param)"
        },
        {
          "functionName": "header(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置爬虫的自定义 Header",
          "definitionStr": "func crawler.header(key: string, value: string) return (r0: crawler.param)"
        },
        {
          "functionName": "forbiddenFromParent(${1:allow/*type: bool*/})",
          "document": "禁止扫描 url 的父路径",
          "definitionStr": "func crawler.forbiddenFromParent(allow: bool) return (r0: crawler.param)"
        },
        {
          "functionName": "domainInclude(${1:includedDomain/*type: string*/})",
          "document": "想要扫描的域名，域名白名单，支持 glob 语法",
          "definitionStr": "func crawler.domainInclude(includedDomain: string) return (r0: crawler.param)"
        },
        {
          "functionName": "domainExclude(${1:excludedDomain/*type: string*/})",
          "document": "不扫描的域名，使用 glob 语法",
          "definitionStr": "func crawler.domainExclude(excludedDomain: string) return (r0: crawler.param)"
        },
        {
          "functionName": "cookie(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置 Cookie",
          "definitionStr": "func crawler.cookie(key: string, value: string) return (r0: crawler.param)"
        },
        {
          "functionName": "connectTimeout(${1:seconds/*type: float64*/})",
          "document": "每一次进行 HTTP 连接的超时时间",
          "definitionStr": "func crawler.connectTimeout(seconds: float64) return (r0: crawler.param)"
        },
        {
          "functionName": "concurrent(${1:maxConcurrent/*type: int*/})",
          "document": "设置爬虫并发请求数",
          "definitionStr": "func crawler.concurrent(maxConcurrent: int) return (r0: crawler.param)"
        },
        {
          "functionName": "bodySize(${1:size/*type: int*/})",
          "document": "想要设置每一个 body 最大获取多少页面大小，bytes 的大小，默认为 1024 * 1024 * 10",
          "definitionStr": "func crawler.bodySize(size: int) return (r0: crawler.param)"
        },
        {
          "functionName": "basicAuth(${1:username/*type: string*/}, ${2:password/*type: string*/})",
          "document": "设置爬虫的基础认证",
          "definitionStr": "func crawler.basicAuth(username: string, password: string) return (r0: crawler.param)"
        },
        {
          "functionName": "autoLogin(${1:username/*type: string*/}, ${2:password/*type: string*/}, ${3:v3/*type ...string*/})",
          "document": "自动登录功能，支持 DVWA 的标准登陆功能",
          "definitionStr": "func crawler.autoLogin(username: string, password: string, v3 ...string) return (r0: func configOpt(v1: *crawler.Config) )"
        },
        {
          "functionName": "Start(${1:urls/*type: string*/}, ${2:params/*type ...crawler.param*/})",
          "document": "核心函数，进行爬虫的入口，输入想要爬的网站，然后设置参数，在一个 chan 中接受爬虫的结果",
          "definitionStr": "func crawler.Start(urls: string, params ...crawler.param) return (r0: chan crawler.RequestIf, r1: error)"
        },
        {
          "functionName": "RequestsFromFlow(${1:https/*type: bool*/}, ${2:req/*type: bytes*/}, ${3:rsp/*type: bytes*/})",
          "document": "从一个请求中提取可能可以用于扫描的额外请求",
          "definitionStr": "func crawler.RequestsFromFlow(https: bool, req: bytes, rsp: bytes) return (reqs: []bytes, r1: error)"
        }
      ]
    },
    {
      "libName": "context",
      "prefix": "context.",
      "functions": [
        {
          "functionName": "WithValue(${1:ctx/*type: context.Context*/}, ${2:key/*type: any*/}, ${3:value/*type: any*/})",
          "document": "为上下文绑定一个 kv 对",
          "definitionStr": "func context.WithValue(ctx: context.Context, key: any, value: any) return (ctx: context.Context)"
        },
        {
          "functionName": "WithTimeout(${1:ctx/*type: context.Context*/}, ${2:timeout/*type: time.Duration*/})",
          "document": "给 context 带一个超时间隔，如果超时就自动取消",
          "definitionStr": "func context.WithTimeout(ctx: context.Context, timeout: time.Duration) return (ctx: context.Context, cancel: func CancelFunc() )"
        },
        {
          "functionName": "WithDeadline(${1:ctx/*type: context.Context*/}, ${2:ddl/*type: time.Time*/})",
          "document": "给上下文增加一个 ddl",
          "definitionStr": "func context.WithDeadline(ctx: context.Context, ddl: time.Time) return (r0: context.Context, r1: func CancelFunc() )"
        },
        {
          "functionName": "WithCancel(${1:originCtx/*type: context.Context*/})",
          "document": "给 context 增加一个 cancel 手动按钮",
          "definitionStr": "func context.WithCancel(originCtx: context.Context) return (r0: context.Context, r1: func CancelFunc() )"
        },
        {
          "functionName": "Seconds(${1:seconds/*type: float*/})",
          "document": "生成一个几秒结束的 context",
          "definitionStr": "func context.Seconds(seconds: float) return (ctx: context.Context)"
        },
        {
          "functionName": "New()",
          "document": "同 `context.Background()`",
          "definitionStr": "func context.New() return (ctx: context.Context)"
        },
        {
          "functionName": "Background()",
          "document": "创建一个基础的 `context.Context`",
          "definitionStr": "func context.Background() return (ctx: context.Context)"
        }
      ]
    },
    {
      "libName": "codec",
      "prefix": "codec.",
      "functions": [
        {
          "functionName": "ZeroUnPadding(${1:v1/*type: bytes*/})",
          "document": "移除 0 填充的末尾",
          "definitionStr": "func codec.ZeroUnPadding(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "ZeroPadding(${1:originData/*type: bytes*/}, ${2:blockSize/*type: int*/})",
          "document": "零填充",
          "definitionStr": "func codec.ZeroPadding(originData: bytes, blockSize: int) return (r0: bytes)"
        },
        {
          "functionName": "UnescapeQueryUrl(${1:v1/*type: string*/})",
          "document": "作为 url.Query 进行 URL 解码",
          "definitionStr": "func codec.UnescapeQueryUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "UnescapePathUrl(${1:v1/*type: string*/})",
          "document": "作为 url.Path 进行 URL 解码",
          "definitionStr": "func codec.UnescapePathUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "UTF8ToHZGB2312(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.UTF8ToHZGB2312(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "UTF8ToGBK(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.UTF8ToGBK(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "UTF8ToGB18030(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.UTF8ToGB18030(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "StrconvUnquote(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func codec.StrconvUnquote(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "StrconvQuote(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func codec.StrconvQuote(v1: string) return (r0: string)"
        },
        {
          "functionName": "Sm4OFBEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "SM4 OBF 加密",
          "definitionStr": "func codec.Sm4OFBEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4OFBDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "SM4 OFB 解密",
          "definitionStr": "func codec.Sm4OFBDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4GCMEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "SM4 GCM 加密",
          "definitionStr": "func codec.Sm4GCMEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4GCMDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 gcm 解密",
          "definitionStr": "func codec.Sm4GCMDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4EBCEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 EBC 加密",
          "definitionStr": "func codec.Sm4EBCEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4EBCDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 EBC 解密",
          "definitionStr": "func codec.Sm4EBCDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4CFBEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 cfb 加密",
          "definitionStr": "func codec.Sm4CFBEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4CFBDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 CFB 解密",
          "definitionStr": "func codec.Sm4CFBDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4CBCEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 cbc 加密",
          "definitionStr": "func codec.Sm4CBCEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm4CBCDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "国密4 CBC 解密",
          "definitionStr": "func codec.Sm4CBCDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Sm3(${1:v1/*type: any*/})",
          "document": "SM3 计算 Hash",
          "definitionStr": "func codec.Sm3(v1: any) return (r0: bytes)"
        },
        {
          "functionName": "Sha512(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha512(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha384(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha384(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha256(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha256(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha224(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha224(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha1(${1:v1/*type: any*/})",
          "document": "计算 sha1 hash",
          "definitionStr": "func codec.Sha1(v1: any) return (r0: string)"
        },
        {
          "functionName": "PKCS7UnPadding(${1:data/*type: bytes*/})",
          "document": "pkcs7 解码",
          "definitionStr": "func codec.PKCS7UnPadding(data: bytes) return (r0: bytes)"
        },
        {
          "functionName": "PKCS7Padding(${1:data/*type: bytes*/})",
          "document": "pkcs7 编码",
          "definitionStr": "func codec.PKCS7Padding(data: bytes) return (r0: bytes)"
        },
        {
          "functionName": "PKCS5UnPadding(${1:data/*type: bytes*/})",
          "document": "pkcs5 解码",
          "definitionStr": "func codec.PKCS5UnPadding(data: bytes) return (r0: bytes)"
        },
        {
          "functionName": "PKCS5Padding(${1:data/*type: bytes*/}, ${2:blockSize/*type: int*/})",
          "document": "pkcs5 填充",
          "definitionStr": "func codec.PKCS5Padding(data: bytes, blockSize: int) return (r0: bytes)"
        },
        {
          "functionName": "Md5(${1:v1/*type: any*/})",
          "document": "计算 md5 hash",
          "definitionStr": "func codec.Md5(v1: any) return (r0: string)"
        },
        {
          "functionName": "MMH3Hash32(${1:v1/*type: any*/})",
          "document": "计算 mmh3 的 hash32",
          "definitionStr": "func codec.MMH3Hash32(v1: any) return (r0: uint32)"
        },
        {
          "functionName": "MMH3Hash128x64(${1:v1/*type: any*/})",
          "document": "计算一个对象的 mmh3 hash128x64",
          "definitionStr": "func codec.MMH3Hash128x64(v1: any) return (r0: string)"
        },
        {
          "functionName": "MMH3Hash128(${1:v1/*type: any*/})",
          "document": "计算一个对象的 mmh3 hash128",
          "definitionStr": "func codec.MMH3Hash128(v1: any) return (r0: string)"
        },
        {
          "functionName": "HZGB2312ToUTF8(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.HZGB2312ToUTF8(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "HTMLChardetBest(${1:v1/*type: any*/})",
          "document": "检测 HTML 的字符集，只展示最有可能的结果",
          "definitionStr": "func codec.HTMLChardetBest(v1: any) return (r0: *chardet.Result, r1: error)"
        },
        {
          "functionName": "HTMLChardet(${1:v1/*type: any*/})",
          "document": "检测 HTML 的字符集",
          "definitionStr": "func codec.HTMLChardet(v1: any) return (r0: []chardet.Result, r1: error)"
        },
        {
          "functionName": "GBKToUTF8(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.GBKToUTF8(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "GBKSafe(${1:v1/*type: bytes*/})",
          "document": "尝试修复 GBK",
          "definitionStr": "func codec.GBKSafe(v1: bytes) return (r0: string, r1: error)"
        },
        {
          "functionName": "GB18030ToUTF8(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.GB18030ToUTF8(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "FixUTF8(${1:v1/*type: bytes*/})",
          "document": "修复 Bytes 到 UTF8，会把不合理的 UTF8 字符转义",
          "definitionStr": "func codec.FixUTF8(v1: bytes) return (r0: string)"
        },
        {
          "functionName": "EscapeQueryUrl(${1:v1/*type: string*/})",
          "document": "URL 编码：作为 url.Query 进行编码",
          "definitionStr": "func codec.EscapeQueryUrl(v1: string) return (r0: string)"
        },
        {
          "functionName": "EscapePathUrl(${1:v1/*type: string*/})",
          "document": "URL 编码：（作为 url.Path 进行编码）",
          "definitionStr": "func codec.EscapePathUrl(v1: string) return (r0: string)"
        },
        {
          "functionName": "EscapeHtml(${1:v1/*type: string*/})",
          "document": "同 `codec.DecodeHtml`",
          "definitionStr": "func codec.EscapeHtml(v1: string) return (r0: string)"
        },
        {
          "functionName": "EncodeUrl(${1:v1/*type: any*/})",
          "document": "把一个对象进行 URL 编码",
          "definitionStr": "func codec.EncodeUrl(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeToPrintable(${1:v1/*type: string*/})",
          "document": "等价于 `codec.EncodeASCII`",
          "definitionStr": "func codec.EncodeToPrintable(v1: string) return (r0: string)"
        },
        {
          "functionName": "EncodeToHex(${1:v1/*type: any*/})",
          "document": "把一个对象编码成 hex 字符串，注意：不以 `0x` 开头",
          "definitionStr": "func codec.EncodeToHex(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeHtmlHex(${1:v1/*type: any*/})",
          "document": "把一个字符串编码成 HTML 实体编码，如果输入了一个对象，会序列化后再对 bytes 进行编码，注意这个函数会把参数所有内容都进行编码，编码成 `\u0026#xNN;` 这种形式",
          "definitionStr": "func codec.EncodeHtmlHex(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeHtml(${1:v1/*type: any*/})",
          "document": "把一个字符串编码成 HTML 实体编码，如果输入了一个对象，会 json 序列化后再编码，注意这个函数会把所有内容都进行编码",
          "definitionStr": "func codec.EncodeHtml(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeChunked(${1:v1/*type: bytes*/})",
          "document": "增加 chunked 编码",
          "definitionStr": "func codec.EncodeChunked(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "EncodeBase64(${1:v1/*type: any*/})",
          "document": "把一个对象编码成 base64 字符串",
          "definitionStr": "func codec.EncodeBase64(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeASCII(${1:v1/*type: string*/})",
          "document": "通常用于把不可见字符串变成可见字符串，把一个字符串变成双引号`\"`包裹的字符串，字符串中的不可见字符会变成 `\\xAA\\x0A` 这类被转义的内容",
          "definitionStr": "func codec.EncodeASCII(v1: string) return (r0: string)"
        },
        {
          "functionName": "DoubleEncodeUrl(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.DoubleEncodeUrl(v1: any) return (r0: string)"
        },
        {
          "functionName": "DoubleDecodeUrl(${1:v1/*type: string*/})",
          "document": "双重 URL 解码，例如 `%2564%2567` 会解析成 `dg`",
          "definitionStr": "func codec.DoubleDecodeUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "DecodeUrl(${1:v1/*type: string*/})",
          "document": "把 `%21%63%57asdf` 这类的字符串中的 URL 编码解析成正常字符",
          "definitionStr": "func codec.DecodeUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "DecodeHtml(${1:v1/*type: string*/})",
          "document": "把 HTML 实体编码后的文字进行解析，例如 `\u0026#x0a;` 或 `\u0026#amp;` 等，如果包含正常字符串，则会保留原字符串",
          "definitionStr": "func codec.DecodeHtml(v1: string) return (r0: string)"
        },
        {
          "functionName": "DecodeHex(${1:v1/*type: string*/})",
          "document": "把 Hex 字符串解析成 bytes",
          "definitionStr": "func codec.DecodeHex(v1: string) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DecodeChunked(${1:v1/*type: bytes*/})",
          "document": "http chunked 解码",
          "definitionStr": "func codec.DecodeChunked(v1: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DecodeBase64(${1:base64Str/*type: str*/})",
          "document": "把 base64 解析成 bytes",
          "definitionStr": "func codec.DecodeBase64(base64Str: str) return (result: bytes, err: error)"
        },
        {
          "functionName": "DecodeASCII(${1:v1/*type: string*/})",
          "document": "等价于 `strconv.Unquote`，把一个被 `\"` 包裹的字符串解析成字符串内容，同时解析 `\"\\x0a\"` 解析成对应的字符串。",
          "definitionStr": "func codec.DecodeASCII(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "DESEncrypt(${1:key/*type: bytes*/}, ${2:originData/*type: bytes*/}, ${3:iv/*type: bytes*/})",
          "document": "DES 加密，默认 CBC 模式",
          "definitionStr": "func codec.DESEncrypt(key: bytes, originData: bytes, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DESDecrypt(${1:key/*type: bytes*/}, ${2:encryptedData/*type: bytes*/}, ${3:iv/*type: bytes*/})",
          "document": "DES 解密（默认CBC）",
          "definitionStr": "func codec.DESDecrypt(key: bytes, encryptedData: bytes, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DESCBCEncrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.DESCBCEncrypt(v1: bytes, v2: bytes, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DESCBCDecrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.DESCBCDecrypt(v1: bytes, v2: bytes, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESGCMEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "aes gcm 加密",
          "definitionStr": "func codec.AESGCMEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESGCMDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "aes gcm 解密",
          "definitionStr": "func codec.AESGCMDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "aes cbc 加密",
          "definitionStr": "func codec.AESEncrypt(key: bytes, data: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "aes 解密",
          "definitionStr": "func codec.AESDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESCBCEncrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "aes cbc 加密",
          "definitionStr": "func codec.AESCBCEncrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESCBCDecrypt(${1:key/*type: bytes*/}, ${2:data/*type: any*/}, ${3:iv/*type: bytes*/})",
          "document": "aes cbc 解密",
          "definitionStr": "func codec.AESCBCDecrypt(key: bytes, data: any, iv: bytes) return (r0: bytes, r1: error)"
        }
      ]
    },
    {
      "libName": "cli",
      "prefix": "cli.",
      "functions": [
        {
          "functionName": "setRequired(${1:required/*type: bool*/})",
          "document": "设置参数是必须的，如果设置了，参数在没有设置默认值的情况下，并且找不到用户输入，会影响 cli.check 的判断结果",
          "definitionStr": "func cli.setRequired(required: bool) return (r0: func setCliExtraParam(v1: *yaklib.cliExtraParams) )"
        },
        {
          "functionName": "setHelp(${1:helpText/*type: str*/})",
          "document": "使用方法同 `cli.setDefault` 使用，如果某个参数的值为空的话，并且没有默认值，将会展示缺少的参数。",
          "definitionStr": "func cli.setHelp(helpText: str) return (r0: cli.setHelp)"
        },
        {
          "functionName": "setDefault(${1:default/*type: any*/})",
          "document": "为命令行设置默认值，默认值会被强行类型断言为目标类型，不要传错类型就可以！",
          "definitionStr": "func cli.setDefault(default: any) return (r0: cli.setDefault)"
        },
        {
          "functionName": "check()",
          "document": "检查当前设置的所有参数，如果有不合理的参数（无法确定值），则停止执行，打印出帮助信息",
          "definitionStr": "`func cli.check()`"
        },
        {
          "functionName": "Urls(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "",
          "definitionStr": "func cli.Urls(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Url(${1:param/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把参数对应的值解析成 url，如果无法精确对应一个 url，将会自动补充 `https://`, `http://`, `www` 等，如果本身参数就是个 url，则会保留原样",
          "definitionStr": "func cli.Url(param: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "String(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "最基础的命令行获取接口，把参数的值解析成字符串",
          "definitionStr": "func cli.String(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: string)"
        },
        {
          "functionName": "Ports(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Port`",
          "definitionStr": "func cli.Ports(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []int)"
        },
        {
          "functionName": "Port(${1:ports/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把 ports 对应的命令行参数值解析成端口组，或者整数范围",
          "definitionStr": "func cli.Port(ports: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []int)"
        },
        {
          "functionName": "Network(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Host`",
          "definitionStr": "func cli.Network(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Net(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Host`",
          "definitionStr": "func cli.Net(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "LineDict(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把一个字典按行解析",
          "definitionStr": "func cli.LineDict(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Integer(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Int`",
          "definitionStr": "func cli.Integer(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: int)"
        },
        {
          "functionName": "Int(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把命令行参数值解析成整数",
          "definitionStr": "func cli.Int(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: int)"
        },
        {
          "functionName": "Hosts(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Host`",
          "definitionStr": "func cli.Hosts(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Host(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把 v1 对应的命令行参数解析成扫描目标，支持 `192.168.1.1/24,8.8.8.8,baidu.com` 等 IP，IP 段，域名等多种格式",
          "definitionStr": "func cli.Host(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Have(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Bool`，检测参数是否存在在命令行中",
          "definitionStr": "func cli.Have(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: bool)"
        },
        {
          "functionName": "Float(${1:param/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Double`，把参数内容解析成 float64",
          "definitionStr": "func cli.Float(param: string, v2 ...cli.setHelp|cli.setDefault) return (r0: float64)"
        },
        {
          "functionName": "FileOrContent(${1:param/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把 v1 作为文件名来解析，如果解析失败，则把输入的内容直接变成内容返回",
          "definitionStr": "func cli.FileOrContent(param: string, v2 ...cli.setHelp|cli.setDefault) return (resultRaw: bytes)"
        },
        {
          "functionName": "File(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把输入的参数当成文件名来解析",
          "definitionStr": "func cli.File(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: bytes)"
        },
        {
          "functionName": "Double(${1:param/*type: string*/}, ${2:extraParams/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把函数解析成 `float64` 等价于 `cli.Float64`",
          "definitionStr": "func cli.Double(param: string, extraParams ...cli.setHelp|cli.setDefault) return (r0: float64)"
        },
        {
          "functionName": "Bool(${1:paramName/*type: string*/}, ${2:extraParams/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "判断命令行参数是否存在 v1 参数对应的选项？如果 v1 是 `option`，则会检测 `--option` 或者 `-option` 是否存在。要注意，不同于 `cli.String` 等接口，`cli.Bool` 不会判断参数的值，只会检测参数标记是不是存在。",
          "definitionStr": "func cli.Bool(paramName: string, extraParams ...cli.setHelp|cli.setDefault) return (r0: bool)"
        },
        {
          "functionName": "Args()",
          "document": "获取全部的命令行参数，返回结果等同于 `os.Args`\"",
          "definitionStr": "func cli.Args() return (args: []string)"
        }
      ]
    },
    {
      "libName": "brute",
      "prefix": "brute.",
      "functions": [
        {
          "functionName": "userList(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func brute.userList(v1 ...string) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "passList(${1:v1/*type ...string*/})",
          "document": "设置密码列表",
          "definitionStr": "func brute.passList(v1 ...string) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "okToStop(${1:v1/*type: bool*/})",
          "document": "如果爆破出结果就停止",
          "definitionStr": "func brute.okToStop(v1: bool) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "minDelay(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func brute.minDelay(v1: int) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "maxDelay(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func brute.maxDelay(v1: int) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "finishingThreshold(${1:v1/*type: int*/})",
          "document": "停止爆破的阈值",
          "definitionStr": "func brute.finishingThreshold(v1: int) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func brute.debug(v1: bool) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "concurrentTarget(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func brute.concurrentTarget(v1: int) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func brute.concurrent(v1: int) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "bruteHandler(${1:v1/*type: func (v1: *bruteutils.BruteItem) return(*bruteutils.BruteItemResult) */})",
          "document": "",
          "definitionStr": "func brute.bruteHandler(v1: func (v1: *bruteutils.BruteItem) return(*bruteutils.BruteItemResult) ) return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "New(${1:bruteType/*type: string*/}, ${2:bruteParams/*type ...yakBruteOpt*/})",
          "document": "新建一个爆破执行期",
          "definitionStr": "func brute.New(bruteType: string, bruteParams ...yakBruteOpt) return (r0: *tools.yakBruter, r1: error)"
        },
        {
          "functionName": "GetUsernameListFromBruteType(${1:bruteType/*type: string*/})",
          "document": "根据服务获取服务对应的用户列表",
          "definitionStr": "func brute.GetUsernameListFromBruteType(bruteType: string) return (list: []string)"
        },
        {
          "functionName": "GetPasswordListFromBruteType(${1:bruteType/*type: string*/})",
          "document": "根据服务获取服务对应的密码列表",
          "definitionStr": "func brute.GetPasswordListFromBruteType(bruteType: string) return (list: []string)"
        },
        {
          "functionName": "GetAvailableBruteTypes()",
          "document": "获取当前模块支持的所有的爆破类型",
          "definitionStr": "func brute.GetAvailableBruteTypes() return (r0: []string)"
        }
      ]
    }
  ],
  "fieldsCompletions": [
    {
      "isMethod": true,
      "fieldName": "Zone",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Zone()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Yellow",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Yellow()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "YearDay",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "YearDay()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Year",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Year()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "YakScriptName",
      "structName": "palm/common/yak.CallerHookDescription",
      "structNameShort": "CallerHookDescription",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "YakScriptName",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "YakScriptId",
      "structName": "palm/common/yak.CallerHookDescription",
      "structNameShort": "CallerHookDescription",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "YakScriptId",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "YakMod",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Xor",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Xor(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteToUDPAddrPort",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "WriteToUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: netip.AddrPort*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteToUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteToUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: netip.AddrPort*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteToUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteToUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: netip.AddrPort*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteToUDP",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "WriteToUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *net.UDPAddr*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteToUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteToUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *net.UDPAddr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteToUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteToUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *net.UDPAddr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteTo",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "WriteTo(${1:v2 /*type: bytes*/}, ${2:v3 /*type: net.Addr*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteTo",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteTo(${1:v2 /*type: bytes*/}, ${2:v3 /*type: net.Addr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteTo",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteTo(${1:v2 /*type: bytes*/}, ${2:v3 /*type: net.Addr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteTo",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "WriteTo(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteString",
      "structName": "io.discard",
      "structNameShort": "discard",
      "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteString",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteString",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteProxy",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteProxy",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteProxy",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteMsgUDPAddrPort",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "WriteMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: netip.AddrPort*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteMsgUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: netip.AddrPort*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteMsgUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: netip.AddrPort*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteMsgUDP",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "WriteMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: *net.UDPAddr*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteMsgUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: *net.UDPAddr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteMsgUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "WriteMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: *net.UDPAddr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteLine",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "WriteLine(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteAt",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "WriteAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "io.PipeWriter",
      "structNameShort": "PipeWriter",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "io.discard",
      "structNameShort": "discard",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "Write(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WithContext",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WithContext",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WithContext",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Weekday",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Weekday()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Warn",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "Warn(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "WaitingVerified",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "WaitingEventCount",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "sync.WaitGroup",
      "structNameShort": "WaitGroup",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "VerifyHostname",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "VerifyHostname(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Verify",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "Verify(${1:v2 /*type: x509.VerifyOptions*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Verify",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Verify()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "VerifiedChains",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "VerboseName",
      "structName": "palm/common/yak.CallerHookDescription",
      "structNameShort": "CallerHookDescription",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Verbose",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Vendor",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Vars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Vars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Vars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Vars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Vars",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "Vars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Var",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Var(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Var",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Var(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Var",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "Var(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Values",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "crypto/x509/pkix.AttributeTypeAndValue",
      "structNameShort": "AttributeTypeAndValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "crypto/x509/pkix.Extension",
      "structNameShort": "Extension",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
<<<<<<< HEAD
=======
      "fieldName": "Value",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Value",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "fieldName": "Value",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Value",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "mime/multipart.Form",
      "structNameShort": "Form",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Value",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Value",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "palm/common/yak/yaklib.yakitGraphValue",
      "structNameShort": "yakitGraphValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "palm/common/yserx.JavaReference",
      "structNameShort": "JavaReference",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Value",
      "structName": "reflect.MapIter",
      "structNameShort": "MapIter",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Valid",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Valid",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "Valid()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Val",
      "structName": "golang.org/x/net/html.Attribute",
      "structNameShort": "org/x/net/html.Attribute",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Username",
      "structName": "net/url.Userinfo",
      "structNameShort": "Userinfo",
      "methodsCompletion": "Username()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Username",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Username",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "UserEliminated",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UserAgent",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "UserAgent()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UserAgent",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "UserAgent()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UserAgent",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "UserAgent()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "User",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Url",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Url",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Url",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Url",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Url",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "UpdatedAt",
      "structName": "github.com/jinzhu/gorm.Model",
      "structNameShort": "com/jinzhu/gorm.Model",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Update",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UnsetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "UnsetVar(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UnsetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "UnsetVar(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UnsetVar",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "UnsetVar(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UnsafePointer",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "UnsafePointer()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnsafeAddr",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "UnsafeAddr()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnreadRune",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "UnreadRune()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnreadByte",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "UnreadByte()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Unparsed",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnmarshalText",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "UnmarshalText(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnmarshalJSON",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "UnmarshalJSON(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnmarshalBinary",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
      "methodsCompletion": "UnmarshalBinary(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *encoder.Metadata*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnmarshalBinary",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "UnmarshalBinary(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Unlock",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Unlock()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Unlock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "Unlock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "UnknownExtKeyUsage",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnixNano",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "UnixNano()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnixMilli",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "UnixMilli()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnixMicro",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "UnixMicro()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Unix",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Unix()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "UnhandledCriticalExtensions",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Uncompressed",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Uint64",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Uint64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Uint64",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Uint64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Uint32",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Uint32()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Uint",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Uint()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UTC",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "UTC()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "URL",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "URIs",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "UDPConn",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaBlockData",
      "structNameShort": "JavaBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaClassData",
      "structNameShort": "JavaClassData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaClassDesc",
      "structNameShort": "JavaClassDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaClassFields",
      "structNameShort": "JavaClassFields",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaEndBlockData",
      "structNameShort": "JavaEndBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaNull",
      "structNameShort": "JavaNull",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaReference",
      "structNameShort": "JavaReference",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TypeVerbose",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "crypto/x509/pkix.AttributeTypeAndValue",
      "structNameShort": "AttributeTypeAndValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yak/yaklib.YakitGraph",
      "structNameShort": "YakitGraph",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaBlockData",
      "structNameShort": "JavaBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaClassData",
      "structNameShort": "JavaClassData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaClassDesc",
      "structNameShort": "JavaClassDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaClassFields",
      "structNameShort": "JavaClassFields",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaEndBlockData",
      "structNameShort": "JavaEndBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaNull",
      "structNameShort": "JavaNull",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaReference",
      "structNameShort": "JavaReference",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Type",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Type()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TrySend",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "TrySend(${1:v2 /*type: reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TryRecv",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "TryRecv()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TryRLock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "TryRLock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TryLock",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "TryLock()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "TryLock",
      "structName": "sync.Mutex",
      "structNameShort": "Mutex",
      "methodsCompletion": "TryLock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TryLock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "TryLock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Truncate",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Truncate(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Truncate",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Truncate(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TriggerTimestamp",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TriggerTimestamp",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TreeID",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TreeDisconnect",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "TreeDisconnect(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "TreeConnect",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "TreeConnect(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TransferEncoding",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TransferEncoding",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Traits",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "TrailingZeroBits",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "TrailingZeroBits()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Trailer",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Trailer",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Top",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "Top()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Token",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToVar",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "ToVar()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToValue",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "ToValue(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToValue",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "ToValue(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToString",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "ToString()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToString",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "ToString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToRecord",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "ToRecord()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToRDNSequence",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "ToRDNSequence()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToInteger",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "ToInteger()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToGRPCModelFull",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "ToGRPCModelFull()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToGRPCModel",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "ToGRPCModel()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToGRPCModel",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "ToGRPCModel()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToGRPCModel",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "ToGRPCModel()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToFloat",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "ToFloat()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToBoolean",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "ToBoolean()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TitleVerbose",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Title",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "Title(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Title",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Title",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/yak/yaklib.YakitLog",
      "structNameShort": "YakitLog",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ThisUpdate",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Text",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Text(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TargetTaskConcurrent",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Tags",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Tags",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Tags",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Tag",
      "structName": "encoding/asn1.RawValue",
      "structNameShort": "RawValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TableName",
      "structName": "palm/common/yak/yaklib.YakitFixedTableData",
      "structNameShort": "YakitFixedTableData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Table",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "Table(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TLSUnique",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TLS",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TLS",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TBSCertList",
      "structName": "crypto/x509/pkix.CertificateList",
      "structNameShort": "CertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SyscallConn",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "SyscallConn()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SyscallConn",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SyscallConn()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SyscallConn",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SyscallConn()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SyscallConn",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SyscallConn()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "SysProcAttr",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Sync",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Sync()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Swg",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "SuperClass",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Subjects",
      "structName": "crypto/x509.CertPool",
      "structNameShort": "CertPool",
      "methodsCompletion": "Subjects()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SubjectKeyId",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Subject",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SubexpNames",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "SubexpNames()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SubexpIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "SubexpIndex(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Subdivisions",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Sub",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Sub(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Sub",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Sub(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StructureSize",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StructureSize",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StructureSize",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net/url.Userinfo",
      "structNameShort": "Userinfo",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "String(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "time.Location",
      "structNameShort": "Location",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StreetAddress",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StreamBruteContext",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "StreamBruteContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []string*/}, ${4:v5 /*type: []string*/}, ${5:v6 /*type: []string*/}, ${6:v7 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Store",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Store(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Stop",
      "structName": "time.Ticker",
      "structNameShort": "Ticker",
      "methodsCompletion": "Stop()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Stop",
      "structName": "time.Timer",
      "structNameShort": "Timer",
      "methodsCompletion": "Stop()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StdoutPipe",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "StdoutPipe()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Stdout",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StdinPipe",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "StdinPipe()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Stdin",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StderrPipe",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "StderrPipe()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Stderr",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StatusCode",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StatusCode",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Status",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Status",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "State",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "State",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Stat",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Stat()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Start",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Start()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Start",
      "structName": "palm/common/yak/yaklib/tools.yakBruter",
      "structNameShort": "yakBruter",
      "methodsCompletion": "Start(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Stack",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Sqrt",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Sqrt(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Split",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Split(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SourceType",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Source",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Slice3",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Slice3(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Slice",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Slice(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SizeCachedHistoryConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Size",
<<<<<<< HEAD
      "structName": "mime/multipart.FileHeader",
      "structNameShort": "FileHeader",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Size",
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Size",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Size",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Size",
      "structName": "palm/common/yserx.JavaBlockData",
      "structNameShort": "JavaBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Size",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Size",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Size()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SigningString",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "SigningString()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SignedString",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "SignedString(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SignedCertificateTimestamps",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SignatureValue",
      "structName": "crypto/x509/pkix.CertificateList",
      "structNameShort": "CertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SignatureAlgorithm",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SignatureAlgorithm",
      "structName": "crypto/x509/pkix.CertificateList",
      "structNameShort": "CertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Signature",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Signature",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Signature",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Signature",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Signal",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "Signal()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Sign",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Sign()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Shuffle",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Shuffle(${1:v2 /*type: int*/}, ${2:v3 /*type: func (v1: int, v2: int) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/synscan.SynScanResult",
      "structNameShort": "SynScanResult",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Severity",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Severity",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteBuffer",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "SetWriteBuffer(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteBuffer",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetWriteBuffer(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteBuffer",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetWriteBuffer(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "SetVar(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "SetVar(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetVar",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "SetVar(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetUint64",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "SetUint64(${1:v2 /*type: uint64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetUint",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetUint(${1:v2 /*type: uint64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetTimeout",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetString",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "SetString(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetString",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetStackTraceLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackTraceLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
<<<<<<< HEAD
=======
    },
    {
      "isMethod": true,
      "fieldName": "SetStackTraceLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackTraceLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetStackDepthLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackDepthLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetStackDepthLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackDepthLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetResultCallback",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "SetResultCallback(${1:v2 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
      "isGolangBuildOrigin": false
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
    },
    {
      "isMethod": true,
      "fieldName": "SetStackTraceLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackTraceLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetStackDepthLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackDepthLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetStackDepthLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetStackDepthLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetResultCallback",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "SetResultCallback(${1:v2 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadBuffer",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "SetReadBuffer(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetReadBuffer",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetReadBuffer(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadBuffer",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetReadBuffer(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetRandomSource",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetRandomSource(${1:v2 /*type: func () return(float64) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetRandomSource",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetRandomSource(${1:v2 /*type: func () return(float64) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetProgress",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "SetProgress(${1:v2 /*type: string*/}, ${2:v3 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetPointer",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetPointer(${1:v2 /*type: unsafe.Pointer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetPayload",
      "structName": "palm/common/facades/ldap/ldapserver.LdapServer",
      "structNameShort": "LdapServer",
      "methodsCompletion": "SetPayload(${1:v2 /*type: func (v1: string) return(bytes) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetNegativeSample",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "SetNegativeSample(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetMapIndex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetMapIndex(${1:v2 /*type: reflect.Value*/}, ${2:v3 /*type: reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetLibs",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "SetLibs(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetLevel",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "SetLevel(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetLen",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetLen(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
<<<<<<< HEAD
      "fieldName": "SetLDAPEntry",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "SetLDAPEntry(${1:v2 /*type: map[string]any*/})",
      "isGolangBuildOrigin": false
=======
      "fieldName": "SetIterValue",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetIterValue(${1:v2 /*type: *reflect.MapIter*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetIterKey",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetIterKey(${1:v2 /*type: *reflect.MapIter*/})",
      "isGolangBuildOrigin": true
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
    },
    {
      "isMethod": true,
      "fieldName": "SetInt64",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "SetInt64(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetInt",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetInt(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetHttpResource",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "SetHttpResource(${1:v2 /*type: func (v1: string) return(bytes) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetHead",
      "structName": "palm/common/yak/yaklib.YakitTable",
      "structNameShort": "YakitTable",
      "methodsCompletion": "SetHead(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetFrame",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "SetFrame(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetFragment",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "SetFragment(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetForYakit",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "SetForYakit(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: interface { Send(*ypb.ExecResult) error }*/}, ${4:v5 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetFloat",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetFloat(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetFeedback",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "SetFeedback(${1:v2 /*type: func (v1: *ypb.ExecResult) return(error) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDetails",
      "structName": "palm/common/yserx.JavaClassDesc",
      "structNameShort": "JavaClassDesc",
      "methodsCompletion": "SetDetails(${1:v2 /*type: *yserx.JavaClassDetails*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDebuggerHandler",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetDebuggerHandler(${1:v2 /*type: func (v1: *otto.Otto) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetDebuggerHandler",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "SetDebuggerHandler(${1:v2 /*type: func (v1: *otto.Otto) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetComplex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetComplex(${1:v2 /*type: complex128*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetCap",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetCap(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBytes",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "SetBytes(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBytes",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetBytes(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBool",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "SetBool(${1:v2 /*type: bool*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBits",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "SetBits(${1:v2 /*type: []big.Word*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBit",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "SetBit(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: uint*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBasicAuth",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetBasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Set(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "Set(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func (v1: *yaklang.YakEngine) return(error) */}, ${4:v5 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "palm/common/yak/yaklang/exec.ReservedInstr",
      "structNameShort": "ReservedInstr",
      "methodsCompletion": "Set(${1:v2 /*type: exec.Instr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Set",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Set(${1:v2 /*type: reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SessionID",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ServiceType",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ServiceProvider",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ServiceName",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ServerName",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Serve",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "Serve(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "SerialVersion",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "SerialNumber",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SerialNumber",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SerialNumber",
      "structName": "crypto/x509/pkix.RevokedCertificate",
      "structNameShort": "RevokedCertificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SendTo",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "SendTo(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SendRaw",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "SendRaw(${1:v2 /*type: *yaklib.YakitLog*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Send",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Send(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Send",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Send(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Send",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Send(${1:v2 /*type: reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Seek",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Seek(${1:v2 /*type: int64*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Seek",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Seek(${1:v2 /*type: int64*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Seed",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Seed(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SecurityMode",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SecurityMode",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SecurityBufferOffset",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SecurityBufferLength",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SecurityBlob",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Secure",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Second",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Second()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Scheme",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Scan",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Scan(${1:v2 /*type: fmt.ScanState*/}, ${2:v3 /*type: int32*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Save",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "Save(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Save",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "Save()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "SameSite",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SafeExec",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "SafeExec(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SafeEval",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "SafeEval(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SafeCl",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "SafeCl(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Runes",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "Runes()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Runes",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "Runes()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RunWithContext",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "RunWithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Run(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Run(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Run()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "palm/common/facades/ldap/ldapserver.LdapServer",
      "structNameShort": "LdapServer",
      "methodsCompletion": "Run(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "Run()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Rsh",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Rsh(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: uint*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Round",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Round(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Roots",
      "structName": "crypto/x509.VerifyOptions",
      "structNameShort": "VerifyOptions",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RiskTypeVerbose",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RiskType",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RiskName",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RightAlign",
      "structName": "encoding/asn1.BitString",
      "structNameShort": "BitString",
      "methodsCompletion": "RightAlign()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RevokedCertificates",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RevocationTime",
      "structName": "crypto/x509/pkix.RevokedCertificate",
      "structNameShort": "RevokedCertificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ReverseToken",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Results",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Results()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Results",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Results()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Result",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "Result()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ResponseRaw",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ResponseHeader",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ResponseBody",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Response",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Response",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Response",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Response",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResolveReference",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "ResolveReference(${1:v2 /*type: *url.URL*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ResizeVars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ResizeVars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResizeVars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ResizeVars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResizeVars",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "ResizeVars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResetVars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ResetVars(${1:v2 /*type: map[string]any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResetVars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ResetVars(${1:v2 /*type: map[string]any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResetVars",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "ResetVars(${1:v2 /*type: map[string]any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResetFilter",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "ResetFilter()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "Reset()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "reflect.MapIter",
      "structNameShort": "MapIter",
      "methodsCompletion": "Reset(${1:v2 /*type: reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Reset(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "time.Ticker",
      "structNameShort": "Ticker",
      "methodsCompletion": "Reset(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "time.Timer",
      "structNameShort": "Timer",
      "methodsCompletion": "Reset(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Reserved",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Reserved",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reserve",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "Reserve()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RequestURI",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RequestURI",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "RequestURI()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RequestRaw",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RequestHeader",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RequestBody",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
<<<<<<< HEAD
      "fieldName": "ReqFlags",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "fieldName": "RepresentedCountry",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
<<<<<<< HEAD
      "isMethod": true,
      "fieldName": "ReplaceYakToCallerManager",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "ReplaceYakToCallerManager(${1:v2 /*type: *yak.YakToCallerManager*/})",
      "isGolangBuildOrigin": false
    },
    {
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "isMethod": true,
      "fieldName": "ReplaceAllStringFunc",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllStringFunc(${1:v2 /*type: string*/}, ${2:v3 /*type: func (v1: string) return(string) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllString(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllLiteralString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllLiteralString(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllLiteral",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllLiteral(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllFunc",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllFunc(${1:v2 /*type: bytes*/}, ${2:v3 /*type: func (v1: bytes) return(bytes) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAll",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAll(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Repeat",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Repeat(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Repeat",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Repeat(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoveHookID",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoveColor",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "RemoveColor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoveChild",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "RemoveChild(${1:v2 /*type: *html.Node*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RemoveAll",
      "structName": "mime/multipart.Form",
      "structNameShort": "Form",
      "methodsCompletion": "RemoveAll()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Remove",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "Remove(${1:v2 /*type: *ypb.RemoveHookParams*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteProcessingByTarget",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "RemoteProcessingByTarget(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemotePort",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemotePort",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoteIP",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoteIP",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoteAddrConvertorHandler",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteColor",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "RemoteColor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RemoteAddr",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Rem",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Rem(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RegisteredCountry",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RegisteredCountry",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Referer",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Referer()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Referer",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Referer()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Referer",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Referer()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Redacted",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Redacted()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Red",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Red()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvTimeout",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "RecvTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvStringTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvStringTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvStringTimeout",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "RecvStringTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvString",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvString",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "RecvString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvLen",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvLen(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvLen",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "RecvLen(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Recv",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Recv()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Recv",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Recv()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Recv",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Recv()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Recov",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RecordSize",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Reason",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Reason",
      "structName": "palm/common/utils/pingutil.PingResult",
      "structNameShort": "PingResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Reason",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Readdirnames",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Readdirnames(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Readdir",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Readdir(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadStringFromAddr",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadStringFromAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadString",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "ReadString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadRune",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadRune()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadMsgUDPAddrPort",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "ReadMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadMsgUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadMsgUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadMsgUDP",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "ReadMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadMsgUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadMsgUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadLines",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "ReadLines()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromUDPAddrPort",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "ReadFromUDPAddrPort(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFromUDPAddrPort(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromUDPAddrPort",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFromUDPAddrPort(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromUDP",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "ReadFromUDP(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFromUDP(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromUDP",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFromUDP(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFromAddr",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFromAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "io.discard",
      "structNameShort": "discard",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadForm",
      "structName": "mime/multipart.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadDir",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "ReadDir(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadByte",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadByte()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadAt",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadAt",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadAll",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "ReadAll()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "io.PipeReader",
      "structNameShort": "PipeReader",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "mime/multipart.Part",
      "structNameShort": "Part",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawTBSCertificate",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawSubjectPublicKeyInfo",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawSubject",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawQuery",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawPath",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawJson",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RawIssuer",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawFragment",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawExpires",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "palm/common/yak/yaklib/tools.templateDesc",
      "structNameShort": "templateDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Range",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Range(${1:v2 /*type: func (v1: any, v2: any) return(bool) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Rand",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Rand(${1:v2 /*type: *rand.Rand*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RUnlock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "RUnlock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RTT",
      "structName": "palm/common/utils/pingutil.PingResult",
      "structNameShort": "PingResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RLocker",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "RLocker()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RLock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "RLock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "QuotedJson",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "QuoRem",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "QuoRem(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Quo",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Quo(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Query",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Query()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Put",
      "structName": "sync.Pool",
      "structNameShort": "Pool",
      "methodsCompletion": "Put(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "PushRet",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "PushRet(${1:v2 /*type: []reflect.Value*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Push",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "Push(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Purple",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Purple()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PublishedAt",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PublicKeyAlgorithm",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PublicKey",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Province",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Province",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProtocolID",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoReflect",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "ProtoReflect()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMinor",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMinor",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoMessage",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "ProtoMessage()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMajor",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMajor",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProductVerbose",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Product",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProcessState",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Process",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProbablyPrime",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "ProbablyPrime(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PreviousSessionID",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PrevSibling",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Prefix",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "Prefix()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PostalCode",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Postal",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PostParamsTotal",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "PostFormValue",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "PostFormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "PostFormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PostForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PositiveThresholdAverage",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PositiveSample",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Port",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Port()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/synscan.SynScanResult",
      "structNameShort": "SynScanResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "PopNArgs",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "PopNArgs(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "PopFnArgs",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "PopFnArgs(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "PopArgs",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "PopArgs(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Pop",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "Pop()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PolicyIdentifiers",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Pointer",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Pointer()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PocName",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PermittedURIDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedIPRanges",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedEmailAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedDNSDomainsCritical",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedDNSDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Perm",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Perm(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PeerCertificates",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Payloads",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Payload",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Password",
      "structName": "net/url.Userinfo",
      "structNameShort": "Userinfo",
      "methodsCompletion": "Password()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Password",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Password",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Part",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseMultipartForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ParseMultipartForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseMultipartForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "ParseForm()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ParseForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseForm()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseForm()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Parse",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Parse(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Parent",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ParamsHash",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "ParamsHash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Parameters",
      "structName": "crypto/x509/pkix.AlgorithmIdentifier",
      "structNameShort": "AlgorithmIdentifier",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Parameter",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Owner",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "Owner(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Owner",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "OverflowUint",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "OverflowUint(${1:v2 /*type: uint64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "OverflowInt",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "OverflowInt(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "OverflowFloat",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "OverflowFloat(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "OverflowComplex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "OverflowComplex(${1:v2 /*type: complex128*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "OutputLog",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "OutputLog(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Output",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Output()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Output",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "Output(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OrganizationalUnit",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Organization",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Organization",
      "structName": "palm/common/geo.ISP",
      "structNameShort": "ISP",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
<<<<<<< HEAD
    },
    {
      "isMethod": true,
      "fieldName": "Orange",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Orange()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Or",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Or(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
    },
    {
      "isMethod": true,
      "fieldName": "Orange",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Orange()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Or",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Or(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Opts",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OperationVerbose",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Open",
      "structName": "mime/multipart.FileHeader",
      "structNameShort": "FileHeader",
      "methodsCompletion": "Open()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Opaque",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "OnlyNeedPassword",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OnlyNeedPassword",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "OnHandle",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "OnHandle(${1:v2 /*type: func (v1: *facades.Notification) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OkToStop",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Ok",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Ok",
      "structName": "palm/common/utils/pingutil.PingResult",
      "structNameShort": "PingResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Object",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Object(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Object",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Object(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Object",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "Object()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Object",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OID",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "OCSPServer",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "OCSPResponse",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NumSubexp",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "NumSubexp()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NumMethod",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "NumMethod()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NumField",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "NumField()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NotBefore",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NotAfter",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Not",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Not(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NormFloat64",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "NormFloat64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NodeType",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "NodeType()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "NodeCount",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NoFixContentLength",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "NoFixContentLength",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "NextUpdate",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NextSibling",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NextRawPart",
      "structName": "mime/multipart.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "NextRawPart()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NextPart",
      "structName": "mime/multipart.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "NextPart()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NextCommand",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Next",
      "structName": "palm/common/yak/yaklang/exec.ReservedInstr",
      "structNameShort": "ReservedInstr",
      "methodsCompletion": "Next()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Next",
      "structName": "reflect.MapIter",
      "structNameShort": "MapIter",
      "methodsCompletion": "Next()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NewTreeDisconnectReq",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "NewTreeDisconnectReq(${1:v2 /*type: uint32*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NewTreeConnectReq",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "NewTreeConnectReq(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NewSessionSetup2Req",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "NewSessionSetup2Req()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NewSessionSetup1Req",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "NewSessionSetup1Req()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NewNegotiateReq",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "NewNegotiateReq()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "New",
      "structName": "sync.Pool",
      "structNameShort": "Pool",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NetworksWithin",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "NetworksWithin(${1:v2 /*type: *net.IPNet*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Networks",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Networks()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Network",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "Network()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NegotiatedProtocolIsMutual",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NegotiatedProtocol",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NegotiateProtocol",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "NegotiateProtocol()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NegativeThresholdAverage",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "NegativeSample",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Neg",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Neg(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Nanosecond",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Nanosecond()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Namespace",
      "structName": "golang.org/x/net/html.Attribute",
      "structNameShort": "org/x/net/html.Attribute",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Namespace",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Names",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Name",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Name()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Name",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "Name()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Mutex",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MultipartReader",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "MultipartReader()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MultipartReader",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "MultipartReader()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MultipartReader",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "MultipartReader()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "MultipartForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MulRange",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "MulRange(${1:v2 /*type: int64*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Mul",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Mul(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MoveToRoot",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToRoot()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveToPrevious",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToPrevious()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveToParent",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToParent()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveToNextAttribute",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToNextAttribute()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveToNext",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToNext()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveToFirst",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToFirst()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveToChild",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveToChild()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MoveTo",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "MoveTo(${1:v2 /*type: xpath.NodeNavigator*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Month",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Month()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Model",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Model",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Model",
      "structName": "palm/common/yakgrpc/yakit.Host",
      "structNameShort": "Host",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Model",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Model",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Model",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ModSqrt",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "ModSqrt(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ModInverse",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "ModInverse(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Mod",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Mod(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MirrorHTTPFlowEx",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "MirrorHTTPFlowEx(${1:v2 /*type: bool*/}, ${2:v3 /*type: bool*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: bytes*/}, ${5:v6 /*type: bytes*/}, ${6:v7 /*type: bytes*/}, ${7:v8 /*type: ...bool*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MirrorHTTPFlow",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "MirrorHTTPFlow(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: bytes*/}, ${5:v6 /*type: bytes*/}, ${6:v7 /*type: ...bool*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Minute",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Minute()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MethodByName",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "MethodByName(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Method",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Method",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Method",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Method",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Method(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Metadata",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MessageID",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MechTypes",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MechTokenMIC",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MechToken",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxPathLenZero",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxPathLen",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxConstraintComparisions",
      "structName": "crypto/x509.VerifyOptions",
      "structNameShort": "VerifyOptions",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxAge",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MatchedAt",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MatchString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "MatchString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MatchReader",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "MatchReader(${1:v2 /*type: io.RuneReader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Match",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Match(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Mask",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalText",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "MarshalText()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalText",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "MarshalText()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalJSON",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "MarshalJSON()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalJSON",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "MarshalJSON()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalBinary",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
      "methodsCompletion": "MarshalBinary(${1:v2 /*type: *encoder.Metadata*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalBinary",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "MarshalBinary()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalBinary",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "MarshalBinary()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaBlockData",
      "structNameShort": "JavaBlockData",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaClassData",
      "structNameShort": "JavaClassData",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaClassDesc",
      "structNameShort": "JavaClassDesc",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaClassFields",
      "structNameShort": "JavaClassFields",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaEndBlockData",
      "structNameShort": "JavaEndBlockData",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaNull",
      "structNameShort": "JavaNull",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaReference",
      "structNameShort": "JavaReference",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Marshal",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "Marshal()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Markdown",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "Markdown(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MapRange",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "MapRange()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MapKeys",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "MapKeys()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MapIndex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "MapIndex(${1:v2 /*type: reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Map",
      "structName": "palm/common/yserx.JavaClassDesc",
      "structNameShort": "JavaClassDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MakeTypeError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeTypeError(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeTypeError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeTypeError(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeSyntaxError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeSyntaxError(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeSyntaxError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeSyntaxError(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeRangeError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeRangeError(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeRangeError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeRangeError(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeCustomError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeCustomError(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MakeCustomError",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "MakeCustomError(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Lsh",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Lsh(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: uint*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LookupOffset",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "LookupOffset(${1:v2 /*type: net.IP*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LookupNetwork",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "LookupNetwork(${1:v2 /*type: net.IP*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Lookup",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Lookup(${1:v2 /*type: net.IP*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Longitude",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Longest",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Longest()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Lock",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Lock()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Lock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "Lock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Location",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "Location()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Location",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Location",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Location",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Location()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Locality",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "LocalPortCachedHistoryConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "LocalPort",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "LocalPath",
      "structName": "palm/common/yak/yaklib/tools.templateDesc",
      "structNameShort": "templateDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LocalName",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "LocalName()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Local",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Local()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LoadPluginContext",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "LoadPluginContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LoadPluginByName",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "LoadPluginByName(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []*ypb.ExecParamItem*/}, ${4:v5 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LoadPlugin",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "LoadPlugin(${1:v2 /*type: string*/}, ${2:v3 /*type: ...*ypb.ExecParamItem*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LoadPlugin",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "LoadPlugin(${1:v2 /*type: string*/}, ${2:v3 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LoadOrStore",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "LoadOrStore(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LoadHotPatch",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "LoadHotPatch(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LoadAndDelete",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "LoadAndDelete(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Load",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Load(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Lo",
      "structName": "unicode.CaseRange",
      "structNameShort": "CaseRange",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LiteralPrefix",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "LiteralPrefix()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Line",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "Line(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LikeSearchString",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "LikeSearchString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Level",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Level",
      "structName": "palm/common/yak/yaklib.YakitLog",
      "structNameShort": "YakitLog",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Length",
      "structName": "github.com/dlclark/regexp2.Capture",
      "structNameShort": "com/dlclark/regexp2.Capture",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Len",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "Len()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Len",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Len()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Len",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Len()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Latitude",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "LastChild",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Languages",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Language",
      "structName": "github.com/saintfish/chardet.Result",
      "structNameShort": "com/saintfish/chardet.Result",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Language",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "L",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Kind",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Kind()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "KeysByParent",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "KeysByParent()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "KeysByParent",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "KeysByParent()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
<<<<<<< HEAD
=======
      "fieldName": "KeysByParent",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "KeysByParent()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "fieldName": "Keys",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Keys()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Keys",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Keys()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "KeyUsages",
      "structName": "crypto/x509.VerifyOptions",
      "structNameShort": "VerifyOptions",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "KeyUsage",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Key",
      "structName": "golang.org/x/net/html.Attribute",
      "structNameShort": "org/x/net/html.Attribute",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Key",
      "structName": "palm/common/yak/yaklib.yakitGraphValue",
      "structNameShort": "yakitGraphValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Key",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Key",
      "structName": "reflect.MapIter",
      "structNameShort": "MapIter",
      "methodsCompletion": "Key()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Items",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IssuingCertificateURL",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Issuer",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Issuer",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Is_SC_WRITE_METHOD",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "Is_SC_WRITE_METHOD()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Is_SC_SERIALIZABLE",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "Is_SC_SERIALIZABLE()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Is_SC_EXTERNALIZABLE",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "Is_SC_EXTERNALIZABLE()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Is_SC_BLOCKDATA",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "Is_SC_BLOCKDATA()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsZero",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "IsZero()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsZero",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "IsZero()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsValid",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "IsValid()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsUndefined",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsUndefined()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsUint64",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "IsUint64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsString",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsString()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsString",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsSlice",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsSlice()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsSigningRequired",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsPrimitive",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsPrimitive()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsPositiveWithThreshold",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "IsPositiveWithThreshold(${1:v2 /*type: bytes*/}, ${2:v3 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsPositive",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "IsPositive(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsPrimitive",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsPrimitive()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsOpen",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "IsOpen()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsObject",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsObject()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsObject",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsObject()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNumber",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsNumber()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsNumber",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsNumber()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNull",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsNull()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsNull",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsNull()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsNull",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNil",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsNil()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNil",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "IsNil()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
<<<<<<< HEAD
      "fieldName": "IsNegativeWithThreshold",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "IsNegativeWithThreshold(${1:v2 /*type: bytes*/}, ${2:v3 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNegative",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "IsNegative(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "fieldName": "IsNaN",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsNaN()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsMap",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsMap()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsLong",
      "structName": "palm/common/yserx.JavaBlockData",
      "structNameShort": "JavaBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsLong",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsJavaNull",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "IsJavaNull()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsInt64",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "IsInt64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IsInPublicNet",
      "structName": "palm/common/yakgrpc/yakit.Host",
      "structNameShort": "Host",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsHTTPS",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsHTTPS",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsHTTPS",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsFunction",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsFunction()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsEmptyBody",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsEmptyBody()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsEmpty",
      "structName": "palm/common/yserx.JavaEndBlockData",
      "structNameShort": "JavaEndBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsEmpty",
      "structName": "palm/common/yserx.JavaNull",
      "structNameShort": "JavaNull",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsDir",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsDefined",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsDefined()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsDST",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "IsDST()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IsCompound",
      "structName": "encoding/asn1.RawValue",
      "structNameShort": "RawValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IsCA",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsBoolean",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "IsBoolean()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsBodyUrlEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsBodyUrlEncoded()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsBodyJsonEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsBodyJsonEncoded()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsBodyFormEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsBodyFormEncoded()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsAuthenticated",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsArray",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsArray()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsAbs",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "IsAbs()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Intn",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Intn(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Interrupt",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Intermediates",
      "structName": "crypto/x509.VerifyOptions",
      "structNameShort": "VerifyOptions",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "InterfaceData",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "InterfaceData()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Interface",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Interface()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int64",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Int64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int63n",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Int63n(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int63",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Int63()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int31n",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Int31n(${1:v2 /*type: int32*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int31",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Int31()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Int()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Int",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Int()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "InsertBefore",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "InsertBefore(${1:v2 /*type: *html.Node*/}, ${2:v3 /*type: *html.Node*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Insert",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Insert(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "InjectMethods",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "InjectMethods(${1:v2 /*type: any*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Info",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Info",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "Info(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Info",
      "structName": "palm/common/yak/yaklib/tools.templateDesc",
      "structNameShort": "templateDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Index",
      "structName": "github.com/dlclark/regexp2.Capture",
      "structNameShort": "com/dlclark/regexp2.Capture",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Index",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Index(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "In",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "In(${1:v2 /*type: *time.Location*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Id",
      "structName": "crypto/x509/pkix.Extension",
      "structNameShort": "Extension",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Id",
      "structName": "palm/common/yak/yaklib.yakitGraphValue",
      "structNameShort": "yakitGraphValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Id",
      "structName": "palm/common/yak/yaklib/tools.templateDesc",
      "structNameShort": "templateDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ISP",
      "structName": "palm/common/geo.ISP",
      "structNameShort": "ISP",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ISOWeek",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "ISOWeek()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IPVersion",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IPInteger",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IPInteger",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IPInteger",
      "structName": "palm/common/yakgrpc/yakit.Host",
      "structNameShort": "Host",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IPInteger",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IPInteger",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IPAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IPAddress",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IPAddr",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/utils/pingutil.PingResult",
      "structNameShort": "PingResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/yakgrpc/yakit.Host",
      "structNameShort": "Host",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ID",
      "structName": "github.com/jinzhu/gorm.Model",
      "structNameShort": "com/jinzhu/gorm.Model",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "HttpOnly",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "HttpFlows",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HtmlTitle",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HtmlTitle",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Hour",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Hour()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Hostname",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Hostname()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Hostname",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "palm/common/synscan.SynScanResult",
      "structNameShort": "SynScanResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hooks",
      "structName": "palm/common/yak.CallerHooks",
      "structNameShort": "CallerHooks",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hooks",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HookName",
      "structName": "palm/common/yak.CallerHooks",
      "structNameShort": "CallerHooks",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HookName",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HookName",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "History",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Histories",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
<<<<<<< HEAD
      "isMethod": true,
      "fieldName": "HijackSaveHTTPFlow",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "HijackSaveHTTPFlow(${1:v2 /*type: *yakit.HTTPFlow*/}, ${2:v3 /*type: func (v1: *yakit.HTTPFlow) */}, ${3:v4 /*type: func () */})",
      "isGolangBuildOrigin": false
    },
    {
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "isMethod": false,
      "fieldName": "Highlight",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hi",
      "structName": "unicode.CaseRange",
      "structNameShort": "CaseRange",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "mime/multipart.FileHeader",
      "structNameShort": "FileHeader",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "mime/multipart.Part",
      "structNameShort": "Part",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Head",
      "structName": "palm/common/yak/yaklib.YakitTable",
      "structNameShort": "YakitTable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "HaveDialFailed",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "HaveDialFailed()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Hash",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "Hash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hash",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hash",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hash",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hash",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hash",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "HasExpired",
      "structName": "crypto/x509/pkix.CertificateList",
      "structNameShort": "CertificateList",
      "methodsCompletion": "HasExpired(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "HandshakeComplete",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "HandleServiceScanResult",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "HandleServiceScanResult(${1:v2 /*type: *fp.MatchResult*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Handle",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Handle",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Handle",
      "structName": "palm/common/yserx.JavaReference",
      "structNameShort": "JavaReference",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Handle",
      "structName": "palm/common/yserx.JavaString",
      "structNameShort": "JavaString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HTTPTitle",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Groups",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "Groups()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GroupCount",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "GroupCount()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GroupByNumber",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "GroupByNumber(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GroupByName",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "GroupByName(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Group",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Grey",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Grey()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Green",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Green()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GobEncode",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "GobEncode()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GobEncode",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "GobEncode()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GobDecode",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "GobDecode(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GoString",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "GoString()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GetYakScriptName",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "GetYakScriptName()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetYakScriptId",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "GetYakScriptId()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetVerbose",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "GetVerbose()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "GetVar(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "GetVar(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetVar",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "GetVar(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetValue",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "GetValue()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetUrl",
      "structName": "palm/common/facades/ldap/ldapserver.LdapServer",
      "structNameShort": "LdapServer",
      "methodsCompletion": "GetUrl()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetType",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetType()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTriggerTimestamp",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetTriggerTimestamp()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTriggerTimestamp",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetTriggerTimestamp()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetToken",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetToken()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTimestamp",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetTimestamp()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTimestamp",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetTimestamp()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTimestamp",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetTimestamp()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "GetTimeout()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetTimeout",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "GetTimeout()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetSymNames",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "GetSymNames()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetSymNames",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "GetSymNames()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetSymNames",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "GetSymNames()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetSizeCachedHistoryConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetSizeCachedHistoryConnectionCount()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetSize",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetSize()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetServiceName",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetServiceName()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemoveHookID",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "GetRemoveHookID()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemotePort",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetRemotePort()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemotePort",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetRemotePort()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemoteIP",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetRemoteIP()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemoteIP",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetRemoteIP()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemoteAddr",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetRemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRemoteAddr",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetRemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetRaw",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetRaw()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetProto",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetProto()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetProcessingByTarget",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "GetProcessingByTarget(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetPostParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetPostParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetPostJsonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetPostJsonParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "GetParamsTotal",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetOsFile",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "GetOsFile()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetOriginHTTPRequest",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetOriginHTTPRequest()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetNativeCaller",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "GetNativeCaller()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetLocalPortCachedHistoryConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetLocalPortCachedHistoryConnectionCount()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetLocalPort",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetLocalPort()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetKey",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "GetKey()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHtmlTitle",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetHtmlTitle()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHooks",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "GetHooks()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHookName",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "GetHookName()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHookName",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "GetHookName()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHistory",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetHistory()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHistories",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetHistories()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHandle",
      "structName": "palm/common/yserx.JavaReference",
      "structNameShort": "JavaReference",
      "methodsCompletion": "GetHandle()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetHTTPHandler",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "GetHTTPHandler(${1:v2 /*type: bool*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetGetQueryParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetGetQueryParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetFntable",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "GetFntable()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetDomains",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetDomains()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetDomain",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "GetDomain()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentRemoteCachedConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetCurrentRemoteCachedConnectionCount()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentRemoteCachedConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "GetCurrentRemoteCachedConnectionCount()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentRemoteAddr",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "GetCurrentRemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentHooksGRPCModel",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "GetCurrentHooksGRPCModel()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentHooks",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "GetCurrentHooks()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentCount",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "GetCurrentCount()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCookieParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetCookieParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCommonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetCommonParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetClearAll",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "GetClearAll()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCPEs",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetCPEs()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "GetBody",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GetBanner",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetBanner()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetAllTargetsProcessing",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "GetAllTargetsProcessing()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetAddr",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "GetAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetAddr",
      "structName": "palm/common/facades/ldap/ldapserver.LdapServer",
      "structNameShort": "LdapServer",
      "methodsCompletion": "GetAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Get(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "sync.Pool",
      "structNameShort": "Pool",
      "methodsCompletion": "Get()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GCD",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "GCD(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/}, ${4:v5 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadKVPair",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzUploadKVPair(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadKVPair",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzUploadKVPair(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFileName",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzUploadFileName(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFileName",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzUploadFileName(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFile",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzUploadFile(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFile",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzUploadFile(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPostRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPostRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPostParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostParams",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPostParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostJsonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPostJsonParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostJsonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPostJsonParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPath",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPath(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPath",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPath(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzMethod",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzMethod(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzMethod",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzMethod(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzHTTPHeader",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzHTTPHeader(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzHTTPHeader",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzHTTPHeader(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParamsRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzGetParamsRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParamsRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzGetParamsRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzGetParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParams",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzGetParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzFormEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzFormEncoded(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzFormEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzFormEncoded(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookieRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzCookieRaw(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookieRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzCookieRaw(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookie",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzCookie(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookie",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzCookie(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FullBytes",
      "structName": "encoding/asn1.RawValue",
      "structNameShort": "RawValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "FromYakScript",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromTarget",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FromRegexp2Match",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "FromRegexp2Match(${1:v2 /*type: *regexp2.Match*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromModeRaw",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromFilter",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromEngine",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromDNSServer",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "From",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "From",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "From(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "From",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fragment",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Fragment",
      "structName": "palm/common/yak/yaklib.YakitHTTPFlowRisk",
      "structNameShort": "YakitHTTPFlowRisk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Format",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Format(${1:v2 /*type: fmt.State*/}, ${2:v3 /*type: int32*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Format",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Format(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormValue",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FormName",
      "structName": "mime/multipart.Part",
      "structNameShort": "Part",
      "methodsCompletion": "FormName()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormFile",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormFile",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FormFile",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Form",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ForceQuery",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Float64",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Float64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Float32",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "Float32()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Float",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Float()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Flags",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Flags",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "FirstChild",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "FinishingThreshold",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Finished",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
<<<<<<< HEAD
      "fieldName": "Fingerprints",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
=======
      "fieldName": "Finished",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
<<<<<<< HEAD
=======
      "isMethod": true,
      "fieldName": "Finish",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "Finish()",
      "isGolangBuildOrigin": false
    },
    {
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "isMethod": false,
      "fieldName": "Fingerprint",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fingerprint",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FindSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindSubmatchIndex(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindSubmatch(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindStringSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindStringSubmatchIndex(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindStringSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindStringSubmatch(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindStringIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindStringIndex(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindReaderSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindReaderSubmatchIndex(${1:v2 /*type: io.RuneReader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindReaderIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindReaderIndex(${1:v2 /*type: io.RuneReader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindIndex(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllSubmatchIndex(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllSubmatch(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllStringSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllStringSubmatchIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllStringSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllStringSubmatch(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllStringIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllStringIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllString(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllIndex(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAll",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAll(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Find",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Find(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FillDomainHTTPInfo",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "FillDomainHTTPInfo()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FillBytes",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "FillBytes(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Filename",
      "structName": "mime/multipart.FileHeader",
      "structNameShort": "FileHeader",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "FilePath",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FileName",
      "structName": "mime/multipart.Part",
      "structNameShort": "Part",
      "methodsCompletion": "FileName()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "File",
      "structName": "mime/multipart.Form",
      "structNameShort": "Form",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "File",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "File()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "File",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "File()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "File",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "File()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fields",
      "structName": "palm/common/yserx.JavaClassData",
      "structNameShort": "JavaClassData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fields",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fields",
      "structName": "palm/common/yserx.JavaClassFields",
      "structNameShort": "JavaClassFields",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FieldTypeVerbose",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FieldTypeVerbose",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FieldType",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FieldType",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FieldCount",
      "structName": "palm/common/yserx.JavaClassFields",
      "structNameShort": "JavaClassFields",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FieldByNameFunc",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "FieldByNameFunc(${1:v2 /*type: func (v1: string) return(bool) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FieldByName",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "FieldByName(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FieldByIndexErr",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "FieldByIndexErr(${1:v2 /*type: []int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FieldByIndex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "FieldByIndex(${1:v2 /*type: []int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Field",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Field(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FeedbackOrdinary",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "FeedbackOrdinary(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Feed",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "Feed(${1:v2 /*type: *bruteutils.BruteItem*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Fd",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Fd()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FastSetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "FastSetVar(${1:v2 /*type: int*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastSetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "FastSetVar(${1:v2 /*type: int*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastSetVar",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "FastSetVar(${1:v2 /*type: int*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastRefVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "FastRefVar(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastRefVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "FastRefVar(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastRefVar",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "FastRefVar(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastGetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "FastGetVar(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastGetVar",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "FastGetVar(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FastGetVar",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "FastGetVar(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ExtraNames",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtraFiles",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtraExtensions",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExternalHost",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Extensions",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Extensions",
      "structName": "crypto/x509/pkix.RevokedCertificate",
      "structNameShort": "RevokedCertificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Extensions",
      "structName": "crypto/x509/pkix.TBSCertificateList",
      "structNameShort": "TBSCertificateList",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtKeyUsage",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Exports",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Exports()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exports",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Exports()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exports",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "Exports()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExportKeyingMaterial",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "ExportKeyingMaterial(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Export",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "Export()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Expires",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ExpandString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ExpandString(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: []int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Expand",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Expand(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: []int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ExpFloat64",
      "structName": "math/rand.Rand",
      "structNameShort": "Rand",
      "methodsCompletion": "ExpFloat64()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Exp",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Exp(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Exist",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Exist(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecFirst",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "ExecFirst(${1:v2 /*type: ...mutate.httpPoolConfigOption*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecFirst",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "ExecFirst(${1:v2 /*type: ...mutate.httpPoolConfigOption*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecDefers",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ExecDefers()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecDefers",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ExecDefers()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecDefers",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "ExecDefers()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecBlock",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ExecBlock(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: map[string]int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecBlock",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "ExecBlock(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: map[string]int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ExecBlock",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "ExecBlock(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: map[string]int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Exec(${1:v2 /*type: ...mutate.httpPoolConfigOption*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Exec(${1:v2 /*type: ...mutate.httpPoolConfigOption*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Exec(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "Exec(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: *exec.Stack*/}, ${4:v5 /*type: *exec.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/yak/yaklib/tools.PocInvoker",
      "structNameShort": "PocInvoker",
      "methodsCompletion": "Exec(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedURIDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedIPRanges",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedEmailAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedDNSDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Eval",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Eval(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Eval",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Eval(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Eval",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Eval(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "EscapedPath",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "EscapedPath()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "EscapedFragment",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "EscapedFragment()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Error",
      "structName": "errors.errorString",
      "structNameShort": "errorString",
      "methodsCompletion": "Error()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Error",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Error",
      "structName": "palm/common/yak/yaklib.YakitClient",
      "structNameShort": "YakitClient",
      "methodsCompletion": "Error(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Equal",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "Equal(${1:v2 /*type: *x509.Certificate*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Equal",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Equal(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Env",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Engine",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "EmailAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Element2",
      "structName": "palm/common/go-funk.Tuple",
      "structNameShort": "Tuple",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Element1",
      "structName": "palm/common/go-funk.Tuple",
      "structNameShort": "Tuple",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Elem",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Elem()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Edition",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "DynamicProxyClassInterfaceNames",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "DynamicProxyClassInterfaceCount",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "DynamicProxyClass",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "DynamicProxyAnnotation",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "DurationMs",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Dump",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "Dump(${1:v2 /*type: ...int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Done",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "Done()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Done",
      "structName": "sync.WaitGroup",
      "structNameShort": "WaitGroup",
      "methodsCompletion": "Done()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Domains",
      "structName": "palm/common/yakgrpc/yakit.Host",
      "structNameShort": "Host",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Domains",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Domain",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Domain",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Domain",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Domain",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Do",
      "structName": "sync.Once",
      "structNameShort": "Once",
      "methodsCompletion": "Do(${1:v2 /*type: func () */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Divider",
      "structName": "palm/common/yakgrpc/yakit.Report",
      "structNameShort": "Report",
      "methodsCompletion": "Divider()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "DivMod",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "DivMod(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Div",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Div(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Dir",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DidResume",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Dialects",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DialectCount",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DeviceType",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Details",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Detail",
      "structName": "palm/common/yserx.JavaClassDesc",
      "structNameShort": "JavaClassDesc",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/cybertunnel/tpb.DNSLogEvent",
      "structNameShort": "DNSLogEvent",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/yakgrpc/ypb.ExecParamItem",
      "structNameShort": "ExecParamItem",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHookItem",
      "structNameShort": "YakScriptHookItem",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Descriptor",
      "structName": "palm/common/yakgrpc/ypb.YakScriptHooks",
      "structNameShort": "YakScriptHooks",
      "methodsCompletion": "Descriptor()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Description",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DescFlag",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Delta",
      "structName": "palm/common/yak/yaklang/exec.ReservedInstr",
      "structNameShort": "ReservedInstr",
      "methodsCompletion": "Delta(${1:v2 /*type: exec.ReservedInstr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Delta",
      "structName": "unicode.CaseRange",
      "structNameShort": "CaseRange",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DeletedAt",
      "structName": "github.com/jinzhu/gorm.Model",
      "structNameShort": "com/jinzhu/gorm.Model",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Delete",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Delete(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Decode",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Decode(${1:v2 /*type: uintptr*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Debug",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "Debug(${1:v2 /*type: string*/}, ${2:v3 /*type: error*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Day",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Day()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Date",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Date()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DatabaseType",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DataAtom",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Data",
      "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
      "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Data",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Data",
      "structName": "palm/common/yak/yaklib.YakitFixedTableData",
      "structNameShort": "YakitFixedTableData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Data",
      "structName": "palm/common/yak/yaklib.YakitGraph",
      "structNameShort": "YakitGraph",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Data",
      "structName": "palm/common/yak/yaklib.YakitLog",
      "structNameShort": "YakitLog",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Data",
      "structName": "palm/common/yak/yaklib.YakitTable",
      "structNameShort": "YakitTable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "DNSNames",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DNSName",
      "structName": "crypto/x509.VerifyOptions",
      "structNameShort": "VerifyOptions",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cyan",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Cyan()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CurrentTime",
      "structName": "crypto/x509.VerifyOptions",
      "structNameShort": "VerifyOptions",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "CurrentRemoteCachedConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CurrentRemoteCachedConnectionCount",
      "structName": "palm/common/cybertunnel/tpb.RandomPortTriggerEvent",
      "structNameShort": "RandomPortTriggerEvent",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CurrentRemoteAddr",
      "structName": "palm/common/cybertunnel/tpb.ICMPTriggerNotification",
      "structNameShort": "ICMPTriggerNotification",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Current",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "Current()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Critical",
      "structName": "crypto/x509/pkix.Extension",
      "structNameShort": "Extension",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Credits",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "CreditCharge",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "CreatedAt",
      "structName": "github.com/jinzhu/gorm.Model",
      "structNameShort": "com/jinzhu/gorm.Model",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CreateCRL",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CreateCRL(${1:v2 /*type: io.Reader*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: []pkix.RevokedCertificate*/}, ${4:v5 /*type: time.Time*/}, ${5:v6 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Country",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Country",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CopyVars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "CopyVars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CopyVars",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "CopyVars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CopyVars",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "CopyVars()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Copy",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Copy()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Copy",
      "structName": "palm/common/utils/htmlquery.NodeNavigator",
      "structNameShort": "NodeNavigator",
      "methodsCompletion": "Copy()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Copy",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Copy()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CookieParamsTotal",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Cookie",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Cookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ConvertRemoteAddr",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "ConvertRemoteAddr(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Convert",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Convert(${1:v2 /*type: reflect.Type*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Continent",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ContextSkip",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "ContextSkip(${1:v2 /*type: int*/}, ${2:v3 /*type: bool*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ContextSkip",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "ContextSkip(${1:v2 /*type: int*/}, ${2:v3 /*type: bool*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ContextLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "ContextLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ContextLimit",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "ContextLimit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Context",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Contents",
      "structName": "palm/common/yserx.JavaBlockData",
      "structNameShort": "JavaBlockData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ContentType",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ContentLength",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ContentLength",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Contains",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "Contains(${1:v2 /*type: net.IP*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Conn",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ConfirmHttps",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Confidence",
      "structName": "github.com/saintfish/chardet.Result",
      "structNameShort": "com/saintfish/chardet.Result",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Complex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Complex()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CompileWithSourceMap",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "CompileWithSourceMap(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Compile",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Compile(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "CommonName",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Command",
      "structName": "github.com/stacktitan/smb/smb.Header",
      "structNameShort": "com/stacktitan/smb/smb.Header",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CombinedOutput",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "CombinedOutput()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ColorSharp",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "ColorSharp(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CodeLine",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "CodeLine(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Code",
      "structName": "palm/common/yak/yaklang/exec.Context",
      "structNameShort": "Context",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CmpAbs",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "CmpAbs(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cmp",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Cmp(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CloseWithError",
      "structName": "io.PipeReader",
      "structNameShort": "PipeReader",
      "methodsCompletion": "CloseWithError(${1:v2 /*type: error*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CloseWithError",
      "structName": "io.PipeWriter",
      "structNameShort": "PipeWriter",
      "methodsCompletion": "CloseWithError(${1:v2 /*type: error*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "github.com/stacktitan/smb/smb.Session",
      "structNameShort": "com/stacktitan/smb/smb.Session",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "io.PipeReader",
      "structNameShort": "PipeReader",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "io.PipeWriter",
      "structNameShort": "PipeWriter",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "mime/multipart.Part",
      "structNameShort": "Part",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "net.UDPConn",
      "structNameShort": "UDPConn",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Close",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Close",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib.udpConn",
      "structNameShort": "udpConn",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Clone",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Clone",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Clone",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Clock",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Clock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ClientStartTime",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ClientGuid",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ClearAll",
      "structName": "palm/common/yakgrpc/ypb.RemoveHookParams",
      "structNameShort": "RemoveHookParams",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ClassNameFactory",
      "structName": "palm/common/facades.FacadeServer",
      "structNameShort": "FacadeServer",
      "methodsCompletion": "ClassNameFactory(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ClassName1",
      "structName": "palm/common/yserx.JavaClassField",
      "structNameShort": "JavaClassField",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ClassName",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ClassDesc",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Class",
      "structName": "encoding/asn1.RawValue",
      "structNameShort": "RawValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Class",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Class()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Class",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Class()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Class",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "Class()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Claims",
      "structName": "github.com/dgrijalva/jwt-go.Token",
      "structNameShort": "com/dgrijalva/jwt-go.Token",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cl",
      "structName": "palm/common/yak/yaklang.YakEngine",
      "structNameShort": "YakEngine",
      "methodsCompletion": "Cl(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "City",
      "structName": "palm/common/geo.City",
      "structNameShort": "City",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "City",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CipherSuite",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Chown",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Chown(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Chmod",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Chmod(${1:v2 /*type: fs.FileMode*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CheckSignatureFrom",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CheckSignatureFrom(${1:v2 /*type: *x509.Certificate*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CheckSignature",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CheckSignature(${1:v2 /*type: x509.SignatureAlgorithm*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CheckConst",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "CheckConst(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CheckCRLSignature",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CheckCRLSignature(${1:v2 /*type: *pkix.CertificateList*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Chdir",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Chdir()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Charset",
      "structName": "github.com/saintfish/chardet.Result",
      "structNameShort": "com/saintfish/chardet.Result",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Channel",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Captures",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Capture",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Capabilities",
      "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
      "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Capabilities",
      "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
      "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cap",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Cap()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Cancel",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanUint",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanUint()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanSet",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanSet()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanInterface",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanInterface()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanInt",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanInt()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanFloat",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanFloat()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanConvert",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanConvert(${1:v2 /*type: reflect.Type*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanComplex",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanComplex()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CanAddr",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CanAddr()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Callable",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "Callable()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CallSlice",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "CallSlice(${1:v2 /*type: []reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CallPluginKeyByNameEx",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "CallPluginKeyByNameEx(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...func() any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CallPluginKeyByName",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "CallPluginKeyByName(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
<<<<<<< HEAD
      "fieldName": "CallHijackRequest",
      "structName": "palm/common/yak.MixPluginCaller",
      "structNameShort": "MixPluginCaller",
      "methodsCompletion": "CallHijackRequest(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func () return(any) */}, ${4:v5 /*type: func () return(any) */}, ${5:v6 /*type: func () return(any) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "fieldName": "CallByNameEx",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "CallByNameEx(${1:v2 /*type: string*/}, ${2:v3 /*type: ...func() any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CallByName",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "CallByName(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Call",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Call",
      "structName": "github.com/robertkrimen/otto.Object",
      "structNameShort": "com/robertkrimen/otto.Object",
      "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Call",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: ...any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Call",
      "structName": "github.com/robertkrimen/otto.Otto",
      "structNameShort": "com/robertkrimen/otto.Otto",
      "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: ...any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Call",
      "structName": "github.com/robertkrimen/otto.Value",
      "structNameShort": "com/robertkrimen/otto.Value",
      "methodsCompletion": "Call(${1:v2 /*type: otto.Value*/}, ${2:v3 /*type: ...any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Call",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Call(${1:v2 /*type: []reflect.Value*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CalcHash",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "CalcHash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CalcHash",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "CalcHash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CalcHash",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "CalcHash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "CalcHash",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "CalcHash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CRLDistributionPoints",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "CPEs",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CPEs",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CPEFromUrls",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CPE",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "C",
      "structName": "time.Ticker",
      "structNameShort": "Ticker",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "C",
      "structName": "time.Timer",
      "structNameShort": "Timer",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Bytescode",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Bytes",
      "structName": "encoding/asn1.BitString",
      "structNameShort": "BitString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Bytes",
      "structName": "encoding/asn1.RawValue",
      "structNameShort": "RawValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Bytes",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Bytes()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Bytes",
      "structName": "palm/common/yserx.JavaArray",
      "structNameShort": "JavaArray",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Bytes",
      "structName": "palm/common/yserx.JavaFieldValue",
      "structNameShort": "JavaFieldValue",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Bytes",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Bytes()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BuildIn",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "BuildEpoch",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Broadcast",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "Broadcast()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Bool",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Bool()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BodyLength",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Body",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Body",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Blue",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "Blue()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "BlockData",
      "structName": "palm/common/yserx.JavaClassData",
      "structNameShort": "JavaClassData",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Block",
      "structName": "palm/common/yak/yaklang/exec.Code",
      "structNameShort": "Code",
      "methodsCompletion": "Block(${1:v2 /*type: ...exec.Instr*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Bits",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Bits()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BitLength",
      "structName": "encoding/asn1.BitString",
      "structNameShort": "BitString",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "BitLen",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "BitLen()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Bit",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Bit(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Binomial",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Binomial(${1:v2 /*type: int64*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BinaryFormatMinorVersion",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BinaryFormatMajorVersion",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "BeforeSave",
      "structName": "palm/common/yakgrpc/yakit.Domain",
      "structNameShort": "Domain",
      "methodsCompletion": "BeforeSave()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BeforeSave",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "BeforeSave()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BeforeSave",
      "structName": "palm/common/yakgrpc/yakit.Port",
      "structNameShort": "Port",
      "methodsCompletion": "BeforeSave()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BeforeSave",
      "structName": "palm/common/yakgrpc/yakit.ReportRecord",
      "structNameShort": "ReportRecord",
      "methodsCompletion": "BeforeSave()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BeforeSave",
      "structName": "palm/common/yakgrpc/yakit.Risk",
      "structNameShort": "Risk",
      "methodsCompletion": "BeforeSave()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Before",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Before(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BasicConstraintsValid",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "BasicAuth",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "BasicAuth()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "BasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "BasicAuth()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "BasicAuth()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BaseFrame",
      "structName": "palm/common/yak/yaklang/exec.Stack",
      "structNameShort": "Stack",
      "methodsCompletion": "BaseFrame()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Banner",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
<<<<<<< HEAD
      "fieldName": "Banner",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
=======
>>>>>>> 5e5b78ae3002dc8da92558292279dd12104a1c48
      "fieldName": "AutonomousSystemOrganization",
      "structName": "palm/common/geo.ISP",
      "structNameShort": "ISP",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "AutonomousSystemNumber",
      "structName": "palm/common/geo.ISP",
      "structNameShort": "ISP",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "AuthorityKeyId",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Attr",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "At",
      "structName": "encoding/asn1.BitString",
      "structNameShort": "BitString",
      "methodsCompletion": "At(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Asn",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Args",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AppendFormat",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "AppendFormat(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AppendChild",
      "structName": "golang.org/x/net/html.Node",
      "structNameShort": "org/x/net/html.Node",
      "methodsCompletion": "AppendChild(${1:v2 /*type: *html.Node*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AppendCertsFromPEM",
      "structName": "crypto/x509.CertPool",
      "structNameShort": "CertPool",
      "methodsCompletion": "AppendCertsFromPEM(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Append",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Append(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Append",
      "structName": "palm/common/yak/yaklib.YakitTable",
      "structNameShort": "YakitTable",
      "methodsCompletion": "Append(${1:v2 /*type: ...any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Annotations",
      "structName": "palm/common/yserx.JavaClassDetails",
      "structNameShort": "JavaClassDetails",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AndNot",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "AndNot(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "And",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "And(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Algorithm",
      "structName": "crypto/x509/pkix.AlgorithmIdentifier",
      "structNameShort": "AlgorithmIdentifier",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "After",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "After(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AdjustPositiveThreshold",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "AdjustPositiveThreshold(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AdjustNegativeThreshold",
      "structName": "palm/common/utils/comparer.Discriminator",
      "structNameShort": "Discriminator",
      "methodsCompletion": "AdjustNegativeThreshold(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Addr",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Addr",
      "structName": "reflect.Value",
      "structNameShort": "Value",
      "methodsCompletion": "Addr()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AddWithContext",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "AddWithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddTag",
      "structName": "palm/common/yakgrpc/yakit.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "AddTag(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddForYakit",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "AddForYakit(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []*ypb.ExecParamItem*/}, ${4:v5 /*type: string*/}, ${5:v6 /*type: interface { Send(*ypb.ExecResult) error }*/}, ${6:v7 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddDate",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "AddDate(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AddCookie",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AddCookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddCookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddCert",
      "structName": "crypto/x509.CertPool",
      "structNameShort": "CertPool",
      "methodsCompletion": "AddCert(${1:v2 /*type: *x509.Certificate*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Add(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "Add()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "palm/common/yak.YakToCallerManager",
      "structNameShort": "YakToCallerManager",
      "methodsCompletion": "Add(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []*ypb.ExecParamItem*/}, ${4:v5 /*type: string*/}, ${5:v6 /*type: func (v1: *yaklang.YakEngine) return(error) */}, ${6:v7 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "palm/common/yak/yaklib.YakitGraph",
      "structNameShort": "YakitGraph",
      "methodsCompletion": "Add(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "sync.WaitGroup",
      "structNameShort": "WaitGroup",
      "methodsCompletion": "Add(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Add(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Abs",
      "structName": "math/big.Int",
      "structNameShort": "Int",
      "methodsCompletion": "Abs(${1:v2 /*type: *big.Int*/})",
      "isGolangBuildOrigin": true
    }
  ]
}