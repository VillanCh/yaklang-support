{
  "libNames": [
    "cli",
    "codec",
    "context",
    "crawler",
    "dictutil",
    "dyn",
    "exec",
    "file",
    "fuzz",
    "http",
    "httpool",
    "httpserver",
    "io",
    "json",
    "log",
    "mitm",
    "mmdb",
    "nuclei",
    "os",
    "re",
    "servicescan",
    "spacengine",
    "str",
    "subdomain",
    "sync",
    "synscan",
    "tcp",
    "time",
    "tls",
    "tools"
  ],
  "libCompletions": [
    {
      "libName": "tools",
      "prefix": "tools.",
      "functions": [
        {
          "functionName": "NewPocInvoker()",
          "document": "",
          "definitionStr": "func tools.NewPocInvoker() return (r0: *tools.PocInvoker, r1: error)"
        },
        {
          "functionName": "NewBruteUtil(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func tools.NewBruteUtil(v1: string) return (r0: *bruteutils.BruteUtil, r1: error)"
        }
      ]
    },
    {
      "libName": "tls",
      "prefix": "tls.",
      "functions": [
        {
          "functionName": "SignX509ServerCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个服务端证书，带x509认证",
          "definitionStr": "func tls.SignX509ServerCertAndKey(caCert: bytes, caKey: bytes) return (cert: bytes, key: bytes, r2: error)"
        },
        {
          "functionName": "SignX509ClientCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个带 x509 认证的客户端证书",
          "definitionStr": "func tls.SignX509ClientCertAndKey(caCert: bytes, caKey: bytes) return (clientCert: bytes, clientKey: bytes, r2: error)"
        },
        {
          "functionName": "SignServerCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个服务端证书，不带 x509 认证",
          "definitionStr": "func tls.SignServerCertAndKey(caCert: bytes, caKey: bytes) return (serverCert: bytes, serverKey: bytes, r2: error)"
        },
        {
          "functionName": "SignClientCertAndKey(${1:caCert/*type: bytes*/}, ${2:pKey/*type: bytes*/})",
          "document": "签发一个客户端证书，不带x509认证",
          "definitionStr": "func tls.SignClientCertAndKey(caCert: bytes, pKey: bytes) return (clientCert: bytes, clientKey: bytes, r2: error)"
        },
        {
          "functionName": "GenerateRootCA(${1:commonName/*type: string*/})",
          "document": "签发一个 CA 证书",
          "definitionStr": "func tls.GenerateRootCA(commonName: string) return (cert: bytes, privateKey: bytes, r2: error)"
        }
      ]
    },
    {
      "libName": "time",
      "prefix": "time.",
      "functions": [
        {
          "functionName": "sleep(${1:seconds/*type: float64*/})",
          "document": "sleep 一段时间",
          "definitionStr": "`func time.sleep(seconds: float64)`"
        },
        {
          "functionName": "now()",
          "document": "当前时间",
          "definitionStr": "func time.now() return (r0: time.Time)"
        },
        {
          "functionName": "Until(${1:end/*type: time.Time*/})",
          "document": "计算当前时间到目标时间的时间间隔",
          "definitionStr": "func time.Until(end: time.Time) return (r0: time.Duration)"
        },
        {
          "functionName": "Unix(${1:timestampSeconds/*type: int64*/}, ${2:nano/*type: int64*/})",
          "document": "使用 Unix 时间戳构建一个时间",
          "definitionStr": "func time.Unix(timestampSeconds: int64, nano: int64) return (r0: time.Time)"
        },
        {
          "functionName": "Sleep(${1:seconds/*type: float64*/})",
          "document": "sleep 一段时间",
          "definitionStr": "`func time.Sleep(seconds: float64)`"
        },
        {
          "functionName": "Since(${1:start/*type: time.Time*/})",
          "document": "计算一个时间到现在的时间差",
          "definitionStr": "func time.Since(start: time.Time) return (r0: time.Duration)"
        },
        {
          "functionName": "ParseDuration(${1:v1/*type: string*/})",
          "document": "把一个字符串时间解析成 `time.Duration`",
          "definitionStr": "func time.ParseDuration(v1: string) return (r0: time.Duration, r1: error)"
        },
        {
          "functionName": "Parse(${1:timeStr/*type: string*/}, ${2:format/*type: string*/})",
          "document": "把时间按照一定规则进行解析（遵循 Golang 的规则）",
          "definitionStr": "func time.Parse(timeStr: string, format: string) return (r0: time.Time, r1: error)"
        },
        {
          "functionName": "Now()",
          "document": "获取当前时间",
          "definitionStr": "func time.Now() return (r0: time.Time)"
        },
        {
          "functionName": "NewTimer(${1:seconds/*type: float64*/})",
          "document": "设置一个新的定时器，seconds 秒之后触发",
          "definitionStr": "func time.NewTimer(seconds: float64) return (r0: *time.Timer)"
        },
        {
          "functionName": "NewTicker(${1:seconds/*type: float64*/})",
          "document": "获取一个 seconds 的 ticker，每隔 seconds 秒触发一次",
          "definitionStr": "func time.NewTicker(seconds: float64) return (r0: *time.Ticker)"
        },
        {
          "functionName": "GetCurrentMonday()",
          "document": "或者当前周的周一日期",
          "definitionStr": "func time.GetCurrentMonday() return (r0: time.Time, r1: error)"
        },
        {
          "functionName": "GetCurrentDate()",
          "document": "获得当前今天的日期",
          "definitionStr": "func time.GetCurrentDate() return (r0: time.Time, r1: error)"
        },
        {
          "functionName": "AfterFunc(${1:v1/*type: time.Duration*/}, ${2:v2/*type: func () */})",
          "document": "一段时间之后执行一个函数",
          "definitionStr": "func time.AfterFunc(v1: time.Duration, v2: func () ) return (r0: *time.Timer)"
        },
        {
          "functionName": "After(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "func time.After(v1: float64) return (r0: \u003c-chan time.Time)"
        }
      ]
    },
    {
      "libName": "tcp",
      "prefix": "tcp.",
      "functions": [
        {
          "functionName": "serverTls(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【服务端参数】设置 SSL/TLS 服务器",
          "definitionStr": "func tcp.serverTls(cert: any, key: any, caCerts ...any) return (r0: func tcpServerConfigOpt(v1: *yaklib.tcpServerConfig) )"
        },
        {
          "functionName": "serverContext(${1:ctx/*type: context.Context*/})",
          "document": "【服务端参数】设置服务端上下文，用于控制服务器生命周期",
          "definitionStr": "func tcp.serverContext(ctx: context.Context) return (r0: func tcpServerConfigOpt(v1: *yaklib.tcpServerConfig) )"
        },
        {
          "functionName": "serverCallback(${1:v1/*type: func (v1: *yaklib.tcpConnection) */})",
          "document": "【服务端参数】设置服务端连接处理回调函数",
          "definitionStr": "func tcp.serverCallback(v1: func (v1: *yaklib.tcpConnection) ) return (r0: func tcpServerConfigOpt(v1: *yaklib.tcpServerConfig) )"
        },
        {
          "functionName": "clientTls(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【客户端参数】设置 TLS/SSL",
          "definitionStr": "func tcp.clientTls(cert: any, key: any, caCerts ...any) return (r0: func dialerOpt(v1: *yaklib._tcpDialer) )"
        },
        {
          "functionName": "clientTimeout(${1:seconds/*type: float64*/})",
          "document": "【客户端参数】设置超时时间",
          "definitionStr": "func tcp.clientTimeout(seconds: float64) return (r0: clientOpt)"
        },
        {
          "functionName": "clientLocal(${1:host/*type: any*/})",
          "document": "【客户端参数】设置客户端本地地址",
          "definitionStr": "func tcp.clientLocal(host: any) return (r0: clientOpt)"
        },
        {
          "functionName": "Serve(${1:host/*type: any*/}, ${2:port/*type: int*/}, ${3:params/*type ...serverOpt*/})",
          "document": "启动一个 tcp 服务器",
          "definitionStr": "func tcp.Serve(host: any, port: int, params ...serverOpt) return (r0: error)"
        },
        {
          "functionName": "Forward(${1:localPort/*type: int*/}, ${2:remoteHost/*type: string*/}, ${3:remotePort/*type: int*/})",
          "document": "转发 TCP 链接，在本地开一个 TCP 服务器，把到这个服务器的链接转发到远程端口上",
          "definitionStr": "func tcp.Forward(localPort: int, remoteHost: string, remotePort: int) return (r0: error)"
        },
        {
          "functionName": "Connect(${1:host/*type: string*/}, ${2:port/*type: any*/}, ${3:params/*type ...clientOpt*/})",
          "document": "",
          "definitionStr": "func tcp.Connect(host: string, port: any, params ...clientOpt) return (conn: *yaklib.tcpConnection, r1: error)"
        }
      ]
    },
    {
      "libName": "synscan",
      "prefix": "synscan.",
      "functions": [
        {
          "functionName": "wait(${1:v1/*type: float64*/})",
          "document": "【参数】当所有数据包发出之后，等待多少秒？",
          "definitionStr": "func synscan.wait(v1: float64) return (r0: func scanOpt(v1: *tools._yakPortScanConfig) )"
        },
        {
          "functionName": "outputPrefix(${1:prefix/*type: string*/})",
          "document": "【参数】输出的文件每一行的前缀（用于增加 `https://` 这样的协议名等）",
          "definitionStr": "func synscan.outputPrefix(prefix: string) return (r0: opt)"
        },
        {
          "functionName": "outputFile(${1:v1/*type: string*/})",
          "document": "【参数】synscan 对外输出的文件",
          "definitionStr": "func synscan.outputFile(v1: string) return (r0: opt)"
        },
        {
          "functionName": "Scan(${1:hosts/*type: string*/}, ${2:ports/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "SYN 扫描的核心功能函数",
          "definitionStr": "func synscan.Scan(hosts: string, ports: string, params ...opt) return (resultChan: chan *tools.SynScanResult, r1: error)"
        }
      ]
    },
    {
      "libName": "sync",
      "prefix": "sync.",
      "functions": [
        {
          "functionName": "NewWaitGroup()",
          "document": "",
          "definitionStr": "func sync.NewWaitGroup() return (r0: *sync.WaitGroup)"
        },
        {
          "functionName": "NewSizedWaitGroup(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func sync.NewSizedWaitGroup(v1: int) return (r0: *utils.SizedWaitGroup)"
        },
        {
          "functionName": "NewRWMutex()",
          "document": "",
          "definitionStr": "func sync.NewRWMutex() return (r0: *sync.RWMutex)"
        },
        {
          "functionName": "NewPool()",
          "document": "",
          "definitionStr": "func sync.NewPool() return (r0: *sync.Pool)"
        },
        {
          "functionName": "NewOnce()",
          "document": "",
          "definitionStr": "func sync.NewOnce() return (r0: *sync.Once)"
        },
        {
          "functionName": "NewMutex()",
          "document": "",
          "definitionStr": "func sync.NewMutex() return (r0: *sync.Mutex)"
        },
        {
          "functionName": "NewMap()",
          "document": "",
          "definitionStr": "func sync.NewMap() return (r0: *sync.Map)"
        },
        {
          "functionName": "NewLock()",
          "document": "",
          "definitionStr": "func sync.NewLock() return (r0: *sync.Mutex)"
        },
        {
          "functionName": "NewCond()",
          "document": "",
          "definitionStr": "func sync.NewCond() return (r0: *sync.Cond)"
        }
      ]
    },
    {
      "libName": "subdomain",
      "prefix": "subdomain.",
      "functions": [
        {
          "functionName": "workerConcurrent(${1:concurrent/*type: int*/})",
          "document": "发送 DNS 请求的最大并发（同时允许多少个 DNS 请求同时发出？）主要用于控制速率",
          "definitionStr": "func subdomain.workerConcurrent(concurrent: int) return (r0: subdomain.param)"
        },
        {
          "functionName": "wildcardToStop(${1:v1/*type: bool*/})",
          "document": "遇到泛解析就停止",
          "definitionStr": "func subdomain.wildcardToStop(v1: bool) return (r0: subdomain.param)"
        },
        {
          "functionName": "targetTimeout(${1:seconds/*type: float64*/})",
          "document": "每一个目标应该最多爆破多久？单个目标的超时时间",
          "definitionStr": "func subdomain.targetTimeout(seconds: float64) return (r0: subdomain.param)"
        },
        {
          "functionName": "targetConcurrent(${1:concurrent/*type: int*/})",
          "document": "针对多个目标进行并发爆破的时候，通过这个选项设置并发",
          "definitionStr": "func subdomain.targetConcurrent(concurrent: int) return (r0: subdomain.param)"
        },
        {
          "functionName": "recursiveDict(${1:dict/*type: string|fileName|[]string|bytes|reader*/})",
          "document": "如果开启了递归，则可以设置递归字典（默认自带一个小字典）",
          "definitionStr": "func subdomain.recursiveDict(dict: string|fileName|[]string|bytes|reader) return (r0: subdomain.param)"
        },
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "是否开启递归爆破",
          "definitionStr": "func subdomain.recursive(v1: bool) return (r0: subdomain.param)"
        },
        {
          "functionName": "maxDepth(${1:depth/*type: int*/})",
          "document": "设置递归爆破的最大深度",
          "definitionStr": "func subdomain.maxDepth(depth: int) return (r0: subdomain.param)"
        },
        {
          "functionName": "mainDict(${1:dict/*type: string|[]string|fileName|bytes|reader*/})",
          "document": "子域名爆破使用的主字典（字典名/字典内容[]string/bytes/reader）均支持",
          "definitionStr": "func subdomain.mainDict(dict: string|[]string|fileName|bytes|reader) return (r0: subdomain.param)"
        },
        {
          "functionName": "eachSearchTimeout(${1:seconds/*type: float64*/})",
          "document": "每次调用第三方接口进行子域名搜索的时候，HTTP 请求的超时时间",
          "definitionStr": "func subdomain.eachSearchTimeout(seconds: float64) return (r0: subdomain.param)"
        },
        {
          "functionName": "eachQueryTimeout(${1:seconds/*type: float64*/})",
          "document": "每一次 DNS 请求发送的超时时间",
          "definitionStr": "func subdomain.eachQueryTimeout(seconds: float64) return (r0: subdomain.param)"
        },
        {
          "functionName": "dnsServer(${1:servers/*type: []string*/})",
          "document": "为扫描过程设置自定义 dnsServer",
          "definitionStr": "func subdomain.dnsServer(servers: []string) return (r0: subdomain.param)"
        },
        {
          "functionName": "Scan(${1:domains/*type: []string|string|bytes*/}, ${2:params/*type ...subdomain.param*/})",
          "document": "扫描子域名的核心函数，通过和这个函数，输入想要扫描的子域名和相关参数",
          "definitionStr": "func subdomain.Scan(domains: []string|string|bytes, params subdomain.param) return (resultsChannel: chan *subdomain.SubdomainResult, err: error)"
        }
      ]
    },
    {
      "libName": "str",
      "prefix": "str.",
      "functions": [
        {
          "functionName": "f(${1:strFmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "相当于 `fmt.Sprintf`",
          "definitionStr": "func str.f(strFmt: string, items ...any) return (r0: string)"
        },
        {
          "functionName": "TrimSuffix(${1:origin/*type: string*/}, ${2:suffix/*type: string*/})",
          "document": "移除后缀",
          "definitionStr": "func str.TrimSuffix(origin: string, suffix: string) return (r0: string)"
        },
        {
          "functionName": "TrimSpace(${1:v1/*type: string*/})",
          "document": "移除前后空白字符",
          "definitionStr": "func str.TrimSpace(v1: string) return (r0: string)"
        },
        {
          "functionName": "TrimRight(${1:origin/*type: string*/}, ${2:subs/*type: string*/})",
          "document": "移除右边的某些字符",
          "definitionStr": "func str.TrimRight(origin: string, subs: string) return (r0: string)"
        },
        {
          "functionName": "TrimPrefix(${1:origin/*type: string*/}, ${2:prefix/*type: string*/})",
          "document": "移除某个前缀",
          "definitionStr": "func str.TrimPrefix(origin: string, prefix: string) return (r0: string)"
        },
        {
          "functionName": "TrimLeft(${1:origin/*type: string*/}, ${2:subs/*type: string*/})",
          "document": "移除左边的某些字符",
          "definitionStr": "func str.TrimLeft(origin: string, subs: string) return (r0: string)"
        },
        {
          "functionName": "Trim(${1:origin/*type: string*/}, ${2:subs/*type: string*/})",
          "document": "把字符串前后任何包含子字符串中字符移除",
          "definitionStr": "func str.Trim(origin: string, subs: string) return (r0: string)"
        },
        {
          "functionName": "ToValidUTF8(${1:originStr/*type: string*/}, ${2:replaced/*type: string*/})",
          "document": "把字符串中不安全的UTF8字符替换掉，避免 panic",
          "definitionStr": "func str.ToValidUTF8(originStr: string, replaced: string) return (r0: string)"
        },
        {
          "functionName": "ToUpperSpecial(${1:v1/*type: unicode.SpecialCase*/}, ${2:v2/*type: string*/})",
          "document": "同 Golang `strings.ToUpperSpecial`",
          "definitionStr": "func str.ToUpperSpecial(v1: unicode.SpecialCase, v2: string) return (r0: string)"
        },
        {
          "functionName": "ToUpper(${1:v1/*type: string*/})",
          "document": "把字符串变成全大写",
          "definitionStr": "func str.ToUpper(v1: string) return (r0: string)"
        },
        {
          "functionName": "ToTitleSpecial(${1:v1/*type: unicode.SpecialCase*/}, ${2:v2/*type: string*/})",
          "document": "同 Golang `strings.ToTitleSpecial`",
          "definitionStr": "func str.ToTitleSpecial(v1: unicode.SpecialCase, v2: string) return (r0: string)"
        },
        {
          "functionName": "ToTitle(${1:v1/*type: string*/})",
          "document": "同 Golang `strings.ToTitle`",
          "definitionStr": "func str.ToTitle(v1: string) return (r0: string)"
        },
        {
          "functionName": "ToLowerSpecial(${1:v1/*type: unicode.SpecialCase*/}, ${2:v2/*type: string*/})",
          "document": "同 Golang `strings.ToLowerSpecial`",
          "definitionStr": "func str.ToLowerSpecial(v1: unicode.SpecialCase, v2: string) return (r0: string)"
        },
        {
          "functionName": "ToLower(${1:v1/*type: string*/})",
          "document": "把字符串变成小写",
          "definitionStr": "func str.ToLower(v1: string) return (r0: string)"
        },
        {
          "functionName": "ToJsonIndentStr(${1:v1/*type: any*/})",
          "document": "把一个对象解析成 Json，并保证 indent 合理",
          "definitionStr": "func str.ToJsonIndentStr(v1: any) return (r0: string)"
        },
        {
          "functionName": "Title(${1:v1/*type: string*/})",
          "document": "把字符串每个单词首字母大写，变成 Title",
          "definitionStr": "func str.Title(v1: string) return (r0: string)"
        },
        {
          "functionName": "StringSliceContainsAll(${1:slice/*type: []string*/}, ${2:subStrs/*type ...string*/})",
          "document": "判断一个 Slice 中是否包含后续所有子串？",
          "definitionStr": "func str.StringSliceContainsAll(slice: []string, subStrs ...string) return (r0: bool)"
        },
        {
          "functionName": "StringSliceContains(${1:slice/*type: []string*/}, ${2:sub/*type: string*/})",
          "document": "判断一个 Slice 中是否包含一个子字符串？",
          "definitionStr": "func str.StringSliceContains(slice: []string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "StringContainsAnyOfSubString(${1:all/*type: string*/}, ${2:subStrs/*type: []string*/})",
          "document": "判断字符串是否包含任意一个后续 Slice 中的元素？",
          "definitionStr": "func str.StringContainsAnyOfSubString(all: string, subStrs: []string) return (r0: bool)"
        },
        {
          "functionName": "StartsWith(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断主字符串是否是子串开头？",
          "definitionStr": "func str.StartsWith(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "SplitN(${1:all/*type: string*/}, ${2:sep/*type: string*/}, ${3:n/*type: int*/})",
          "document": "分割字符串，分割成N块",
          "definitionStr": "func str.SplitN(all: string, sep: string, n: int) return (r0: []string)"
        },
        {
          "functionName": "SplitAndTrim(${1:all/*type: string*/}, ${2:sep/*type: string*/})",
          "document": "分割，并清除每一个部分的前后空白",
          "definitionStr": "func str.SplitAndTrim(all: string, sep: string) return (r0: []string)"
        },
        {
          "functionName": "SplitAfterN(${1:all/*type: string*/}, ${2:sep/*type: string*/}, ${3:n/*type: int*/})",
          "document": "分割字符串，不移除分隔符，最多分割成N个块",
          "definitionStr": "func str.SplitAfterN(all: string, sep: string, n: int) return (r0: []string)"
        },
        {
          "functionName": "SplitAfter(${1:all/*type: string*/}, ${2:sep/*type: string*/})",
          "document": "分割字符串，不移除分隔符",
          "definitionStr": "func str.SplitAfter(all: string, sep: string) return (r0: []string)"
        },
        {
          "functionName": "Split(${1:all/*type: string*/}, ${2:sep/*type: string*/})",
          "document": "分割字符串",
          "definitionStr": "func str.Split(all: string, sep: string) return (r0: []string)"
        },
        {
          "functionName": "ReplaceAll(${1:raw/*type: string*/}, ${2:old/*type: string*/}, ${3:new/*type: string*/})",
          "document": "字符串替换，全部",
          "definitionStr": "func str.ReplaceAll(raw: string, old: string, new: string) return (r0: string)"
        },
        {
          "functionName": "Replace(${1:raw/*type: string*/}, ${2:old/*type: string*/}, ${3:new/*type: string*/}, ${4:matchTimes/*type: int*/})",
          "document": "字符串替换（次数）",
          "definitionStr": "func str.Replace(raw: string, old: string, new: string, matchTimes: int) return (r0: string)"
        },
        {
          "functionName": "Repeat(${1:strContent/*type: string*/}, ${2:count/*type: int*/})",
          "document": "重复字符串",
          "definitionStr": "func str.Repeat(strContent: string, count: int) return (r0: string)"
        },
        {
          "functionName": "RemoveRepeat(${1:v1/*type: []string*/})",
          "document": "移除 slice 中重复元素",
          "definitionStr": "func str.RemoveRepeat(v1: []string) return (r0: []string)"
        },
        {
          "functionName": "RegexpMatch(${1:regexpPattern/*type: string*/}, ${2:content/*type: any*/})",
          "document": "使用正则匹配",
          "definitionStr": "func str.RegexpMatch(regexpPattern: string, content: any) return (r0: bool)"
        },
        {
          "functionName": "RandStr(${1:length/*type: int*/})",
          "document": "生成一个随机字符串",
          "definitionStr": "func str.RandStr(length: int) return (r0: string)"
        },
        {
          "functionName": "RandSecret(${1:length/*type: int*/})",
          "document": "生成一个随机密码",
          "definitionStr": "func str.RandSecret(length: int) return (r0: string)"
        },
        {
          "functionName": "PathJoin(${1:v1/*type ...string*/})",
          "document": "把 path 进行拼接",
          "definitionStr": "func str.PathJoin(v1 ...string) return (r0: string)"
        },
        {
          "functionName": "ParseStringToUrlsWith3W(${1:v1/*type ...string*/})",
          "document": "把字符串（域名/IP/URL）解析成可能的 URL（如果是域名，自动补充 WWW 前缀）",
          "definitionStr": "func str.ParseStringToUrlsWith3W(v1 ...string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToUrls(${1:v1/*type ...string*/})",
          "document": "把字符串（域名/IP/URL）解析成可能的 URL（如果是域名，不自动补充 WWW 前缀）",
          "definitionStr": "func str.ParseStringToUrls(v1 ...string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToPorts(${1:v1/*type: string*/})",
          "document": "把字符串解析成多个端口，逗号分隔",
          "definitionStr": "func str.ParseStringToPorts(v1: string) return (r0: []int)"
        },
        {
          "functionName": "ParseStringToLines(${1:v1/*type: string*/})",
          "document": "把一个字符串按行解析",
          "definitionStr": "func str.ParseStringToLines(v1: string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToHosts(${1:v1/*type: string*/})",
          "document": "把字符串解析成 hosts，字符串可以是逗号分割的网段/域名/ip地址",
          "definitionStr": "func str.ParseStringToHosts(v1: string) return (r0: []string)"
        },
        {
          "functionName": "ParseStringToHostPort(${1:v1/*type: string*/})",
          "document": "把字符串解析成 host 和 port",
          "definitionStr": "func str.ParseStringToHostPort(v1: string) return (host: string, port: int, r2: error)"
        },
        {
          "functionName": "ParamsGetOr(${1:params/*type: map[string]string*/}, ${2:key/*type: string*/}, ${3:defaulValue/*type: string*/})",
          "document": "从 `map[string]string` 中获取参数",
          "definitionStr": "func str.ParamsGetOr(params: map[string]string, key: string, defaulValue: string) return (r0: string)"
        },
        {
          "functionName": "NewReader(${1:v1/*type: string*/})",
          "document": "创建一个 Reader",
          "definitionStr": "func str.NewReader(v1: string) return (r0: *strings.Reader)"
        },
        {
          "functionName": "NewFilter()",
          "document": "创建一个字符串过滤器",
          "definitionStr": "func str.NewFilter() return (r0: *filter.StringFilter)"
        },
        {
          "functionName": "LowerAndTrimSpace(${1:v1/*type: string*/})",
          "document": "把字符串前后空白移除，并变成小写",
          "definitionStr": "func str.LowerAndTrimSpace(v1: string) return (r0: string)"
        },
        {
          "functionName": "LastIndexByte(${1:all/*type: string*/}, ${2:byte/*type: byte*/})",
          "document": "最后一个目标 byte 的位置",
          "definitionStr": "func str.LastIndexByte(all: string, byte: byte) return (r0: int)"
        },
        {
          "functionName": "LastIndexAny(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "子字符串中任何一个字符在主字符串中最后出现的位置",
          "definitionStr": "func str.LastIndexAny(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "LastIndex(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "从后往前匹配最后一个子字符串位置",
          "definitionStr": "func str.LastIndex(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "JsonToMapList(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func str.JsonToMapList(v1: string) return (r0: []map[string]string)"
        },
        {
          "functionName": "JsonToMap(${1:v1/*type: string*/})",
          "document": "把 Json 解析成 `map[string]string`",
          "definitionStr": "func str.JsonToMap(v1: string) return (r0: map[string]string)"
        },
        {
          "functionName": "JsonStreamToMapList(${1:v1/*type: io.Reader*/})",
          "document": "把 json 流解析成多个 `map[string]interface{}`",
          "definitionStr": "func str.JsonStreamToMapList(v1: io.Reader) return (r0: []map[string]any)"
        },
        {
          "functionName": "Join(${1:strSlice/*type: []string*/}, ${2:seperator/*type: string*/})",
          "document": "Join 一个字符串，把 slice 中拼成字符串，使用 seperator 作为分隔符",
          "definitionStr": "func str.Join(strSlice: []string, seperator: string) return (r0: string)"
        },
        {
          "functionName": "IsStrongPassword(${1:v1/*type: string*/})",
          "document": "判断一个密码是不是强密码",
          "definitionStr": "func str.IsStrongPassword(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsIPv6(${1:v1/*type: string*/})",
          "document": "判断一个字符串是不是 IPv6",
          "definitionStr": "func str.IsIPv6(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IsIPv4(${1:v1/*type: string*/})",
          "document": "判断一个字符串是不是 IPv4",
          "definitionStr": "func str.IsIPv4(v1: string) return (r0: bool)"
        },
        {
          "functionName": "IndexByte(${1:all/*type: string*/}, ${2:byte/*type: byte*/})",
          "document": "判断一个 byte 的位置",
          "definitionStr": "func str.IndexByte(all: string, byte: byte) return (r0: int)"
        },
        {
          "functionName": "IndexAny(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断子字符串中任意一个字符在主串中的位置",
          "definitionStr": "func str.IndexAny(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "Index(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断子字符串在字符串中的位置",
          "definitionStr": "func str.Index(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "IPv4ToCClassNetwork(${1:ip/*type: string*/})",
          "document": "把一个 IPv4 变成对应的 C段网络",
          "definitionStr": "func str.IPv4ToCClassNetwork(ip: string) return (network: string, r1: error)"
        },
        {
          "functionName": "HostPort(${1:host/*type: string*/}, ${2:port/*type: any*/})",
          "document": "把字符串Host和Port拼接起来",
          "definitionStr": "func str.HostPort(host: string, port: any) return (r0: string)"
        },
        {
          "functionName": "HasSuffix(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断字符串是否以子字符串为后缀",
          "definitionStr": "func str.HasSuffix(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "HasPrefix(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断字符串是不是以子串为前缀",
          "definitionStr": "func str.HasPrefix(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "Grok(${1:content/*type: string*/}, ${2:grokRule/*type: string*/})",
          "document": "同 `re.Grok`",
          "definitionStr": "func str.Grok(content: string, grokRule: string) return (r0: yaklib.GrokResult)"
        },
        {
          "functionName": "Fields(${1:v1/*type: string*/})",
          "document": "按空格把字符串分割开",
          "definitionStr": "func str.Fields(v1: string) return (r0: []string)"
        },
        {
          "functionName": "EqualFold(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "判断忽略大小写字符串是否相等？",
          "definitionStr": "func str.EqualFold(v1: string, v2: string) return (r0: bool)"
        },
        {
          "functionName": "EndsWith(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "判断字符串是否以子串为结尾",
          "definitionStr": "func str.EndsWith(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "Count(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "字符串中包含多少个字串？",
          "definitionStr": "func str.Count(all: string, sub: string) return (r0: int)"
        },
        {
          "functionName": "ContainsAny(${1:all/*type: string*/}, ${2:chars/*type: string*/})",
          "document": "字符串中包含字串的任何一个字符",
          "definitionStr": "func str.ContainsAny(all: string, chars: string) return (r0: bool)"
        },
        {
          "functionName": "Contains(${1:all/*type: string*/}, ${2:sub/*type: string*/})",
          "document": "字符串中是否包含一个子串",
          "definitionStr": "func str.Contains(all: string, sub: string) return (r0: bool)"
        },
        {
          "functionName": "Compare(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "比较字符串",
          "definitionStr": "func str.Compare(v1: string, v2: string) return (r0: int)"
        }
      ]
    },
    {
      "libName": "spacengine",
      "prefix": "spacengine.",
      "functions": [
        {
          "functionName": "maxRecord(${1:maxRecord/*type: int*/})",
          "document": "【参数】最多获取多少条数据？但是由于 limit 的限制，这个数据往往比 maxRecord 多，直到补满当前页",
          "definitionStr": "func spacengine.maxRecord(maxRecord: int) return (r0: opt)"
        },
        {
          "functionName": "maxPage(${1:maxPage/*type: int*/})",
          "document": "【参数】最多筛选多少页？",
          "definitionStr": "func spacengine.maxPage(maxPage: int) return (r0: opt)"
        },
        {
          "functionName": "ShodanQuery(${1:apiKey/*type: string*/}, ${2:filter/*type: string*/}, ${3:params/*type ...yaklib._spaceEngineConfigOpt*/})",
          "document": "",
          "definitionStr": "func spacengine.ShodanQuery(apiKey: string, filter: string, params ...yaklib._spaceEngineConfigOpt) return (resultChan: chan *spacengine.NetSpaceEngineResult, r1: error)"
        },
        {
          "functionName": "QuakeQuery(${1:apiKey/*type: string*/}, ${2:filter/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "",
          "definitionStr": "func spacengine.QuakeQuery(apiKey: string, filter: string, params ...opt) return (resultChan: chan *spacengine.NetSpaceEngineResult, r1: error)"
        },
        {
          "functionName": "FofaQuery(${1:email/*type: string*/}, ${2:key/*type: string*/}, ${3:filter/*type: string*/}, ${4:params/*type ...opt*/})",
          "document": "查询 Fofa 中的数据",
          "definitionStr": "func spacengine.FofaQuery(email: string, key: string, filter: string, params ...opt) return (resultChan: chan *spacengine.NetSpaceEngineResult, r1: error)"
        }
      ]
    },
    {
      "libName": "servicescan",
      "prefix": "servicescan.",
      "functions": [
        {
          "functionName": "webRule(${1:v1/*type: any*/})",
          "document": "启用用户自定义 web 规则",
          "definitionStr": "func servicescan.webRule(v1: any) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "web()",
          "document": "强制启用 web 扫描",
          "definitionStr": "func servicescan.web() return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "service()",
          "document": "启动服务扫描（nmap 规则库）",
          "definitionStr": "func servicescan.service() return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "proto(${1:protos/*type ...any*/})",
          "document": "设置扫描的协议",
          "definitionStr": "func servicescan.proto(protos ...any) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "nmapRule(${1:v1/*type: any*/})",
          "document": "【参数】设置 nmap 规则文件（可以自己写）",
          "definitionStr": "func servicescan.nmapRule(v1: any) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "nmapRarityMax(${1:max/*type: int*/})",
          "document": "【参数】设置nmap规则的最大稀有度",
          "definitionStr": "func servicescan.nmapRarityMax(max: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "maxProbesConcurrent(${1:size/*type: int*/})",
          "document": "【参数】每个指纹扫描目标允许的并发量",
          "definitionStr": "func servicescan.maxProbesConcurrent(size: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "maxProbes(${1:count/*type: int*/})",
          "document": "【参数】设置每个指纹扫描过程最多主动发送多少个数据包",
          "definitionStr": "func servicescan.maxProbes(count: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "concurrent(${1:concurrentSize/*type: int*/})",
          "document": "",
          "definitionStr": "func servicescan.concurrent(concurrentSize: int) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "all()",
          "document": "【参数】扫描全部指纹",
          "definitionStr": "func servicescan.all() return (scanAll: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "active(${1:isActive/*type: bool*/})",
          "document": "【参数】主动扫描模式",
          "definitionStr": "func servicescan.active(isActive: bool) return (r0: func ConfigOption(v1: *fp.Config) )"
        },
        {
          "functionName": "ScanOne(${1:host/*type: string*/}, ${2:port/*type: int*/}, ${3:params/*type ...opt*/})",
          "document": "同步扫描单个目标",
          "definitionStr": "func servicescan.ScanOne(host: string, port: int, params ...opt) return (resultChan: *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "ScanFromSynResult(${1:chanForSynScan/*type: any*/}, ${2:params/*type ...opt*/})",
          "document": "从 synscan 中返回的结果直接进入 servicescan 扫描的通道",
          "definitionStr": "func servicescan.ScanFromSynResult(chanForSynScan: any, params ...opt) return (resultChan: chan *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "ScanFromSpaceEngine(${1:chanFromSpacengine/*type: any*/}, ${2:params/*type ...opt*/})",
          "document": "从网络空间搜索引擎的结果中扫描指纹信息",
          "definitionStr": "func servicescan.ScanFromSpaceEngine(chanFromSpacengine: any, params ...opt) return (resultChan: chan *fp.MatchResult, r1: error)"
        },
        {
          "functionName": "Scan(${1:hosts/*type: string*/}, ${2:ports/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "扫描服务指纹的核心函数",
          "definitionStr": "func servicescan.Scan(hosts: string, ports: string, params ...opt) return (resultChannel: chan *fp.MatchResult, r1: error)"
        }
      ]
    },
    {
      "libName": "re",
      "prefix": "re.",
      "functions": [
        {
          "functionName": "QuoteMeta(${1:v1/*type: string*/})",
          "document": "把正则保留字符进行转义",
          "definitionStr": "func re.QuoteMeta(v1: string) return (r0: string)"
        },
        {
          "functionName": "MustCompilePOSIX(${1:regexpStr/*type: string*/})",
          "document": "编译正则 POSIX 模式，编译失败则 Panic",
          "definitionStr": "func re.MustCompilePOSIX(regexpStr: string) return (r0: *regexp.Regexp)"
        },
        {
          "functionName": "MustCompile(${1:regexpStr/*type: string*/})",
          "document": "编译正则，如果编译失败则 Panic",
          "definitionStr": "func re.MustCompile(regexpStr: string) return (r0: *regexp.Regexp)"
        },
        {
          "functionName": "Match(${1:regexpPattern/*type: string*/}, ${2:content/*type: any*/})",
          "document": "",
          "definitionStr": "func re.Match(regexpPattern: string, content: any) return (r0: bool)"
        },
        {
          "functionName": "Grok(${1:content/*type: string*/}, ${2:grokRule/*type: string*/})",
          "document": "从内容中按照 Grok 规则提取数据",
          "definitionStr": "func re.Grok(content: string, grokRule: string) return (data: yaklib.GrokResult)"
        },
        {
          "functionName": "ExtractURL(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 URL",
          "definitionStr": "func re.ExtractURL(content: []byte|string|io.Reader|any) return (urls: []string)"
        },
        {
          "functionName": "ExtractTTY(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 TTY 内容",
          "definitionStr": "func re.ExtractTTY(content: []byte|string|io.Reader|any) return (ttys: []string)"
        },
        {
          "functionName": "ExtractPath(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取路径",
          "definitionStr": "func re.ExtractPath(content: []byte|string|io.Reader|any) return (paths: []string)"
        },
        {
          "functionName": "ExtractMac(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从字符串中提取可用的 Mac 地址",
          "definitionStr": "func re.ExtractMac(content: []byte|string|io.Reader|any) return (macAddrs: []string)"
        },
        {
          "functionName": "ExtractIPv6(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 IPv6 地址",
          "definitionStr": "func re.ExtractIPv6(content: []byte|string|io.Reader|any) return (ipAddrs: []string)"
        },
        {
          "functionName": "ExtractIPv4(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 IPv4 地址",
          "definitionStr": "func re.ExtractIPv4(content: []byte|string|io.Reader|any) return (ipAddrs: []string)"
        },
        {
          "functionName": "ExtractIP(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从内容中提取 IP 地址",
          "definitionStr": "func re.ExtractIP(content: []byte|string|io.Reader|any) return (ipAddrs: []string)"
        },
        {
          "functionName": "ExtractHostPort(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从结果中提取 `host:port`",
          "definitionStr": "func re.ExtractHostPort(content: []byte|string|io.Reader|any) return (hostPorts: []string)"
        },
        {
          "functionName": "ExtractEmail(${1:content/*type: []byte|string|io.Reader|any*/})",
          "document": "从字符串中提取 email",
          "definitionStr": "func re.ExtractEmail(content: []byte|string|io.Reader|any) return (emails: []string)"
        },
        {
          "functionName": "CompilePOSIX(${1:regexpStr/*type: string*/})",
          "document": "",
          "definitionStr": "func re.CompilePOSIX(regexpStr: string) return (r0: *regexp.Regexp, r1: error)"
        },
        {
          "functionName": "Compile(${1:regexpStr/*type: string*/})",
          "document": "编译正则",
          "definitionStr": "func re.Compile(regexpStr: string) return (r0: *regexp.Regexp, r1: error)"
        }
      ]
    },
    {
      "libName": "os",
      "prefix": "os.",
      "functions": [
        {
          "functionName": "Unsetenv(${1:key/*type: string*/})",
          "document": "清除环境变量",
          "definitionStr": "func os.Unsetenv(key: string) return (r0: error)"
        },
        {
          "functionName": "Setenv(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置环境变量",
          "definitionStr": "func os.Setenv(key: string, value: string) return (r0: error)"
        },
        {
          "functionName": "Rename(${1:oldFile/*type: string*/}, ${2:newFile/*type: string*/})",
          "document": "重命名一个文件：同 Golang `os.Rename`",
          "definitionStr": "func os.Rename(oldFile: string, newFile: string) return (r0: error)"
        },
        {
          "functionName": "RemoveAll(${1:fileName/*type: string*/})",
          "document": "移除一个文件（强制）",
          "definitionStr": "func os.RemoveAll(fileName: string) return (r0: error)"
        },
        {
          "functionName": "Remove(${1:fileName/*type: string*/})",
          "document": "移除一个文件",
          "definitionStr": "func os.Remove(fileName: string) return (r0: error)"
        },
        {
          "functionName": "Pipe()",
          "document": "返回文件管道，两个结果互通，均可互相读写",
          "definitionStr": "func os.Pipe() return (file1: *os.File, file2: *os.File, r2: error)"
        },
        {
          "functionName": "LookupEnv(${1:envName/*type: string*/})",
          "document": "判断这个环境变量是否存在，如果存在，返回环境变量的值，不存在设置 ok 为 false",
          "definitionStr": "func os.LookupEnv(envName: string) return (value: string, ok: bool)"
        },
        {
          "functionName": "IsUDPPortOpen(${1:port/*type: int*/})",
          "document": "判断一个本地 UDP 端口是否开放",
          "definitionStr": "func os.IsUDPPortOpen(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsUDPPortAvailable(${1:port/*type: int*/})",
          "document": "判断一个本地 UDP 端口是否可用",
          "definitionStr": "func os.IsUDPPortAvailable(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsTCPPortOpen(${1:port/*type: int*/})",
          "document": "判断一个本地端口是否开放",
          "definitionStr": "func os.IsTCPPortOpen(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsTCPPortAvailable(${1:port/*type: int*/})",
          "document": "判断一个本地 TCP 端口是否可用（监听可用）",
          "definitionStr": "func os.IsTCPPortAvailable(port: int) return (r0: bool)"
        },
        {
          "functionName": "IsRemoteTCPPortOpen(${1:host/*type: string*/}, ${2:port/*type: int*/})",
          "document": "判断一个远程 TCP 端口是否开放",
          "definitionStr": "func os.IsRemoteTCPPortOpen(host: string, port: int) return (r0: bool)"
        },
        {
          "functionName": "Getenv(${1:envName/*type: string*/})",
          "document": "获得一个环境变量的值",
          "definitionStr": "func os.Getenv(envName: string) return (value: string)"
        },
        {
          "functionName": "GetRandomAvailableUDPPort()",
          "document": "随机获得一个可用的 UDP 端口",
          "definitionStr": "func os.GetRandomAvailableUDPPort() return (port: int)"
        },
        {
          "functionName": "GetRandomAvailableTCPPort()",
          "document": "随机获得一个可用的 TCP 端口",
          "definitionStr": "func os.GetRandomAvailableTCPPort() return (port: int)"
        },
        {
          "functionName": "ExpandEnv(${1:targetWithEnv/*type: string*/})",
          "document": "同 Golang 的 `os.ExpandEnv`：根据当前环境变量的值来替换字符串中的${var}或者$var",
          "definitionStr": "func os.ExpandEnv(targetWithEnv: string) return (r0: string)"
        },
        {
          "functionName": "Exit(${1:exitCode/*type: int*/})",
          "document": "退出主程序，手动结束当前进程",
          "definitionStr": "`func os.Exit(exitCode: int)`"
        },
        {
          "functionName": "Executable()",
          "document": "获取当前正在执行的二进制程序的路径",
          "definitionStr": "func os.Executable() return (path: string, r1: error)"
        },
        {
          "functionName": "Environ()",
          "document": "获取当前所有的环境变量内容",
          "definitionStr": "func os.Environ() return (r0: []string)"
        },
        {
          "functionName": "Clearenv()",
          "document": "清除环境变量，与原生 Golang `go.Clearenv` 相同",
          "definitionStr": "`func os.Clearenv()`"
        }
      ]
    },
    {
      "libName": "nuclei",
      "prefix": "nuclei.",
      "functions": [
        {
          "functionName": "workflows(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.workflows(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "version(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.version(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "verbose(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.verbose(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "updateTemplates(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.updateTemplates(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "timeout(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.timeout(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templatesVersion(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.templatesVersion(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templatesThreads(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.templatesThreads(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templatesDir(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.templatesDir(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templates(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.templates(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "templateList(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.templateList(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "tags(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.tags(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "systemDnsResolver(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.systemDnsResolver(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "stopAtFirstMatch(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.stopAtFirstMatch(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "silent(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.silent(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "showBrowser(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.showBrowser(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "severity(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.severity(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "retry(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.retry(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "reportingDB(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.reportingDB(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "reportingConfig(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.reportingConfig(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "rateLimit(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.rateLimit(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "proxy(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.proxy(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "project(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.project(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "pageTimeout(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.pageTimeout(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "output(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.output(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "noMeta(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.noMeta(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "noInteractsh(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.noInteractsh(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "noColor(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.noColor(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "newTemplates(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.newTemplates(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "metrics(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.metrics(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "logFile(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.logFile(v1: string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "headless(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.headless(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "headers(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.headers(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "excludeTemplates(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.excludeTemplates(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "excludeTags(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.excludeTags(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "dnsResolver(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.dnsResolver(v1 ...string) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "debugResponse(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.debugResponse(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "debugRequest(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.debugRequest(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.debug(v1: bool) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "bulkSize(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.bulkSize(v1: int) return (r0: func nucleiOpt(v1: *types.Options) )"
        },
        {
          "functionName": "Scan(${1:v1/*type: string*/}, ${2:v2/*type ...tools.nucleiOpt*/})",
          "document": "",
          "definitionStr": "func nuclei.Scan(v1: string, v2 ...tools.nucleiOpt) return (r0: any, r1: error)"
        }
      ]
    },
    {
      "libName": "mmdb",
      "prefix": "mmdb.",
      "functions": [
        {
          "functionName": "QueryIPCity(${1:v1/*type: *maxminddb.Reader*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func mmdb.QueryIPCity(v1: *maxminddb.Reader, v2: string) return (r0: *geo.City, r1: error)"
        },
        {
          "functionName": "Open(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func mmdb.Open(v1: string) return (r0: *maxminddb.Reader, r1: error)"
        }
      ]
    },
    {
      "libName": "mitm",
      "prefix": "mitm.",
      "functions": [
        {
          "functionName": "rootCA(${1:caCert/*type: bytes*/}, ${2:key/*type: bytes*/})",
          "document": "设置中间人根 CA 证书（可以用 `tls` 工具包生成）",
          "definitionStr": "func mitm.rootCA(caCert: bytes, key: bytes) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "host(${1:v1/*type: string*/})",
          "document": "【参数】设置中间人代理/服务器的监听主机端口",
          "definitionStr": "func mitm.host(v1: string) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "context(${1:v1/*type: context.Context*/})",
          "document": "【参数】设置中间人的 context，用来控制生命周期",
          "definitionStr": "func mitm.context(v1: context.Context) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "callback(${1:v1/*type: func (v1: bool, v2: string, v3: *http.Request, v4: *http.Response) */})",
          "document": "",
          "definitionStr": "func mitm.callback(v1: func (v1: bool, v2: string, v3: *http.Request, v4: *http.Response) ) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "Start(${1:port/*type: int*/}, ${2:params/*type ...opt*/})",
          "document": "启动一个中间人代理",
          "definitionStr": "func mitm.Start(port: int, params ...opt) return (r0: error)"
        },
        {
          "functionName": "Bridge(${1:listenedPort/*type: any*/}, ${2:nextProxy/*type: string*/}, ${3:params/*type ...opt*/})",
          "document": "桥接模式中间人",
          "definitionStr": "func mitm.Bridge(listenedPort: any, nextProxy: string, params ...opt) return (r0: error)"
        }
      ]
    },
    {
      "libName": "log",
      "prefix": "log.",
      "functions": [
        {
          "functionName": "warn(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志信息【警告级别】",
          "definitionStr": "`func log.warn(fmt: string, items ...any)`"
        },
        {
          "functionName": "setLevel(${1:level/*type: any*/})",
          "document": "设置当前脚本的日志级别",
          "definitionStr": "`func log.setLevel(level: any)`"
        },
        {
          "functionName": "info(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志【信息】",
          "definitionStr": "`func log.info(fmt: string, items ...any)`"
        },
        {
          "functionName": "error(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志错误信息",
          "definitionStr": "`func log.error(fmt: string, items ...any)`"
        },
        {
          "functionName": "debug(${1:fmt/*type: string*/}, ${2:items/*type ...any*/})",
          "document": "打印日志调试信息",
          "definitionStr": "`func log.debug(fmt: string, items ...any)`"
        }
      ]
    },
    {
      "libName": "json",
      "prefix": "json.",
      "functions": [
        {
          "functionName": "New(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func json.New(v1: any) return (r0: *yaklib.yakJson, r1: error)"
        },
        {
          "functionName": "Marshal(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func json.Marshal(v1: any) return (r0: bytes, r1: error)"
        }
      ]
    },
    {
      "libName": "io",
      "prefix": "io.",
      "functions": [
        {
          "functionName": "WriteString(${1:writer/*type: io.Writer*/}, ${2:content/*type: string*/})",
          "document": "把一个 string 写到 writer 中",
          "definitionStr": "func io.WriteString(writer: io.Writer, content: string) return (r0: int, r1: error)"
        },
        {
          "functionName": "TeeReader(${1:srcReader/*type: io.Reader*/}, ${2:teeWriter/*type: io.Writer*/})",
          "document": "reader 分流，把 srcReader 读出来的内容会同步写到 teeWriter，通过返回值的 reader 来驱动",
          "definitionStr": "func io.TeeReader(srcReader: io.Reader, teeWriter: io.Writer) return (r0: io.Reader)"
        },
        {
          "functionName": "ReadFile(${1:fileName/*type: string*/})",
          "document": "把一个文件中的内容全部读出来",
          "definitionStr": "func io.ReadFile(fileName: string) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "ReadEvery1s(${1:ctx/*type: context.Context*/}, ${2:reader/*type: io.Reader*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "使用一个 ctx 控制生命周期，每隔一秒钟读一次 Reader，每隔一秒钟执行一次回调函数，回调函数如果返回 false，则立即停止读取",
          "definitionStr": "`func io.ReadEvery1s(ctx: context.Context, reader: io.Reader, callback: func (v1: bytes) return(bool) )`"
        },
        {
          "functionName": "ReadAll(${1:reader/*type: io.Reader*/})",
          "document": "把一个 reader 中的内容全部读出来",
          "definitionStr": "func io.ReadAll(reader: io.Reader) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "Pipe()",
          "document": "创建一个 io 管道",
          "definitionStr": "func io.Pipe() return (reader: *io.PipeReader, writer: *io.PipeWriter)"
        },
        {
          "functionName": "NopCloser(${1:reader/*type: io.Reader*/})",
          "document": "把一个 io.Reader 包装成 io.ReadCloser，遇到 Nop/EOF 即关闭",
          "definitionStr": "func io.NopCloser(reader: io.Reader) return (r0: io.ReadCloser)"
        },
        {
          "functionName": "MultiReader(${1:readers/*type ...io.Reader*/})",
          "document": "把多个 Reader 合并成一个",
          "definitionStr": "func io.MultiReader(readers ...io.Reader) return (r0: io.Reader)"
        },
        {
          "functionName": "LimitReader(${1:srcReader/*type: io.Reader*/}, ${2:length/*type: int64*/})",
          "document": "创建一个新的 `io.Reader` 这个 Reader 只读固定长度",
          "definitionStr": "func io.LimitReader(srcReader: io.Reader, length: int64) return (r0: io.Reader)"
        },
        {
          "functionName": "CopyN(${1:dstWriter/*type: io.Writer*/}, ${2:srcReader/*type: io.Reader*/}, ${3:copyLen/*type: int64*/})",
          "document": "从 srcReader 中复制固定长度的字节到 dstWriter",
          "definitionStr": "func io.CopyN(dstWriter: io.Writer, srcReader: io.Reader, copyLen: int64) return (r0: int64, r1: error)"
        },
        {
          "functionName": "Copy(${1:dstWriter/*type: io.Writer*/}, ${2:srcReader/*type: io.Reader*/})",
          "document": "把一个 `io.Reader` 中的内容对接到 `io.Writer` 中",
          "definitionStr": "func io.Copy(dstWriter: io.Writer, srcReader: io.Reader) return (r0: int64, r1: error)"
        }
      ]
    },
    {
      "libName": "httpserver",
      "prefix": "httpserver.",
      "functions": [
        {
          "functionName": "tlsCertAndKey(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【参数】设置 TLS/SSL，启动一个 HTTPS 服务器",
          "definitionStr": "func httpserver.tlsCertAndKey(cert: any, key: any, caCerts ...any) return (r0: func _httpServerConfigOpt(v1: *yaklib._httpServerConfig) )"
        },
        {
          "functionName": "handler(${1:handler/*type: func (v1: http.ResponseWriter, v2: *http.Request) */})",
          "document": "",
          "definitionStr": "func httpserver.handler(handler: func (v1: http.ResponseWriter, v2: *http.Request) ) return (r0: opt)"
        },
        {
          "functionName": "context(${1:ctx/*type: context.Context*/})",
          "document": "【参数】为 HTTP Server 增加上下文控制生命周期",
          "definitionStr": "func httpserver.context(ctx: context.Context) return (r0: opt)"
        },
        {
          "functionName": "Serve(${1:host/*type: string*/}, ${2:port/*type: int*/}, ${3:params/*type ...opt*/})",
          "document": "启动一个 HTTP 服务器",
          "definitionStr": "func httpserver.Serve(host: string, port: int, params ...opt) return (r0: error)"
        }
      ]
    },
    {
      "libName": "httpool",
      "prefix": "httpool.",
      "functions": [
        {
          "functionName": "size(${1:bodySize/*type: int*/})",
          "document": "【参数】设置每个请求的 body 的最大大小",
          "definitionStr": "func httpool.size(bodySize: int) return (r0: opt)"
        },
        {
          "functionName": "proxy(${1:proxyUrls/*type ...string*/})",
          "document": "【参数】设置整个请求池的代理",
          "definitionStr": "func httpool.proxy(proxyUrls ...string) return (r0: opt)"
        },
        {
          "functionName": "port(${1:port/*type: int*/})",
          "document": "【参数】设置请求发送到的真正 Port",
          "definitionStr": "func httpool.port(port: int) return (r0: opt)"
        },
        {
          "functionName": "perRequestTimeout(${1:seconds/*type: float64*/})",
          "document": "【参数】为每个请求设置超时时间",
          "definitionStr": "func httpool.perRequestTimeout(seconds: float64) return (r0: opt)"
        },
        {
          "functionName": "https(${1:isHttps/*type: bool*/})",
          "document": "为请求设置 HTTPS",
          "definitionStr": "func httpool.https(isHttps: bool) return (r0: opt)"
        },
        {
          "functionName": "host(${1:host/*type: string*/})",
          "document": "【参数】设置批量请求发送的真正 host（兼容 Host 头与设计发送请求不一致的情况）",
          "definitionStr": "func httpool.host(host: string) return (r0: opt)"
        },
        {
          "functionName": "Pool(${1:requests/*type: []*http.Request|FuzzHTTPRequest|FuzzHTTPRequestBatch|FuzzHTTPRequestIf|*http.Request*/}, ${2:params/*type ...opt*/})",
          "document": "批量执行 http 请求",
          "definitionStr": "func httpool.Pool(requests: []*http.Request|FuzzHTTPRequest|FuzzHTTPRequestBatch|FuzzHTTPRequestIf|*http.Request, params ...opt) return (r0: chan *mutate._httpResult, r1: error)"
        }
      ]
    },
    {
      "libName": "http",
      "prefix": "http.",
      "functions": [
        {
          "functionName": "useragent(${1:userAgent/*type: any*/})",
          "document": "【参数】设置 UserAgent",
          "definitionStr": "func http.useragent(userAgent: any) return (r0: func httpOption(v1: *yaklib.yakHttpRequest) )"
        },
        {
          "functionName": "uarand()",
          "document": "【参数】设置随机 UserAgent",
          "definitionStr": "func http.uarand() return (r0: string)"
        },
        {
          "functionName": "ua(${1:userAgent/*type: any*/})",
          "document": "【参数】设置 UserAgent",
          "definitionStr": "func http.ua(userAgent: any) return (r0: httpOpt)"
        },
        {
          "functionName": "timeout(${1:seconds/*type: float64*/})",
          "document": "【参数】设置超时时间",
          "definitionStr": "func http.timeout(seconds: float64) return (r0: httpOpt)"
        },
        {
          "functionName": "showhead(${1:reqOrRsp/*type: http.Request/Response*/})",
          "document": "调试函数，展示原始数据包内容，不包含 body",
          "definitionStr": "`func http.showhead(reqOrRsp: http.Request/Response)`"
        },
        {
          "functionName": "show(${1:reqOrRsp/*type: http.Request/Response*/})",
          "document": "调试函数，展示原始数据包内容",
          "definitionStr": "`func http.show(reqOrRsp: http.Request/Response)`"
        },
        {
          "functionName": "proxy(${1:proxyUrls/*type ...string*/})",
          "document": "【参数】为请求设置 http 代理",
          "definitionStr": "func http.proxy(proxyUrls ...string) return (r0: httpOpt)"
        },
        {
          "functionName": "header(${1:headerName/*type: string*/}, ${2:headerValue/*type: string*/})",
          "document": "【参数】为请求设置 http header",
          "definitionStr": "func http.header(headerName: string, headerValue: string) return (r0: httpOpt)"
        },
        {
          "functionName": "dumphead(${1:reqOrRsp/*type: http.Response/Request*/})",
          "document": "工具函数，把 `http.Request/http.Response` 的数据包的头序列化程 `[]byte`",
          "definitionStr": "func http.dumphead(reqOrRsp: http.Response/Request) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "dump(${1:reqOrRsp/*type: http.Response/Request*/})",
          "document": "工具函数，把 `http.Request/http.Response` 变成完整的数据包 `[]byte`",
          "definitionStr": "func http.dump(reqOrRsp: http.Response/Request) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "cookie(${1:cookieRaw/*type: string*/})",
          "document": "【参数】设置请求的 Cookie",
          "definitionStr": "func http.cookie(cookieRaw: string) return (r0: httpOpt)"
        },
        {
          "functionName": "body(${1:body/*type: string|[]byte|io.Reader|any(fmt.Sprint)*/})",
          "document": "【参数】设置请求的 body",
          "definitionStr": "func http.body(body: string|[]byte|io.Reader|any(fmt.Sprint)) return (r0: httpOpt)"
        },
        {
          "functionName": "Request(${1:method/*type: string*/}, ${2:url/*type: string*/}, ${3:params/*type ...httpOpt*/})",
          "document": "立即发起一个 http 请求，不需要 `http.Do` 来执行",
          "definitionStr": "func http.Request(method: string, url: string, params ...httpOpt) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "Raw(${1:req/*type: []byte|string|*http.Request|http.Request*/})",
          "document": "创建一个 Golang 原生的 `*http.Request`",
          "definitionStr": "func http.Raw(req: []byte|string|*http.Request|http.Request) return (r0: *http.Request, r1: error)"
        },
        {
          "functionName": "Post(${1:url/*type: string*/}, ${2:params/*type ...httpOpt*/})",
          "document": "",
          "definitionStr": "func http.Post(url: string, params ...httpOpt) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "NewRequest(${1:method/*type: string*/}, ${2:url/*type: string*/}, ${3:params/*type ...httpOpt*/})",
          "document": "创建一个新的 Request，创建之后，需要通过 `http.Do` 来发送",
          "definitionStr": "func http.NewRequest(method: string, url: string, params ...httpOpt) return (r0: *yaklib.yakHttpRequest, r1: error)"
        },
        {
          "functionName": "GetAllBody(${1:response/*type: *http.Response*/})",
          "document": "",
          "definitionStr": "func http.GetAllBody(response: *http.Response) return (r0: []byte)"
        },
        {
          "functionName": "Get(${1:url/*type: opt*/}, ${2:params/*type ...httpOpt*/})",
          "document": "发送一个 http 请求",
          "definitionStr": "func http.Get(url: opt, params ...httpOpt) return (r0: *http.Response, r1: error)"
        },
        {
          "functionName": "Do(${1:request/*type: *yaklib.yakHttpRequest*/})",
          "document": "执行一个 http 请求，这个请求是 `http.NewRequest` 创建的",
          "definitionStr": "func http.Do(request: *yaklib.yakHttpRequest) return (r0: *http.Response, r1: error)"
        }
      ]
    },
    {
      "libName": "fuzz",
      "prefix": "fuzz.",
      "functions": [
        {
          "functionName": "https(${1:isHttps/*type: bool*/})",
          "document": "`http.HTTPRequest` 的 extraParams 中的额外选项之一",
          "definitionStr": "func fuzz.https(isHttps: bool) return (r0: fuzzHTTPRequestOpt)"
        },
        {
          "functionName": "UrlsToHTTPRequests(${1:urlTemplate/*type ...[]byte|string|[]string*/})",
          "document": "把多个 URL 变成可以批量 Fuzz 的请求组(Batch)",
          "definitionStr": "func fuzz.UrlsToHTTPRequests(urlTemplate []byte|string|[]string) return (r0: *mutate.FuzzHTTPRequestBatch, r1: error)"
        },
        {
          "functionName": "Strings(${1:fuzzTemplate/*type: []byte|string|[]string*/})",
          "document": "执行 Fuzz 模版，可以支持把一个模版字符串渲染多个字符串，参考 [web/http fuzz教程](/docs/buildinlibs/lib_fuzz)",
          "definitionStr": "func fuzz.Strings(fuzzTemplate: []byte|string|[]string) return (r0: []string)"
        },
        {
          "functionName": "HTTPRequest(${1:originRequest/*type: []byte|string|http.Request|*http.Request*/}, ${2:extraParams/*type ...fuzzHTTPRequestOpt*/})",
          "document": "HTTP模糊测试核心函数，构建一个模糊测试 HTTP 请求",
          "definitionStr": "func fuzz.HTTPRequest(originRequest: []byte|string|http.Request|*http.Request, extraParams ...fuzzHTTPRequestOpt) return (r0: *mutate.FuzzHTTPRequest, r1: error)"
        }
      ]
    },
    {
      "libName": "file",
      "prefix": "file.",
      "functions": [
        {
          "functionName": "TempFile(${1:dirName/*type: string*/})",
          "document": "打开一个临时文件",
          "definitionStr": "func file.TempFile(dirName: string) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Stat(${1:pathName/*type: string*/})",
          "document": "查看一个路径的基础信息，不读取文件。包含是否是目录，文件名，文件权限以及时间等",
          "definitionStr": "func file.Stat(pathName: string) return (r0: fs.FileInfo, r1: error)"
        },
        {
          "functionName": "SaveJson(${1:filePath/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func file.SaveJson(filePath: string, v2: any) return (r0: error)"
        },
        {
          "functionName": "Save(${1:fileName/*type: string*/}, ${2:content/*type: []byte|string|[]string*/})",
          "document": "把 content 中的内容写入文件名为 fileName 中的文件，支持 bytes/string/[]string",
          "definitionStr": "func file.Save(fileName: string, content: []byte|string|[]string) return (r0: error)"
        },
        {
          "functionName": "Rm(${1:fileName/*type: string*/})",
          "document": "同 `file.Remove` / Golang `os.RemoveAll`",
          "definitionStr": "func file.Rm(fileName: string) return (r0: error)"
        },
        {
          "functionName": "Rename(${1:oldPath/*type: string*/}, ${2:newPath/*type: string*/})",
          "document": "把一个路径重命名",
          "definitionStr": "func file.Rename(oldPath: string, newPath: string) return (r0: error)"
        },
        {
          "functionName": "Remove(${1:fileName/*type: string*/})",
          "document": "把一个文件移除，相当于 `os.RemoveAll`",
          "definitionStr": "func file.Remove(fileName: string) return (r0: error)"
        },
        {
          "functionName": "ReadFile(${1:fileName/*type: string*/})",
          "document": "把一个文件内容读出来",
          "definitionStr": "func file.ReadFile(fileName: string) return (fileContent: bytes, r1: error)"
        },
        {
          "functionName": "ReadAll(${1:ioReader/*type: io.Reader*/})",
          "document": "把一个 reader 的内容全部读出来",
          "definitionStr": "func file.ReadAll(ioReader: io.Reader) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "OpenFile(${1:fileName/*type: string*/}, ${2:modeFlag/*type: int*/}, ${3:permission/*type: fs.FileMode*/})",
          "document": "使用 Golang 原生的 `os.OpenFile`",
          "definitionStr": "func file.OpenFile(fileName: string, modeFlag: int, permission: fs.FileMode) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Open(${1:fileName/*type: string*/})",
          "document": "打开一个文件，如果没有就创建，使用最多权限",
          "definitionStr": "func file.Open(fileName: string) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Mv(${1:oldPath/*type: string*/}, ${2:newPath/*type: string*/})",
          "document": "把一个文件 move 到另一个地方，本质上执行 `os.Rename`",
          "definitionStr": "func file.Mv(oldPath: string, newPath: string) return (r0: error)"
        },
        {
          "functionName": "MkdirAll(${1:path/*type: string*/})",
          "document": "强制创建个文件夹，如果没有父路径，则会强制创建，相当于执行 `mkdir -p [path]`",
          "definitionStr": "func file.MkdirAll(path: string) return (r0: error)"
        },
        {
          "functionName": "Mkdir(${1:path/*type: string*/})",
          "document": "创建一个文件夹，如果无法创建，基本等同于 `mkdir [path]`，则会失败",
          "definitionStr": "func file.Mkdir(path: string) return (r0: error)"
        },
        {
          "functionName": "Lstat(${1:filePath/*type: string*/})",
          "document": "同 Golang `os.Lstat`，查看一个文件信息（如果是链接，则会返回这个链接的描述）",
          "definitionStr": "func file.Lstat(filePath: string) return (r0: fs.FileInfo, r1: error)"
        },
        {
          "functionName": "Ls(${1:dirPath/*type: string*/})",
          "document": "查看当前路径下是否有其他文件",
          "definitionStr": "func file.Ls(dirPath: string) return (r0: []*utils.FileInfo)"
        },
        {
          "functionName": "Join(${1:paths/*type ...string*/})",
          "document": "拼接路径",
          "definitionStr": "func file.Join(paths ...string) return (r0: string)"
        },
        {
          "functionName": "IsLink(${1:path/*type: string*/})",
          "document": "判断一个路径是否是一个文件链接/快捷方式",
          "definitionStr": "func file.IsLink(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsFile(${1:path/*type: string*/})",
          "document": "判断文件是否存在",
          "definitionStr": "func file.IsFile(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsExisted(${1:path/*type: string*/})",
          "document": "判断路径文件是否存在",
          "definitionStr": "func file.IsExisted(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsDir(${1:path/*type: string*/})",
          "document": "判断路径是否是一个文件夹",
          "definitionStr": "func file.IsDir(path: string) return (r0: bool)"
        },
        {
          "functionName": "IsAbs(${1:absPath/*type: string*/})",
          "document": "判断路径是否是绝对路径名",
          "definitionStr": "func file.IsAbs(absPath: string) return (r0: bool)"
        },
        {
          "functionName": "Dir(${1:dirName/*type: string*/})",
          "document": "同 `file.Ls`",
          "definitionStr": "func file.Dir(dirName: string) return (fileInfos: []*utils.FileInfo)"
        },
        {
          "functionName": "Create(${1:fileName/*type: string*/})",
          "document": "创建一个文件，当前用户下读写执行权限均打开",
          "definitionStr": "func file.Create(fileName: string) return (r0: *yaklib._yakFile, r1: error)"
        },
        {
          "functionName": "Cp(${1:originFile/*type: string*/}, ${2:targetFile/*type: string*/})",
          "document": "复制文件",
          "definitionStr": "func file.Cp(originFile: string, targetFile: string) return (r0: error)"
        },
        {
          "functionName": "Cat(${1:fileName/*type: string*/})",
          "document": "把文件内容 `cat`到显示屏",
          "definitionStr": "`func file.Cat(fileName: string)`"
        },
        {
          "functionName": "Abs(${1:path/*type: string*/})",
          "document": "把相对路径变为绝对路径，如果出错，原样返回",
          "definitionStr": "func file.Abs(path: string) return (absPath: string)"
        }
      ]
    },
    {
      "libName": "exec",
      "prefix": "exec.",
      "functions": [
        {
          "functionName": "timeout(${1:timeout/*type: float64*/})",
          "document": "设置 SystemBatch 批量执行的 timeout",
          "definitionStr": "func exec.timeout(timeout: float64) return (r0: func poolOpt(v1: *yaklib._execPoolConfig) )"
        },
        {
          "functionName": "concurrent(${1:poolSize/*type: int*/})",
          "document": "设置 SystemBatch 批量执行的并发量",
          "definitionStr": "func exec.concurrent(poolSize: int) return (r0: func poolOpt(v1: *yaklib._execPoolConfig) )"
        },
        {
          "functionName": "callback(${1:callbackFunc/*type: func (v1: string, v2: bytes) */})",
          "document": "设置 SystemBatch 批量执行的回调函数，命令执行结束后会执行的函数",
          "definitionStr": "func exec.callback(callbackFunc: func (v1: string, v2: bytes) ) return (r0: func poolOpt(v1: *yaklib._execPoolConfig) )"
        },
        {
          "functionName": "WatchStdout(${1:v1/*type: string*/}, ${2:v2/*type: float64*/}, ${3:v3/*type: func (v1: bytes) return(bool) */})",
          "document": "",
          "definitionStr": "func exec.WatchStdout(v1: string, v2: float64, v3: func (v1: bytes) return(bool) ) return (r0: error)"
        },
        {
          "functionName": "WatchStderr(${1:cmd/*type: string*/}, ${2:timeout/*type: float64*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "使用方法同 `exec.WatchOutput` 只是监控的输出是标准错误流",
          "definitionStr": "func exec.WatchStderr(cmd: string, timeout: float64, callback: func (v1: bytes) return(bool) ) return (err: error)"
        },
        {
          "functionName": "WatchOutput(${1:cmd/*type: string*/}, ${2:timeout/*type: float64*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "监控一个命令执行的中间结果，一般用于检测这个命令是否得到了想要的结果，或者获取一个命令的中间结果。该函数监控命令执行的标准输出流+标准错误流结果",
          "definitionStr": "func exec.WatchOutput(cmd: string, timeout: float64, callback: func (v1: bytes) return(bool) ) return (Err: error)"
        },
        {
          "functionName": "SystemContext(${1:ctx/*type: context.Context*/}, ${2:cmd/*type: string*/})",
          "document": "带 context 控制生命周期的 `exec.System`",
          "definitionStr": "func exec.SystemContext(ctx: context.Context, cmd: string) return (results: bytes, err: error)"
        },
        {
          "functionName": "SystemBatch(${1:cmd/*type: string*/}, ${2:params/*type ...yaklib.poolOpt*/})",
          "document": "批量执行系统命令，cmd 会经过 `fuzz.Strings` 进行变异",
          "definitionStr": "`func exec.SystemBatch(cmd: string, params ...yaklib.poolOpt)`"
        },
        {
          "functionName": "System(${1:cmd/*type: string*/})",
          "document": "直接执行一条系统命令，把结果标准输出和标准错误流一起输出出来，bytes 数据流作为结果",
          "definitionStr": "func exec.System(cmd: string) return (results: bytes, r1: error)"
        },
        {
          "functionName": "CommandContext(${1:ctx/*type: context.Context*/}, ${2:cmd/*type: string*/})",
          "document": "同 `exec.Command` 函数，但是增加了 context 的配置，可以使用 context.Context 来解决生命周期管理的问题",
          "definitionStr": "func exec.CommandContext(ctx: context.Context, cmd: string) return (cmdInstance: *exec.Cmd, r1: error)"
        },
        {
          "functionName": "Command(${1:cmd/*type: string*/})",
          "document": "最基础的，创建一个 `*exec.Cmd` 对象，可以执行，这个功能就是 Golang 原生的 `exec.Command`",
          "definitionStr": "func exec.Command(cmd: string) return (cmdInstance: *exec.Cmd, r1: error)"
        }
      ]
    },
    {
      "libName": "dyn",
      "prefix": "dyn.",
      "functions": [
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "用于 `dyn.LoadVarFromFile` 函数的额外参数，递归加载文件夹内容，会解析文件夹以及自文件下面所有的内容。",
          "definitionStr": "func dyn.recursive(v1: bool) return (r0: func yakEvalConfigOpt(v1: *yak.yakEvalConfig) )"
        },
        {
          "functionName": "params(${1:v1/*type: map[string]any*/})",
          "document": "给导入的脚本额外增加一些变量",
          "definitionStr": "func dyn.params(v1: map[string]any) return (r0: func yakEvalConfigOpt(v1: *yak.yakEvalConfig) )"
        },
        {
          "functionName": "LoadVarFromFile(${1:fromModules/*type: string*/}, ${2:varName/*type: string*/}, ${3:params/*type ...dyn.param*/})",
          "document": "从一个文件/文件夹/模块中，批量导入一个对象，通常用于 exp/poc 编写的时候，需要批量导入一些模块的函数",
          "definitionStr": "func dyn.LoadVarFromFile(fromModules: string, varName: string, params dyn.param) return (r0: []*yak.yakVariable, r1: error)"
        },
        {
          "functionName": "IsYakFunc(${1:obj/*type: any*/})",
          "document": "判断一个对象是不是可供 yak 调用的函数，类似 python 的 `callable`",
          "definitionStr": "func dyn.IsYakFunc(obj: any) return (result: bool)"
        },
        {
          "functionName": "Import(${1:fileOrModel/*type: string*/}, ${2:varName/*type: string*/})",
          "document": "加载一个 yak 文件，并把代码中的某些变量提取出来",
          "definitionStr": "func dyn.Import(fileOrModel: string, varName: string) return (yakVariable: *yak.yakVariable, err: error)"
        },
        {
          "functionName": "Eval(${1:code/*type: any*/})",
          "document": "独立上下文执行一段新的 yak 代码",
          "definitionStr": "func dyn.Eval(code: any) return (err: error)"
        }
      ]
    },
    {
      "libName": "dictutil",
      "prefix": "dictutil.",
      "functions": [
        {
          "functionName": "Mix(${1:lists/*type ...[]string*/})",
          "document": "混合多个 list，进行笛卡尔乘（直积）一般用于字典的混合",
          "definitionStr": "func dictutil.Mix(lists ...[]string) return (r0: chan []string, r1: error)"
        }
      ]
    },
    {
      "libName": "crawler",
      "prefix": "crawler.",
      "functions": [
        {
          "functionName": "userAgent(${1:userAgent/*type: string*/})",
          "document": "设置 useragent",
          "definitionStr": "func crawler.userAgent(userAgent: string) return (r0: crawler.param)"
        },
        {
          "functionName": "urlRegexpInclude(${1:urlRegexp/*type: string*/})",
          "document": "想要爬 url 的白名单，用于定向爬虫",
          "definitionStr": "func crawler.urlRegexpInclude(urlRegexp: string) return (r0: crawler.param)"
        },
        {
          "functionName": "urlRegexpExclude(${1:urlRegexp/*type: string*/})",
          "document": "禁止爬取的 url 正则，用于排除一些 login delete 等状况",
          "definitionStr": "func crawler.urlRegexpExclude(urlRegexp: string) return (r0: crawler.param)"
        },
        {
          "functionName": "ua(${1:userAgent/*type: string*/})",
          "document": "设置 useragent",
          "definitionStr": "func crawler.ua(userAgent: string) return (r0: crawler.param)"
        },
        {
          "functionName": "timeout(${1:timeout/*type: float64*/})",
          "document": "等效于 `crawler.connectTimeout`",
          "definitionStr": "func crawler.timeout(timeout: float64) return (r0: crawler.param)"
        },
        {
          "functionName": "responseTimeout(${1:seconds/*type: float64*/})",
          "document": "响应超时时间",
          "definitionStr": "func crawler.responseTimeout(seconds: float64) return (r0: crawler.param)"
        },
        {
          "functionName": "proxy(${1:proxyUrl/*type ...string*/})",
          "document": "为爬虫设置代理，如果代理失效，爬虫则请求失败",
          "definitionStr": "func crawler.proxy(proxyUrl ...string) return (r0: crawler.param)"
        },
        {
          "functionName": "maxUrls(${1:limit/*type: int*/})",
          "document": "最多获取到多少个 URL 就停止爬虫",
          "definitionStr": "func crawler.maxUrls(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxRetry(${1:limit/*type: int*/})",
          "document": "最大重试次数（如果失败了就会重试）",
          "definitionStr": "func crawler.maxRetry(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxRequest(${1:limit/*type: int*/})",
          "document": "设置爬虫最大发出的请求数量，默认为 1000",
          "definitionStr": "func crawler.maxRequest(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxRedirect(${1:limit/*type: int*/})",
          "document": "设置最大重定向次数，默认为5",
          "definitionStr": "func crawler.maxRedirect(limit: int) return (r0: crawler.param)"
        },
        {
          "functionName": "maxDepth(${1:depth/*type: int*/})",
          "document": "设置爬虫的最大深度，默认为5",
          "definitionStr": "func crawler.maxDepth(depth: int) return (r0: crawler.param)"
        },
        {
          "functionName": "header(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置爬虫的自定义 Header",
          "definitionStr": "func crawler.header(key: string, value: string) return (r0: crawler.param)"
        },
        {
          "functionName": "forbiddenFromParent(${1:allow/*type: bool*/})",
          "document": "禁止扫描 url 的父路径",
          "definitionStr": "func crawler.forbiddenFromParent(allow: bool) return (r0: crawler.param)"
        },
        {
          "functionName": "domainInclude(${1:includedDomain/*type: string*/})",
          "document": "想要扫描的域名，域名白名单，支持 glob 语法",
          "definitionStr": "func crawler.domainInclude(includedDomain: string) return (r0: crawler.param)"
        },
        {
          "functionName": "domainExclude(${1:excludedDomain/*type: string*/})",
          "document": "不扫描的域名，使用 glob 语法",
          "definitionStr": "func crawler.domainExclude(excludedDomain: string) return (r0: crawler.param)"
        },
        {
          "functionName": "cookie(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置 Cookie",
          "definitionStr": "func crawler.cookie(key: string, value: string) return (r0: crawler.param)"
        },
        {
          "functionName": "connectTimeout(${1:seconds/*type: float64*/})",
          "document": "每一次进行 HTTP 连接的超时时间",
          "definitionStr": "func crawler.connectTimeout(seconds: float64) return (r0: crawler.param)"
        },
        {
          "functionName": "concurrent(${1:maxConcurrent/*type: int*/})",
          "document": "设置爬虫并发请求数",
          "definitionStr": "func crawler.concurrent(maxConcurrent: int) return (r0: crawler.param)"
        },
        {
          "functionName": "bodySize(${1:size/*type: int*/})",
          "document": "想要设置每一个 body 最大获取多少页面大小，bytes 的大小，默认为 1024 * 1024 * 10",
          "definitionStr": "func crawler.bodySize(size: int) return (r0: crawler.param)"
        },
        {
          "functionName": "basicAuth(${1:username/*type: string*/}, ${2:password/*type: string*/})",
          "document": "设置爬虫的基础认证",
          "definitionStr": "func crawler.basicAuth(username: string, password: string) return (r0: crawler.param)"
        },
        {
          "functionName": "Start(${1:urls/*type: string*/}, ${2:params/*type ...crawler.param*/})",
          "document": "核心函数，进行爬虫的入口，输入想要爬的网站，然后设置参数，在一个 chan 中接受爬虫的结果",
          "definitionStr": "func crawler.Start(urls: string, params ...crawler.param) return (r0: chan crawler.RequestIf, r1: error)"
        }
      ]
    },
    {
      "libName": "context",
      "prefix": "context.",
      "functions": [
        {
          "functionName": "WithValue(${1:ctx/*type: context.Context*/}, ${2:key/*type: any*/}, ${3:value/*type: any*/})",
          "document": "为上下文绑定一个 kv 对",
          "definitionStr": "func context.WithValue(ctx: context.Context, key: any, value: any) return (ctx: context.Context)"
        },
        {
          "functionName": "WithTimeout(${1:ctx/*type: context.Context*/}, ${2:timeout/*type: time.Duration*/})",
          "document": "给 context 带一个超时间隔，如果超时就自动取消",
          "definitionStr": "func context.WithTimeout(ctx: context.Context, timeout: time.Duration) return (ctx: context.Context, cancel: func CancelFunc() )"
        },
        {
          "functionName": "WithDeadline(${1:ctx/*type: context.Context*/}, ${2:ddl/*type: time.Time*/})",
          "document": "给上下文增加一个 ddl",
          "definitionStr": "func context.WithDeadline(ctx: context.Context, ddl: time.Time) return (r0: context.Context, r1: func CancelFunc() )"
        },
        {
          "functionName": "WithCancel(${1:originCtx/*type: context.Context*/})",
          "document": "给 context 增加一个 cancel 手动按钮",
          "definitionStr": "func context.WithCancel(originCtx: context.Context) return (r0: context.Context, r1: func CancelFunc() )"
        },
        {
          "functionName": "Seconds(${1:seconds/*type: float*/})",
          "document": "生成一个几秒结束的 context",
          "definitionStr": "func context.Seconds(seconds: float) return (ctx: context.Context)"
        },
        {
          "functionName": "New()",
          "document": "同 `context.Background()`",
          "definitionStr": "func context.New() return (ctx: context.Context)"
        },
        {
          "functionName": "Background()",
          "document": "创建一个基础的 `context.Context`",
          "definitionStr": "func context.Background() return (ctx: context.Context)"
        }
      ]
    },
    {
      "libName": "codec",
      "prefix": "codec.",
      "functions": [
        {
          "functionName": "UnescapeQueryUrl(${1:v1/*type: string*/})",
          "document": "作为 url.Query 进行 URL 解码",
          "definitionStr": "func codec.UnescapeQueryUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "UnescapePathUrl(${1:v1/*type: string*/})",
          "document": "作为 url.Path 进行 URL 解码",
          "definitionStr": "func codec.UnescapePathUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "Sha512(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha512(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha384(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha384(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha256(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha256(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha224(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.Sha224(v1: any) return (r0: string)"
        },
        {
          "functionName": "Sha1(${1:v1/*type: any*/})",
          "document": "计算 sha1 hash",
          "definitionStr": "func codec.Sha1(v1: any) return (r0: string)"
        },
        {
          "functionName": "Md5(${1:v1/*type: any*/})",
          "document": "计算 md5 hash",
          "definitionStr": "func codec.Md5(v1: any) return (r0: string)"
        },
        {
          "functionName": "EscapeQueryUrl(${1:v1/*type: string*/})",
          "document": "URL 编码：作为 url.Query 进行编码",
          "definitionStr": "func codec.EscapeQueryUrl(v1: string) return (r0: string)"
        },
        {
          "functionName": "EscapePathUrl(${1:v1/*type: string*/})",
          "document": "URL 编码：（作为 url.Path 进行编码）",
          "definitionStr": "func codec.EscapePathUrl(v1: string) return (r0: string)"
        },
        {
          "functionName": "EscapeHtml(${1:v1/*type: string*/})",
          "document": "同 `codec.DecodeHtml`",
          "definitionStr": "func codec.EscapeHtml(v1: string) return (r0: string)"
        },
        {
          "functionName": "EncodeUrl(${1:v1/*type: any*/})",
          "document": "把一个对象进行 URL 编码",
          "definitionStr": "func codec.EncodeUrl(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeToPrintable(${1:v1/*type: string*/})",
          "document": "等价于 `codec.EncodeASCII`",
          "definitionStr": "func codec.EncodeToPrintable(v1: string) return (r0: string)"
        },
        {
          "functionName": "EncodeToHex(${1:v1/*type: any*/})",
          "document": "把一个对象编码成 hex 字符串，注意：不以 `0x` 开头",
          "definitionStr": "func codec.EncodeToHex(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeHtmlHex(${1:v1/*type: any*/})",
          "document": "把一个字符串编码成 HTML 实体编码，如果输入了一个对象，会序列化后再对 bytes 进行编码，注意这个函数会把参数所有内容都进行编码，编码成 `\u0026#xNN;` 这种形式",
          "definitionStr": "func codec.EncodeHtmlHex(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeHtml(${1:v1/*type: any*/})",
          "document": "把一个字符串编码成 HTML 实体编码，如果输入了一个对象，会 json 序列化后再编码，注意这个函数会把所有内容都进行编码",
          "definitionStr": "func codec.EncodeHtml(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeBase64(${1:v1/*type: any*/})",
          "document": "把一个对象编码成 base64 字符串",
          "definitionStr": "func codec.EncodeBase64(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeASCII(${1:v1/*type: string*/})",
          "document": "通常用于把不可见字符串变成可见字符串，把一个字符串变成双引号`\"`包裹的字符串，字符串中的不可见字符会变成 `\\xAA\\x0A` 这类被转义的内容",
          "definitionStr": "func codec.EncodeASCII(v1: string) return (r0: string)"
        },
        {
          "functionName": "DoubleEncodeUrl(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.DoubleEncodeUrl(v1: any) return (r0: string)"
        },
        {
          "functionName": "DoubleDecodeUrl(${1:v1/*type: string*/})",
          "document": "双重 URL 解码，例如 `%2564%2567` 会解析成 `dg`",
          "definitionStr": "func codec.DoubleDecodeUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "DecodeUrl(${1:v1/*type: string*/})",
          "document": "把 `%21%63%57asdf` 这类的字符串中的 URL 编码解析成正常字符",
          "definitionStr": "func codec.DecodeUrl(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "DecodeHtml(${1:v1/*type: string*/})",
          "document": "把 HTML 实体编码后的文字进行解析，例如 `\u0026#x0a;` 或 `\u0026#amp;` 等，如果包含正常字符串，则会保留原字符串",
          "definitionStr": "func codec.DecodeHtml(v1: string) return (r0: string)"
        },
        {
          "functionName": "DecodeHex(${1:v1/*type: string*/})",
          "document": "把 Hex 字符串解析成 bytes",
          "definitionStr": "func codec.DecodeHex(v1: string) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DecodeBase64(${1:base64Str/*type: str*/})",
          "document": "把 base64 解析成 bytes",
          "definitionStr": "func codec.DecodeBase64(base64Str: str) return (result: bytes, err: error)"
        },
        {
          "functionName": "DecodeASCII(${1:v1/*type: string*/})",
          "document": "等价于 `strconv.Unquote`，把一个被 `\"` 包裹的字符串解析成字符串内容，同时解析 `\"\\x0a\"` 解析成对应的字符串。",
          "definitionStr": "func codec.DecodeASCII(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "AesEncrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AesEncrypt(v1: bytes, v2: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AesDecrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AesDecrypt(v1: bytes, v2: bytes) return (r0: bytes, r1: error)"
        }
      ]
    },
    {
      "libName": "cli",
      "prefix": "cli.",
      "functions": [
        {
          "functionName": "setHelp(${1:helpText/*type: str*/})",
          "document": "使用方法同 `cli.setDefault` 使用，如果某个参数的值为空的话，并且没有默认值，将会展示缺少的参数。",
          "definitionStr": "func cli.setHelp(helpText: str) return (r0: cli.setHelp)"
        },
        {
          "functionName": "setDefault(${1:default/*type: any*/})",
          "document": "为命令行设置默认值，默认值会被强行类型断言为目标类型，不要传错类型就可以！",
          "definitionStr": "func cli.setDefault(default: any) return (r0: cli.setDefault)"
        },
        {
          "functionName": "Urls(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "",
          "definitionStr": "func cli.Urls(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Url(${1:param/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把参数对应的值解析成 url，如果无法精确对应一个 url，将会自动补充 `https://`, `http://`, `www` 等，如果本身参数就是个 url，则会保留原样",
          "definitionStr": "func cli.Url(param: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "String(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "最基础的命令行获取接口，把参数的值解析成字符串",
          "definitionStr": "func cli.String(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: string)"
        },
        {
          "functionName": "Ports(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Port`",
          "definitionStr": "func cli.Ports(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []int)"
        },
        {
          "functionName": "Port(${1:ports/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把 ports 对应的命令行参数值解析成端口组，或者整数范围",
          "definitionStr": "func cli.Port(ports: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []int)"
        },
        {
          "functionName": "Network(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Host`",
          "definitionStr": "func cli.Network(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Net(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Host`",
          "definitionStr": "func cli.Net(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "LineDict(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把一个字典按行解析",
          "definitionStr": "func cli.LineDict(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Integer(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Int`",
          "definitionStr": "func cli.Integer(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: int)"
        },
        {
          "functionName": "Int(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把命令行参数值解析成整数",
          "definitionStr": "func cli.Int(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: int)"
        },
        {
          "functionName": "Hosts(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Host`",
          "definitionStr": "func cli.Hosts(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Host(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把 v1 对应的命令行参数解析成扫描目标，支持 `192.168.1.1/24,8.8.8.8,baidu.com` 等 IP，IP 段，域名等多种格式",
          "definitionStr": "func cli.Host(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: []string)"
        },
        {
          "functionName": "Have(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Bool`，检测参数是否存在在命令行中",
          "definitionStr": "func cli.Have(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: bool)"
        },
        {
          "functionName": "Float(${1:param/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "同 `cli.Double`，把参数内容解析成 float64",
          "definitionStr": "func cli.Float(param: string, v2 ...cli.setHelp|cli.setDefault) return (r0: float64)"
        },
        {
          "functionName": "FileOrContent(${1:param/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把 v1 作为文件名来解析，如果解析失败，则把输入的内容直接变成内容返回",
          "definitionStr": "func cli.FileOrContent(param: string, v2 ...cli.setHelp|cli.setDefault) return (resultRaw: bytes)"
        },
        {
          "functionName": "File(${1:v1/*type: string*/}, ${2:v2/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把输入的参数当成文件名来解析",
          "definitionStr": "func cli.File(v1: string, v2 ...cli.setHelp|cli.setDefault) return (r0: bytes)"
        },
        {
          "functionName": "Double(${1:param/*type: string*/}, ${2:extraParams/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "把函数解析成 `float64` 等价于 `cli.Float64`",
          "definitionStr": "func cli.Double(param: string, extraParams ...cli.setHelp|cli.setDefault) return (r0: float64)"
        },
        {
          "functionName": "Bool(${1:paramName/*type: string*/}, ${2:extraParams/*type ...cli.setHelp|cli.setDefault*/})",
          "document": "判断命令行参数是否存在 v1 参数对应的选项？如果 v1 是 `option`，则会检测 `--option` 或者 `-option` 是否存在。要注意，不同于 `cli.String` 等接口，`cli.Bool` 不会判断参数的值，只会检测参数标记是不是存在。",
          "definitionStr": "func cli.Bool(paramName: string, extraParams ...cli.setHelp|cli.setDefault) return (r0: bool)"
        },
        {
          "functionName": "Args()",
          "document": "获取全部的命令行参数，返回结果等同于 `os.Args`\"",
          "definitionStr": "func cli.Args() return (args: []string)"
        }
      ]
    }
  ],
  "fieldsCompletions": [
    {
      "isMethod": true,
      "fieldName": "Zone",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Zone()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "YearDay",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "YearDay()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Year",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Year()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "YakMod",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteTo",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "WriteTo(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteString",
      "structName": "io.discard",
      "structNameShort": "discard",
      "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteString",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteString",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteProxy",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WriteProxy",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteProxy",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteLine",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "WriteLine(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WriteAt",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "WriteAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "io.PipeWriter",
      "structNameShort": "PipeWriter",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "io.discard",
      "structNameShort": "discard",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "Write(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Write",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WithContext",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "WithContext",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "WithContext",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Weekday",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Weekday()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "WaitingEventCount",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Wait",
      "structName": "sync.WaitGroup",
      "structNameShort": "WaitGroup",
      "methodsCompletion": "Wait()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Version",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "VerifyHostname",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "VerifyHostname(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Verify",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "Verify(${1:v2 /*type: x509.VerifyOptions*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Verify",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Verify()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "VerifiedChains",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Vendor",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Value",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Value",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "Value()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Username",
      "structName": "net/url.Userinfo",
      "structNameShort": "Userinfo",
      "methodsCompletion": "Username()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Username",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Username",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "UserEliminated",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UserAgent",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "UserAgent()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UserAgent",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "UserAgent()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UserAgent",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "UserAgent()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "User",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Url",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Update",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "UnreadRune",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "UnreadRune()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnreadByte",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "UnreadByte()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Unparsed",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnmarshalBinary",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "UnmarshalBinary(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Unlock",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Unlock()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Unlock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "Unlock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "UnknownExtKeyUsage",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UnixNano",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "UnixNano()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Unix",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Unix()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "UnhandledCriticalExtensions",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Uncompressed",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "UTC",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "UTC()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "URL",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "URIs",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Type",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Truncate",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Truncate(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Truncate",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Truncate(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TransferEncoding",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TransferEncoding",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Trailer",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Trailer",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ToString",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "ToString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ToRDNSequence",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "ToRDNSequence()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Timestamp",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TargetTaskConcurrent",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Target",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Tags",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "TLSUnique",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TLS",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "TLS",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SyscallConn",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SyscallConn()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SysProcAttr",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Sync",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Sync()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Swg",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "SubjectKeyId",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Subject",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SubexpNames",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "SubexpNames()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SubexpIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "SubexpIndex(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Sub",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Sub(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "net/url.Userinfo",
      "structNameShort": "Userinfo",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "time.Location",
      "structNameShort": "Location",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "String",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "String()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StreetAddress",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StreamBruteContext",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "StreamBruteContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []string*/}, ${4:v5 /*type: []string*/}, ${5:v6 /*type: []string*/}, ${6:v7 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Store",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Store(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Stop",
      "structName": "time.Ticker",
      "structNameShort": "Ticker",
      "methodsCompletion": "Stop()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Stop",
      "structName": "time.Timer",
      "structNameShort": "Timer",
      "methodsCompletion": "Stop()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StdoutPipe",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "StdoutPipe()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Stdout",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StdinPipe",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "StdinPipe()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Stdin",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "StderrPipe",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "StderrPipe()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Stderr",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "StatusCode",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Status",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "State",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Stat",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Stat()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Start",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Start()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Split",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Split(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Source",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Size",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Size",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Size()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SignedCertificateTimestamps",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SignatureAlgorithm",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Signature",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Signal",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "Signal()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Show",
      "structName": "palm/common/yak/yaklib/tools.SynScanResult",
      "structNameShort": "SynScanResult",
      "methodsCompletion": "Show()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Severity",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetWriteDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetResultCallback",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "SetResultCallback(${1:v2 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetReadDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetDeadline",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetBasicAuth",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "SetBasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "SetBasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ServiceProvider",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ServiceName",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ServerName",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SerialNumber",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SerialNumber",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Send",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Send(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Seek",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Seek(${1:v2 /*type: int64*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Seek",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Seek(${1:v2 /*type: int64*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Secure",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Second",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Second()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Scheme",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "SameSite",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Runes",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "Runes()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Runes",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "Runes()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RunWithContext",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "RunWithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Run()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Run",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "Run()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Round",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Round(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Results",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Results()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Results",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Results()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Result",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "Result()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ResponseRaw",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ResponseHeader",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ResponseBody",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Response",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Response",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ResolveReference",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "ResolveReference(${1:v2 /*type: *url.URL*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Reset(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "time.Ticker",
      "structNameShort": "Ticker",
      "methodsCompletion": "Reset(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Reset",
      "structName": "time.Timer",
      "structNameShort": "Timer",
      "methodsCompletion": "Reset(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RequestURI",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RequestURI",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "RequestURI()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RequestHeader",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RequestBody",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Request",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllStringFunc",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllStringFunc(${1:v2 /*type: string*/}, ${2:v3 /*type: func (v1: string) return(string) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllString(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllLiteralString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllLiteralString(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllLiteral",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllLiteral(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAllFunc",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAllFunc(${1:v2 /*type: bytes*/}, ${2:v3 /*type: func (v1: bytes) return(bytes) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReplaceAll",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ReplaceAll(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RemoteProcessingByTarget",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "RemoteProcessingByTarget(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RemoteAddr",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RemoteAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RemoteAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Referer",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Referer()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Referer",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Referer()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Referer",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Referer()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Redacted",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Redacted()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RecvTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvStringTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvStringTimeout(${1:v2 /*type: float64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvString",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "RecvLen",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "RecvLen(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Recv",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Recv()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RecordSize",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Reason",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Readdirnames",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Readdirnames(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Readdir",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Readdir(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadString",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "ReadString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadRune",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadRune()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadLines",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "ReadLines()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "io.discard",
      "structNameShort": "discard",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadFrom",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadDir",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "ReadDir(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadByte",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadByte()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadAt",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadAt",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ReadAll",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "ReadAll()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "io.PipeReader",
      "structNameShort": "PipeReader",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Read",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawTBSCertificate",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawSubjectPublicKeyInfo",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawSubject",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawQuery",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawPath",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawJson",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "RawIssuer",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawFragment",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "RawExpires",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Raw",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Range",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Range(${1:v2 /*type: func (v1: any, v2: any) return(bool) */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RUnlock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "RUnlock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RLocker",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "RLocker()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "RLock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "RLock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Query",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Query()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Put",
      "structName": "sync.Pool",
      "structNameShort": "Pool",
      "methodsCompletion": "Put(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PublicKeyAlgorithm",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PublicKey",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Province",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Province",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMinor",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMinor",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMajor",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ProtoMajor",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ProtoAtLeast",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Proto",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProductVerbose",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Product",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ProcessState",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Process",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PostalCode",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "PostFormValue",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "PostFormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "PostFormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PostForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Port",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Port()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Port",
      "structName": "palm/common/yak/yaklib/tools.SynScanResult",
      "structNameShort": "SynScanResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PolicyIdentifiers",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PocName",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "PermittedURIDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedIPRanges",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedEmailAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedDNSDomainsCritical",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PermittedDNSDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "PeerCertificates",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Path",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Password",
      "structName": "net/url.Userinfo",
      "structNameShort": "Userinfo",
      "methodsCompletion": "Password()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Password",
      "structName": "palm/common/utils/bruteutils.BruteItem",
      "structNameShort": "BruteItem",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Password",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Part",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseMultipartForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ParseMultipartForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseMultipartForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "ParseForm()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ParseForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseForm()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "ParseForm",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "ParseForm()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Parse",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Parse(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ParamsHash",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "ParamsHash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Output",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "Output()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "OrganizationalUnit",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Organization",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Opts",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OperationVerbose",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Opaque",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "OnlyNeedPassword",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OnlyNeedPassword",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OkToStop",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Ok",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "OCSPServer",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "OCSPResponse",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NumSubexp",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "NumSubexp()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NotBefore",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NotAfter",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NodeCount",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Next",
      "structName": "github.com/oschwald/maxminddb-golang.Networks",
      "structNameShort": "com/oschwald/maxminddb-golang.Networks",
      "methodsCompletion": "Next()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "New",
      "structName": "sync.Pool",
      "structNameShort": "Pool",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "NetworksWithin",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "NetworksWithin(${1:v2 /*type: *net.IPNet*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Networks",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Networks()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Network",
      "structName": "github.com/oschwald/maxminddb-golang.Networks",
      "structNameShort": "com/oschwald/maxminddb-golang.Networks",
      "methodsCompletion": "Network(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Network",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "Network()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NegotiatedProtocolIsMutual",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "NegotiatedProtocol",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Nanosecond",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Nanosecond()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Names",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Name",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Name()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Name",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Name",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "Name()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Mutex",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MultipartReader",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "MultipartReader()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MultipartReader",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "MultipartReader()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "MultipartReader",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "MultipartReader()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "MultipartForm",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Month",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Month()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Minute",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Minute()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Method",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Metadata",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxPathLenZero",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxPathLen",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "MaxAge",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MatchString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "MatchString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MatchReader",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "MatchReader(${1:v2 /*type: io.RuneReader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Match",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Match(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Mask",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalText",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "MarshalText()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalJSON",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "MarshalJSON()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalBinary",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "MarshalBinary()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "MarshalBinary",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "MarshalBinary()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LookupOffset",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "LookupOffset(${1:v2 /*type: net.IP*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LookupNetwork",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "LookupNetwork(${1:v2 /*type: net.IP*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Lookup",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Lookup(${1:v2 /*type: net.IP*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Longitude",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Longest",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Longest()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Lock",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Lock()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Lock",
      "structName": "sync.RWMutex",
      "structNameShort": "RWMutex",
      "methodsCompletion": "Lock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Location",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "Location()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Location",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Location",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Location()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Locality",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "LocalAddr",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "LocalAddr()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Local",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Local()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LoadOrStore",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "LoadOrStore(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LoadAndDelete",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "LoadAndDelete(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Load",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Load(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Lo",
      "structName": "unicode.CaseRange",
      "structNameShort": "CaseRange",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LiteralPrefix",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "LiteralPrefix()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "LikeSearchString",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "LikeSearchString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Length",
      "structName": "github.com/dlclark/regexp2.Capture",
      "structNameShort": "com/dlclark/regexp2.Capture",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Len",
      "structName": "strings.Reader",
      "structNameShort": "Reader",
      "methodsCompletion": "Len()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Latitude",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Languages",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Language",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "L",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "KeyUsage",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Items",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IssuingCertificateURL",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Issuer",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsZero",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "IsZero()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsString",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsString()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsSlice",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsSlice()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsOpen",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "IsOpen()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsObject",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsObject()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNumber",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsNumber()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNull",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsNull()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsNil",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsNil()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsMap",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsMap()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsHTTPS",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsEmptyBody",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsEmptyBody()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsDir",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IsCA",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "IsBodyUrlEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsBodyUrlEncoded()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsBodyJsonEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsBodyJsonEncoded()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsBodyFormEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "IsBodyFormEncoded()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsArray",
      "structName": "palm/common/yak/yaklib.yakJson",
      "structNameShort": "yakJson",
      "methodsCompletion": "IsArray()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "IsAbs",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "IsAbs()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Insert",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Insert(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Info",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Index",
      "structName": "github.com/dlclark/regexp2.Capture",
      "structNameShort": "com/dlclark/regexp2.Capture",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "In",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "In(${1:v2 /*type: *time.Location*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ISOWeek",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "ISOWeek()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IPVersion",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IPAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "IP",
      "structName": "palm/common/yak/yaklib/tools.PocVul",
      "structNameShort": "PocVul",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HttpOnly",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "HttpFlows",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HtmlTitle",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Hour",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Hour()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Hostname",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "Hostname()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Hostname",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Host",
      "structName": "palm/common/yak/yaklib/tools.SynScanResult",
      "structNameShort": "SynScanResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Hi",
      "structName": "unicode.CaseRange",
      "structNameShort": "CaseRange",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Header",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Hash",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "Hash()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "HandshakeComplete",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Groups",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "Groups()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GroupCount",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "GroupCount()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GroupByNumber",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "GroupByNumber(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GroupByName",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "GroupByName(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Group",
      "structName": "github.com/dlclark/regexp2.Match",
      "structNameShort": "com/dlclark/regexp2.Match",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GobEncode",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "GobEncode()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GetTimeout",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "GetTimeout()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetServiceName",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetServiceName()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetProto",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetProto()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetProcessingByTarget",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "GetProcessingByTarget(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetPostParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetPostParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetPostJsonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetPostJsonParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetOsFile",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "GetOsFile()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetOriginHTTPRequest",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetOriginHTTPRequest()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetGetQueryParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetGetQueryParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetDomains",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetDomains()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCurrentCount",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "GetCurrentCount()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCookieParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetCookieParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCommonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "GetCommonParams()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetCPEs",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetCPEs()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "GetBody",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "GetBanner",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "GetBanner()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "GetAllTargetsProcessing",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "GetAllTargetsProcessing()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Get",
      "structName": "sync.Pool",
      "structNameShort": "Pool",
      "methodsCompletion": "Get()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFileName",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzUploadFileName(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFileName",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzUploadFileName(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFile",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzUploadFile(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzUploadFile",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzUploadFile(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: bytes*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPostRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPostRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPostParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostParams",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPostParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostJsonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPostJsonParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPostJsonParams",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPostJsonParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPath",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzPath(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzPath",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzPath(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzMethod",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzMethod(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzMethod",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzMethod(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzHTTPHeader",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzHTTPHeader(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzHTTPHeader",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzHTTPHeader(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParamsRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzGetParamsRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParamsRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzGetParamsRaw(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParams",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzGetParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzGetParams",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzGetParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzFormEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzFormEncoded(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzFormEncoded",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzFormEncoded(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookieRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzCookieRaw(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookieRaw",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzCookieRaw(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookie",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "FuzzCookie(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FuzzCookie",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "FuzzCookie(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromTarget",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FromRegexp2Match",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "FromRegexp2Match(${1:v2 /*type: *regexp2.Match*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromModeRaw",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromFilter",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromEngine",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "FromDNSServer",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fragment",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Format",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Format(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormValue",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FormValue",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FormFile",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FormFile",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FormFile",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Form",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ForceQuery",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "FinishingThreshold",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Finished",
      "structName": "palm/common/utils/bruteutils.BruteItemResult",
      "structNameShort": "BruteItemResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Finished",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Finish",
      "structName": "palm/common/utils/bruteutils.targetProcessing",
      "structNameShort": "targetProcessing",
      "methodsCompletion": "Finish()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Fingerprint",
      "structName": "palm/common/fp.MatchResult",
      "structNameShort": "MatchResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "FindSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindSubmatchIndex(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindSubmatch(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindStringSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindStringSubmatchIndex(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindStringSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindStringSubmatch(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindStringIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindStringIndex(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindString(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindReaderSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindReaderSubmatchIndex(${1:v2 /*type: io.RuneReader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindReaderIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindReaderIndex(${1:v2 /*type: io.RuneReader*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindIndex(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllSubmatchIndex(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllSubmatch(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllStringSubmatchIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllStringSubmatchIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllStringSubmatch",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllStringSubmatch(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllStringIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllStringIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllString(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAllIndex",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAllIndex(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "FindAll",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "FindAll(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Find",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Find(${1:v2 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "FilePath",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Feed",
      "structName": "palm/common/utils/bruteutils.BruteUtil",
      "structNameShort": "BruteUtil",
      "methodsCompletion": "Feed(${1:v2 /*type: *bruteutils.BruteItem*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Fd",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Fd()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtraNames",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtraFiles",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtraExtensions",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Extensions",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExtKeyUsage",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ExportKeyingMaterial",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "ExportKeyingMaterial(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Expires",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "ExpandString",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "ExpandString(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: []int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Expand",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Expand(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: []int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Exist",
      "structName": "palm/common/filter.StringFilter",
      "structNameShort": "StringFilter",
      "methodsCompletion": "Exist(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/mutate.FuzzHTTPRequest",
      "structNameShort": "FuzzHTTPRequest",
      "methodsCompletion": "Exec(${1:v2 /*type: ...mutate.httpPoolConfigOption*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/mutate.FuzzHTTPRequestBatch",
      "structNameShort": "FuzzHTTPRequestBatch",
      "methodsCompletion": "Exec(${1:v2 /*type: ...mutate.httpPoolConfigOption*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Exec",
      "structName": "palm/common/yak/yaklib/tools.PocInvoker",
      "structNameShort": "PocInvoker",
      "methodsCompletion": "Exec(${1:v2 /*type: ...string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedURIDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedIPRanges",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedEmailAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ExcludedDNSDomains",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "EscapedPath",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "EscapedPath()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "EscapedFragment",
      "structName": "net/url.URL",
      "structNameShort": "URL",
      "methodsCompletion": "EscapedFragment()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Error",
      "structName": "errors.errorString",
      "structNameShort": "errorString",
      "methodsCompletion": "Error()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Error",
      "structName": "palm/common/mutate._httpResult",
      "structNameShort": "_httpResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Err",
      "structName": "github.com/oschwald/maxminddb-golang.Networks",
      "structNameShort": "com/oschwald/maxminddb-golang.Networks",
      "methodsCompletion": "Err()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Equal",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "Equal(${1:v2 /*type: *x509.Certificate*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Equal",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Equal(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Env",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "EmailAddresses",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Edition",
      "structName": "palm/common/fp/webfingerprint.CPE",
      "structNameShort": "CPE",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Done",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "Done()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Done",
      "structName": "sync.WaitGroup",
      "structNameShort": "WaitGroup",
      "methodsCompletion": "Done()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Domains",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Domain",
      "structName": "net/http.Cookie",
      "structNameShort": "Cookie",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Domain",
      "structName": "palm/common/subdomain.SubdomainResult",
      "structNameShort": "SubdomainResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Do",
      "structName": "sync.Once",
      "structNameShort": "Once",
      "methodsCompletion": "Do(${1:v2 /*type: func () */})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Dir",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DidResume",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DeviceType",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Description",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Delta",
      "structName": "unicode.CaseRange",
      "structNameShort": "CaseRange",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Delete",
      "structName": "sync.Map",
      "structNameShort": "Map",
      "methodsCompletion": "Delete(${1:v2 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Decode",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Decode(${1:v2 /*type: uintptr*/}, ${2:v3 /*type: any*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Day",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Day()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Date",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Date()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DatabaseType",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "DNSNames",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CreateCRL",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CreateCRL(${1:v2 /*type: io.Reader*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: []pkix.RevokedCertificate*/}, ${4:v5 /*type: time.Time*/}, ${5:v6 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Country",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Copy",
      "structName": "regexp.Regexp",
      "structNameShort": "Regexp",
      "methodsCompletion": "Copy()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Cookies",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookies()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Cookie",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Cookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Cookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Context",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Context()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "ContentLength",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "ContentLength",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Contains",
      "structName": "net.IPNet",
      "structNameShort": "IPNet",
      "methodsCompletion": "Contains(${1:v2 /*type: net.IP*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Conn",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CommonName",
      "structName": "crypto/x509/pkix.Name",
      "structNameShort": "Name",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CombinedOutput",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "CombinedOutput()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CloseWithError",
      "structName": "io.PipeReader",
      "structNameShort": "PipeReader",
      "methodsCompletion": "CloseWithError(${1:v2 /*type: error*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CloseWithError",
      "structName": "io.PipeWriter",
      "structNameShort": "PipeWriter",
      "methodsCompletion": "CloseWithError(${1:v2 /*type: error*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "github.com/oschwald/maxminddb-golang.Reader",
      "structNameShort": "com/oschwald/maxminddb-golang.Reader",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "io.PipeReader",
      "structNameShort": "PipeReader",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "io.PipeWriter",
      "structNameShort": "PipeWriter",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Close",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Close",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib._yakFile",
      "structNameShort": "_yakFile",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Close",
      "structName": "palm/common/yak/yaklib.tcpConnection",
      "structNameShort": "tcpConnection",
      "methodsCompletion": "Close()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Clone",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Clone",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Clone",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Clock",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Clock()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "City",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CipherSuite",
      "structName": "crypto/tls.ConnectionState",
      "structNameShort": "ConnectionState",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Chown",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Chown(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Chmod",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Chmod(${1:v2 /*type: fs.FileMode*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CheckSignatureFrom",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CheckSignatureFrom(${1:v2 /*type: *x509.Certificate*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CheckSignature",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CheckSignature(${1:v2 /*type: x509.SignatureAlgorithm*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "CheckCRLSignature",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "CheckCRLSignature(${1:v2 /*type: *pkix.CertificateList*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Chdir",
      "structName": "os.File",
      "structNameShort": "File",
      "methodsCompletion": "Chdir()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Captures",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Capture",
      "structName": "github.com/dlclark/regexp2.Group",
      "structNameShort": "com/dlclark/regexp2.Group",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Cancel",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Callable",
      "structName": "palm/common/yak.yakVariable",
      "structNameShort": "yakVariable",
      "methodsCompletion": "Callable()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CRLDistributionPoints",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "CPEs",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CPEs",
      "structName": "palm/common/fp.HTTPFlow",
      "structNameShort": "HTTPFlow",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "CPEFromUrls",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "C",
      "structName": "time.Ticker",
      "structNameShort": "Ticker",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "C",
      "structName": "time.Timer",
      "structNameShort": "Timer",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BuildIn",
      "structName": "palm/common/utils.FileInfo",
      "structNameShort": "FileInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "BuildEpoch",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Broadcast",
      "structName": "sync.Cond",
      "structNameShort": "Cond",
      "methodsCompletion": "Broadcast()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Body",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Body",
      "structName": "net/http.Response",
      "structNameShort": "Response",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BinaryFormatMinorVersion",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BinaryFormatMajorVersion",
      "structName": "github.com/oschwald/maxminddb-golang.Metadata",
      "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Before",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Before(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "BasicConstraintsValid",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "BasicAuth",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "BasicAuth()",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "BasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "BasicAuth()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "BasicAuth",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "BasicAuth()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Banner",
      "structName": "palm/common/fp.FingerprintInfo",
      "structNameShort": "FingerprintInfo",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "AuthorityKeyId",
      "structName": "crypto/x509.Certificate",
      "structNameShort": "Certificate",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Asn",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": false,
      "fieldName": "Args",
      "structName": "os/exec.Cmd",
      "structNameShort": "Cmd",
      "methodsCompletion": "",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AppendFormat",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "AppendFormat(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "After",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "After(${1:v2 /*type: time.Time*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": false,
      "fieldName": "Addr",
      "structName": "palm/server/dbm/falcons/spacengine.NetSpaceEngineResult",
      "structNameShort": "NetSpaceEngineResult",
      "methodsCompletion": "",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddWithContext",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "AddWithContext(${1:v2 /*type: context.Context*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddDate",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "AddDate(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AddCookie",
      "structName": "net/http.Request",
      "structNameShort": "Request",
      "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "AddCookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "AddCookie",
      "structName": "palm/common/yak/yaklib.yakHttpRequest",
      "structNameShort": "yakHttpRequest",
      "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "palm/common/utils.SizedWaitGroup",
      "structNameShort": "SizedWaitGroup",
      "methodsCompletion": "Add()",
      "isGolangBuildOrigin": false
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "sync.WaitGroup",
      "structNameShort": "WaitGroup",
      "methodsCompletion": "Add(${1:v2 /*type: int*/})",
      "isGolangBuildOrigin": true
    },
    {
      "isMethod": true,
      "fieldName": "Add",
      "structName": "time.Time",
      "structNameShort": "Time",
      "methodsCompletion": "Add(${1:v2 /*type: time.Duration*/})",
      "isGolangBuildOrigin": true
    }
  ]
}