{
  "libNames": [
    "__global__",
    "bot",
    "brute",
    "bufio",
    "cli",
    "codec",
    "context",
    "crawler",
    "crawlerx",
    "csrf",
    "cve",
    "cwe",
    "db",
    "dictutil",
    "dns",
    "dyn",
    "env",
    "exec",
    "facades",
    "file",
    "finscan",
    "fuzz",
    "git",
    "gzip",
    "hids",
    "hook",
    "http",
    "httpool",
    "httpserver",
    "iiop",
    "io",
    "ja3",
    "java",
    "js",
    "json",
    "judge",
    "jwt",
    "ldap",
    "log",
    "math",
    "mitm",
    "mmdb",
    "nasl",
    "nuclei",
    "openai",
    "os",
    "pcapx",
    "ping",
    "poc",
    "rdp",
    "re",
    "re2",
    "redis",
    "regen",
    "report",
    "risk",
    "rpa",
    "sca",
    "servicescan",
    "simulator",
    "smb",
    "spacengine",
    "str",
    "subdomain",
    "suricata",
    "sync",
    "synscan",
    "systemd",
    "t3",
    "tcp",
    "time",
    "timezone",
    "tls",
    "tools",
    "udp",
    "x",
    "xhtml",
    "xml",
    "xpath",
    "yakit",
    "yaml",
    "yso",
    "zip"
  ],
  "libCompletions": [
    {
      "libName": "zip",
      "prefix": "zip.",
      "functions": [
        {
          "functionName": "Decompress(${1:zipFiledest /*type: string*/})",
          "document": "",
          "definitionStr": "Decompress(zipFile, dest string) error  doc:解压"
        },
        {
          "functionName": "Compress(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "Compress(string, ...string) error"
        }
      ]
    },
    {
      "libName": "yso",
      "prefix": "yso.",
      "functions": [
        {
          "functionName": "useTomcatEchoTemplate()",
          "document": "",
          "definitionStr": "useTomcatEchoTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useTomcatEchoEvilClass()",
          "document": "",
          "definitionStr": "useTomcatEchoEvilClass() yso.GenClassOptionFun"
        },
        {
          "functionName": "useTcpReverseTemplate()",
          "document": "",
          "definitionStr": "useTcpReverseTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useTcpReverseShellTemplate()",
          "document": "",
          "definitionStr": "useTcpReverseShellTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useTcpReverseShellEvilClass(${1:v1/*type: string*/}, ${2:v2/*type: int*/})",
          "document": "",
          "definitionStr": "useTcpReverseShellEvilClass(string, int) yso.GenClassOptionFun"
        },
        {
          "functionName": "useTcpReverseEvilClass(${1:v1/*type: string*/}, ${2:v2/*type: int*/})",
          "document": "",
          "definitionStr": "useTcpReverseEvilClass(string, int) yso.GenClassOptionFun"
        },
        {
          "functionName": "useSpringEchoTemplate()",
          "document": "",
          "definitionStr": "useSpringEchoTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useSleepTime(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func yso.useSleepTime(v1: int) return (r0: func GenClassOptionFun(v1: *yso.ClassConfig) )"
        },
        {
          "functionName": "useSleepTemplate()",
          "document": "",
          "definitionStr": "func yso.useSleepTemplate() return (r0: func GenClassOptionFun(v1: *yso.ClassConfig) )"
        },
        {
          "functionName": "useSleepEvilClass()",
          "document": "",
          "definitionStr": "func yso.useSleepEvilClass() return (r0: func GenClassOptionFun(v1: *yso.ClassConfig) )"
        },
        {
          "functionName": "useRuntimeExecTemplate()",
          "document": "",
          "definitionStr": "useRuntimeExecTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useRuntimeExecEvilClass(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "useRuntimeExecEvilClass(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "useProcessImplExecTemplate()",
          "document": "",
          "definitionStr": "useProcessImplExecTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useProcessImplExecEvilClass(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "useProcessImplExecEvilClass(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "useProcessBuilderExecTemplate()",
          "document": "",
          "definitionStr": "useProcessBuilderExecTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useProcessBuilderExecEvilClass(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "useProcessBuilderExecEvilClass(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "useMultiEchoEvilClass()",
          "document": "",
          "definitionStr": "useMultiEchoEvilClass() yso.GenClassOptionFun"
        },
        {
          "functionName": "useModifyTomcatMaxHeaderSizeTemplate()",
          "document": "",
          "definitionStr": "useModifyTomcatMaxHeaderSizeTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useHeaderParam(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func yso.useHeaderParam(v1: string, v2: string) return (r0: func GenClassOptionFun(v1: *yso.ClassConfig) )"
        },
        {
          "functionName": "useHeaderEchoTemplate()",
          "document": "",
          "definitionStr": "func yso.useHeaderEchoTemplate() return (r0: func GenClassOptionFun(v1: *yso.ClassConfig) )"
        },
        {
          "functionName": "useHeaderEchoEvilClass()",
          "document": "",
          "definitionStr": "func yso.useHeaderEchoEvilClass() return (r0: func GenClassOptionFun(v1: *yso.ClassConfig) )"
        },
        {
          "functionName": "useDNSlogTemplate()",
          "document": "",
          "definitionStr": "useDNSlogTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useDNSLogEvilClass(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "useDNSLogEvilClass(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "useConstructorExecutor()",
          "document": "",
          "definitionStr": "useConstructorExecutor() yso.GenClassOptionFun"
        },
        {
          "functionName": "useClassMultiEchoTemplate()",
          "document": "",
          "definitionStr": "useClassMultiEchoTemplate() yso.GenClassOptionFun"
        },
        {
          "functionName": "useBytesEvilClass(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "useBytesEvilClass([]uint8) yso.GenClassOptionFun"
        },
        {
          "functionName": "useBytesClass(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "useBytesClass([]uint8) yso.GenClassOptionFun"
        },
        {
          "functionName": "useBase64BytesClass(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "useBase64BytesClass(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "tcpReverseToken(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "tcpReverseToken(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "tcpReversePort(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "tcpReversePort(int) yso.GenClassOptionFun"
        },
        {
          "functionName": "tcpReverseHost(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "tcpReverseHost(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "springRuntimeExecAction()",
          "document": "",
          "definitionStr": "springRuntimeExecAction() yso.GenClassOptionFun"
        },
        {
          "functionName": "springParam(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "springParam(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "springHeader(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "springHeader(string, string) yso.GenClassOptionFun"
        },
        {
          "functionName": "springEchoBody()",
          "document": "",
          "definitionStr": "springEchoBody() yso.GenClassOptionFun"
        },
        {
          "functionName": "obfuscationClassConstantPool()",
          "document": "",
          "definitionStr": "obfuscationClassConstantPool() yso.GenClassOptionFun"
        },
        {
          "functionName": "evilClassName(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "evilClassName(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "dump(${1:i})",
          "document": "",
          "definitionStr": "dump(i any) (string, error)"
        },
        {
          "functionName": "dnslogDomain(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "dnslogDomain(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "command(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "command(string) yso.GenClassOptionFun"
        },
        {
          "functionName": "ToJson(${1:i})",
          "document": "",
          "definitionStr": "ToJson(i any) (string, error)"
        },
        {
          "functionName": "ToBytes(${1:i})",
          "document": "",
          "definitionStr": "ToBytes(i any) ([]byte, error)"
        },
        {
          "functionName": "ToBcel(${1:i})",
          "document": "",
          "definitionStr": "ToBcel(i any) (string, error)"
        },
        {
          "functionName": "LoadClassFromBytes(${1:v1/*type: bytes*/}, ${2:v2/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "func yso.LoadClassFromBytes(v1: bytes, v2 ...yso.GenClassOptionFun) return (r0: *javaclassparser.ClassObject, r1: error)"
        },
        {
          "functionName": "LoadClassFromBase64(${1:v1/*type: string*/}, ${2:v2/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "func yso.LoadClassFromBase64(v1: string, v2 ...yso.GenClassOptionFun) return (r0: *javaclassparser.ClassObject, r1: error)"
        },
        {
          "functionName": "LoadClassFromBCEL(${1:v1/*type: string*/}, ${2:v2/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "func yso.LoadClassFromBCEL(v1: string, v2 ...yso.GenClassOptionFun) return (r0: *javaclassparser.ClassObject, r1: error)"
        },
        {
          "functionName": "GetURLDNSJavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetURLDNSJavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetSimplePrincipalCollectionJavaObject()",
          "document": "",
          "definitionStr": "GetSimplePrincipalCollectionJavaObject() (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetJdk8u20JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetJdk8u20JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetJdk7u21JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetJdk7u21JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetJavassistWeld1JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetJavassistWeld1JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetJavaObjectFromBytes(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "GetJavaObjectFromBytes([]uint8) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetJSON1JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetJSON1JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetJBossInterceptors1JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetJBossInterceptors1JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetGroovy1JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetGroovy1JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetGadgetNameByFun(${1:i})",
          "document": "",
          "definitionStr": "GetGadgetNameByFun(i any) (string, error)"
        },
        {
          "functionName": "GetFindGadgetByDNSJavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetFindGadgetByDNSJavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollectionsK4JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetCommonsCollectionsK4JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollectionsK3JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetCommonsCollectionsK3JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollectionsK2JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetCommonsCollectionsK2JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollectionsK1JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetCommonsCollectionsK1JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections8JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections8JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections7JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections7JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections6JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections6JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections5JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections5JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections4JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections4JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections3JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections3JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections2JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections2JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsCollections1JavaObject(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "GetCommonsCollections1JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsBeanutils1JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "CB1",
          "definitionStr": "GetCommonsBeanutils1JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsBeanutils192NOCCJavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "CB192NOCC的Java恶意对象",
          "definitionStr": "GetCommonsBeanutils192NOCCJavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetCommonsBeanutils183NOCCJavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "CB183NoCC依赖的Java恶意对象",
          "definitionStr": "GetCommonsBeanutils183NOCCJavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetClick1JavaObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "生成 Click1 恶意对象",
          "definitionStr": "GetClick1JavaObject(...yso.GenClassOptionFun) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetBeanShell1JavaObject(${1:v1/*type: string*/})",
          "document": "生成 BeanShell1 Java反序列化对象",
          "definitionStr": "GetBeanShell1JavaObject(string) (*yso.JavaObject, error)"
        },
        {
          "functionName": "GetAllTemplatesGadget()",
          "document": "获取所有模版执行的 Gadget",
          "definitionStr": "GetAllTemplatesGadget() []yso.TemplatesGadget"
        },
        {
          "functionName": "GetAllRuntimeExecGadget()",
          "document": "获取所有命令执行的 Gadget",
          "definitionStr": "GetAllRuntimeExecGadget() []yso.RuntimeExecGadget"
        },
        {
          "functionName": "GetAllGadget()",
          "document": "获取所有可以生成的工具 Gadget",
          "definitionStr": "GetAllGadget() []any"
        },
        {
          "functionName": "GenerateTomcatEchoClassObject(${1:options...})",
          "document": "生成一个Tomcat回显恶意类",
          "definitionStr": "GenerateTomcatEchoClassObject(options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateTcpReverseShellEvilClassObject(${1:host /*type: string*/}, ${2:port /*type: int*/}, ${3:options...})",
          "document": "生成一个TCP反弹Shell的恶意类对象",
          "definitionStr": "GenerateTcpReverseShellEvilClassObject(host string, port int, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateTcpReverseEvilClassObject(${1:host /*type: string*/}, ${2:port /*type: int*/}, ${3:options...})",
          "document": "生成一个TCP反连的恶意类对象",
          "definitionStr": "GenerateTcpReverseEvilClassObject(host string, port int, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateSpringEchoEvilClassObject(${1:options...})",
          "document": "生成一个SpringEcho恶意类对象\"\"",
          "definitionStr": "GenerateSpringEchoEvilClassObject(options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)  doc:spring生成"
        },
        {
          "functionName": "GenerateSleepClassObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "func yso.GenerateSleepClassObject(v1 ...yso.GenClassOptionFun) return (r0: *javaclassparser.ClassObject, r1: error)"
        },
        {
          "functionName": "GenerateRuntimeExecEvilClassObject(${1:cmd /*type: string*/}, ${2:options...})",
          "document": "生成一个RuntimeExec的恶意类",
          "definitionStr": "GenerateRuntimeExecEvilClassObject(cmd string, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateProcessImplExecEvilClassObject(${1:cmd /*type: string*/}, ${2:options...})",
          "document": "生成一个ProcessImpl执行的恶意类对象",
          "definitionStr": "GenerateProcessImplExecEvilClassObject(cmd string, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateProcessBuilderExecEvilClassObject(${1:cmd /*type: string*/}, ${2:options...})",
          "document": "生成一个ProcessBuilderExec方式的恶意类对象",
          "definitionStr": "GenerateProcessBuilderExecEvilClassObject(cmd string, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateMultiEchoClassObject(${1:options...})",
          "document": "生成一个兼容性Echo回显恶意对象",
          "definitionStr": "GenerateMultiEchoClassObject(options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateModifyTomcatMaxHeaderSizeEvilClassObject(${1:options...})",
          "document": "生成一个修改Tomcat最大头长度的恶意类",
          "definitionStr": "GenerateModifyTomcatMaxHeaderSizeEvilClassObject(options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        },
        {
          "functionName": "GenerateHeaderEchoClassObject(${1:v1/*type ...yso.GenClassOptionFun*/})",
          "document": "",
          "definitionStr": "func yso.GenerateHeaderEchoClassObject(v1 ...yso.GenClassOptionFun) return (r0: *javaclassparser.ClassObject, r1: error)"
        },
        {
          "functionName": "GenerateDNSlogEvilClassObject(${1:domain /*type: string*/}, ${2:options...})",
          "document": "生成一个制定域名的DNSLog恶意类",
          "definitionStr": "GenerateDNSlogEvilClassObject(domain string, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)  doc:dnslog生成"
        },
        {
          "functionName": "GenerateClassObjectFromBytes(${1:bytes /*type: []byte*/}, ${2:options...})",
          "document": "从Bytes中加载Class",
          "definitionStr": "GenerateClassObjectFromBytes(bytes []byte, options ...GenClassOptionFun) (*javaclassparser.ClassObject, error)"
        }
      ]
    },
    {
      "libName": "yaml",
      "prefix": "yaml.",
      "functions": [
        {
          "functionName": "UnmarshalStrict(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "UnmarshalStrict([]uint8) (any, error)"
        },
        {
          "functionName": "Unmarshal(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "Unmarshal([]uint8) (any, error)"
        },
        {
          "functionName": "Marshal(${1:in})",
          "document": "",
          "definitionStr": "Marshal(in any) (out []byte, err error)  doc:Marshal serializes the value provided into a YAML document. The structureof the generated document will reflect the structure of the value itself.Maps and pointers (to struct, string, int, etc) are accepted as the in value.Struct fields are only marshalled if they are exported (have an upper casefirst letter), and are marshalled using the field name lowercased as thedefault key. Custom keys may be defined via the \"yaml\" name in the fieldtag: the content preceding the first comma is used as the key, and thefollowing comma-separated options are used to tweak the marshalling process.Conflicting names result in a runtime error.The field tag format accepted is:    `(...) yaml:\"[\u003ckey\u003e][,\u003cflag1\u003e[,\u003cflag2\u003e]]\" (...)`The following flags are currently supported:    omitempty    Only include the field if it's not set to the zero                 value for the type or to empty slices or maps.                 Zero valued structs will be omitted if all their public                 fields are zero, unless they implement an IsZero                 method (see the IsZeroer interface type), in which                 case the field will be excluded if IsZero returns true.    flow         Marshal using a flow style (useful for structs,                 sequences and maps).    inline       Inline the field, which must be a struct or a map,                 causing all of its fields or keys to be processed as if                 they were part of the outer struct. For maps, keys must                 not conflict with the yaml keys of other struct fields.In addition, if the key is \"-\", the field is ignored.For example:    type T struct {        F int `yaml:\"a,omitempty\"`        B int    }    yaml.Marshal(\u0026T{B: 2}) // Returns \"b: 2\\n\"    yaml.Marshal(\u0026T{F: 1}} // Returns \"a: 1\\nb: 0\\n\""
        }
      ]
    },
    {
      "libName": "yakit",
      "prefix": "yakit.",
      "functions": [
        {
          "functionName": "Warn(${1:tmp /*type: string*/}, ${2:items...})",
          "document": "让 Yakit UI 输出告警信息",
          "definitionStr": "Warn(tmp string, items ...any)"
        },
        {
          "functionName": "UpdateYakitStoreLocal(${1:f /*type: string*/})",
          "document": "",
          "definitionStr": "UpdateYakitStoreLocal(f string) error"
        },
        {
          "functionName": "UpdateYakitStoreFromGit(${1:ctx /*type: context.Context*/}, ${2:ghUrl /*type: string*/}, ${3:proxy...})",
          "document": "从 Git 中更新 Yakit 商店内容",
          "definitionStr": "UpdateYakitStoreFromGit(\n\tctx context.Context, ghUrl string,\n\tproxy ...string,\n) error"
        },
        {
          "functionName": "UpdateYakitStore()",
          "document": "使用 yakit 来直接更新 yakit-store 中的插件",
          "definitionStr": "UpdateYakitStore() error"
        },
        {
          "functionName": "UpdateOnlineYakitStore()",
          "document": "更新所有线上商店的内容",
          "definitionStr": "UpdateOnlineYakitStore() error"
        },
        {
          "functionName": "Text(${1:tmp})",
          "document": "",
          "definitionStr": "Text(tmp any)"
        },
        {
          "functionName": "TableData(${1:v1/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "TableData(string, map[string]any) *yaklib.YakitFixedTableData"
        },
        {
          "functionName": "StatusCard(${1:id /*type: string*/}, ${2:data}, ${3:tags...})",
          "document": "",
          "definitionStr": "StatusCard(id string, data any, tags ...string)"
        },
        {
          "functionName": "SetProgressEx(${1:id /*type: string*/}, ${2:f /*type: float64*/})",
          "document": "设置额外进度条的进度信息（默认进度条id为 `main`）",
          "definitionStr": "SetProgressEx(id string, f float64)"
        },
        {
          "functionName": "SetProgress(${1:f /*type: float64*/})",
          "document": "",
          "definitionStr": "SetProgress(f float64)"
        },
        {
          "functionName": "SetOnlineBaseUrl(${1:u /*type: string*/})",
          "document": "设置 Yakit Online 的基础 URL",
          "definitionStr": "SetOnlineBaseUrl(u string)"
        },
        {
          "functionName": "SavePortFromResult(${1:t})",
          "document": "",
          "definitionStr": "SavePortFromResult(t any) error"
        },
        {
          "functionName": "SavePayloadByFile(${1:group /*type: string*/}, ${2:fileName /*type: string*/})",
          "document": "",
          "definitionStr": "SavePayloadByFile(group string, fileName string) error"
        },
        {
          "functionName": "SavePayload(${1:group /*type: string*/}, ${2:payloads /*type: []string*/})",
          "document": "",
          "definitionStr": "SavePayload(group string, payloads []string) error"
        },
        {
          "functionName": "SaveHTTPFlow(${1:url /*type: string*/}, ${2:req /*type: *http.Request*/}, ${3:rsp /*type: *http.Response*/})",
          "document": "保存 HTTP Flow 到数据库",
          "definitionStr": "SaveHTTPFlow(url string, req *http.Request, rsp *http.Response) error"
        },
        {
          "functionName": "SaveDomain(${1:domain /*type: string*/}, ${2:ip...})",
          "document": "",
          "definitionStr": "SaveDomain(domain string, ip ...string) error"
        },
        {
          "functionName": "Report(${1:i /*type: int*/})",
          "document": "返回报告的内容给 Yakit",
          "definitionStr": "Report(i int)"
        },
        {
          "functionName": "QueryUrlsByKeyword(${1:k /*type: string*/})",
          "document": "查询所有带一定关键字的 URL",
          "definitionStr": "QueryUrlsByKeyword(k string) chan string"
        },
        {
          "functionName": "QueryUrlsAll()",
          "document": "搜索数据库中所有可用的 URL (httpflows 表)",
          "definitionStr": "QueryUrlsAll() chan string"
        },
        {
          "functionName": "QueryPortAssetByNetwork(${1:network /*type: string*/})",
          "document": "查询端口资产",
          "definitionStr": "QueryPortAssetByNetwork(network string) (chan *yakit.Port, error)"
        },
        {
          "functionName": "QueryHostsByNetwork(${1:network /*type: string*/})",
          "document": "根据网段查询 host 资产",
          "definitionStr": "QueryHostsByNetwork(network string) (chan *yakit.Host, error)"
        },
        {
          "functionName": "QueryHostsByDomain(${1:keyword /*type: string*/})",
          "document": "根据 Domain 查询 Host 资产",
          "definitionStr": "QueryHostsByDomain(keyword string) (chan *yakit.Host, error)"
        },
        {
          "functionName": "QueryHostPortByNetworkAndPort(${1:networkport /*type: string*/})",
          "document": "根据 network 和 port 查询端口 host:port 格式",
          "definitionStr": "QueryHostPortByNetworkAndPort(network, port string) chan string"
        },
        {
          "functionName": "QueryHostPortByNetwork(${1:network /*type: string*/})",
          "document": "根据目标网段搜索本机的 host:port",
          "definitionStr": "QueryHostPortByNetwork(network string) chan string"
        },
        {
          "functionName": "QueryHostPortByKeyword(${1:target /*type: string*/})",
          "document": "根据指纹信息搜索所有符合条件的 host:port",
          "definitionStr": "QueryHostPortByKeyword(target string) chan string"
        },
        {
          "functionName": "QueryHostPortAll()",
          "document": "查询数据库中所有的 [host]:[port] 的形式，例如（192.168.100.1:80）",
          "definitionStr": "QueryHostPortAll() chan string"
        },
        {
          "functionName": "QueryHTTPFlowsByKeyword(${1:k /*type: string*/})",
          "document": "根据关键字搜索查询符合条件的 HTTPFlow",
          "definitionStr": "QueryHTTPFlowsByKeyword(k string) chan *yakit.HTTPFlow"
        },
        {
          "functionName": "QueryHTTPFlowsAll()",
          "document": "查询所有的 HTTPFlow，包含请求和结果的所有信息",
          "definitionStr": "QueryHTTPFlowsAll() chan *yakit.HTTPFlow"
        },
        {
          "functionName": "QueryDomainsByTitle(${1:title /*type: string*/})",
          "document": "根据域名关联网站的标题查询域名",
          "definitionStr": "QueryDomainsByTitle(title string) (chan *yakit.Domain, error)"
        },
        {
          "functionName": "QueryDomainsByNetwork(${1:network /*type: string*/})",
          "document": "通过域名关联的 IP 查询域名",
          "definitionStr": "QueryDomainsByNetwork(network string) (chan *yakit.Domain, error)"
        },
        {
          "functionName": "QueryDomainsByDomainKeyword(${1:keyword /*type: string*/})",
          "document": "从数据库中根据域名关键字查询域名",
          "definitionStr": "QueryDomainsByDomainKeyword(keyword string) (chan *yakit.Domain, error)"
        },
        {
          "functionName": "Output(${1:i})",
          "document": "输出任意的对象到 Yakit UI 中，如果对象是图，将会自动创建一个图，如果对象是一个其他东西，将会自动 JSON 序列化",
          "definitionStr": "Output(i any)"
        },
        {
          "functionName": "NewWordCloud()",
          "document": "生成词云",
          "definitionStr": "NewWordCloud() *yaklib.YakitGraph"
        },
        {
          "functionName": "NewTable(${1:v1/*type ...string*/})",
          "document": "生成表格（无法实时刷新，对比 EnableTable）",
          "definitionStr": "NewTable(...string) *yaklib.YakitTable"
        },
        {
          "functionName": "NewPieGraph()",
          "document": "生成饼图数据",
          "definitionStr": "NewPieGraph() *yaklib.YakitGraph"
        },
        {
          "functionName": "NewLineGraph()",
          "document": "生成线形图数据",
          "definitionStr": "NewLineGraph() *yaklib.YakitGraph"
        },
        {
          "functionName": "NewHTTPFlowRisk(${1:riskName/*type: string*/}, ${2:isHttps/*type: bool*/}, ${3:url/*type: string*/}, ${4:req/*type: bytes*/}, ${5:rsp/*type: bytes*/})",
          "document": "生成一个 HTTPFlow 的风险项",
          "definitionStr": "NewHTTPFlowRisk(string, bool, string, []uint8, []uint8) *yaklib.YakitHTTPFlowRisk"
        },
        {
          "functionName": "NewClient(${1:yakitWebhook/*type: string*/})",
          "document": "创建一个与 yakit 通信的通道（webhook）",
          "definitionStr": "NewClient(string) *yaklib.YakitClient"
        },
        {
          "functionName": "NewBarGraph()",
          "document": "创建一个柱形图",
          "definitionStr": "NewBarGraph() *yaklib.YakitGraph"
        },
        {
          "functionName": "Markdown(${1:tmp})",
          "document": "",
          "definitionStr": "Markdown(tmp any)"
        },
        {
          "functionName": "InitYakit(${1:y /*type: *YakitClient*/})",
          "document": "手动初始化 Yakit 客户端，用于自定义",
          "definitionStr": "InitYakit(y *YakitClient)"
        },
        {
          "functionName": "Info(${1:tmp /*type: string*/}, ${2:items...})",
          "document": "在 Yakit UI 中输出 Info 级别的信息",
          "definitionStr": "Info(tmp string, items ...any)"
        },
        {
          "functionName": "GetOnlineBaseUrl()",
          "document": "",
          "definitionStr": "GetOnlineBaseUrl() string"
        },
        {
          "functionName": "GetHomeTempDir()",
          "document": "",
          "definitionStr": "GetHomeTempDir() string"
        },
        {
          "functionName": "GetHomeDir()",
          "document": "",
          "definitionStr": "GetHomeDir() string"
        },
        {
          "functionName": "GenerateYakitMITMHooksParams(${1:method /*type: string*/}, ${2:url /*type: string*/}, ${3:opts...})",
          "document": "",
          "definitionStr": "GenerateYakitMITMHooksParams(method string, url string, opts ...yakhttp.HttpOption) ([]any, error)"
        },
        {
          "functionName": "File(${1:fileName /*type: string*/}, ${2:desc...})",
          "document": "",
          "definitionStr": "File(fileName string, desc ...any)"
        },
        {
          "functionName": "Error(${1:tmp /*type: string*/}, ${2:items...})",
          "document": "在 Yakit 的 UI 中输出输出 Error 级别的信息",
          "definitionStr": "Error(tmp string, items ...any)"
        },
        {
          "functionName": "EnableWebsiteTrees(${1:targets /*type: string*/})",
          "document": "启动在结果中启动网站树视图（案例：基础爬虫）",
          "definitionStr": "EnableWebsiteTrees(targets string)"
        },
        {
          "functionName": "EnableTable(${1:tableName /*type: string*/}, ${2:columns /*type: []string*/})",
          "document": "启动一个实时刷新的表格，一般用这个表格来收集结果",
          "definitionStr": "EnableTable(tableName string, columns []string)"
        },
        {
          "functionName": "DeletePayloadByGroup(${1:group /*type: string*/})",
          "document": "",
          "definitionStr": "DeletePayloadByGroup(group string) error"
        },
        {
          "functionName": "AutoInitYakit()",
          "document": "自动初始化与 Yakit 的链接",
          "definitionStr": "AutoInitYakit()"
        }
      ]
    },
    {
      "libName": "xpath",
      "prefix": "xpath.",
      "functions": [
        {
          "functionName": "SelectAttr(${1:n /*type: *html.Node*/}, ${2:name /*type: string*/})",
          "document": "",
          "definitionStr": "SelectAttr(n *html.Node, name string) (val string)  doc:SelectAttr returns the attribute value with the specified name."
        },
        {
          "functionName": "QueryAll(${1:top /*type: *html.Node*/}, ${2:expr /*type: string*/})",
          "document": "",
          "definitionStr": "QueryAll(top *html.Node, expr string) ([]*html.Node, error)  doc:QueryAll searches the html.Node that matches by the specified XPath expr.Return an error if the expression `expr` cannot be parsed."
        },
        {
          "functionName": "Query(${1:top /*type: *html.Node*/}, ${2:expr /*type: string*/})",
          "document": "",
          "definitionStr": "Query(top *html.Node, expr string) (*html.Node, error)  doc:Query runs the given XPath expression against the given html.Node andreturns the first matching html.Node, or nil if no matches are found.Returns an error if the expression `expr` cannot be parsed."
        },
        {
          "functionName": "OutputHTMLSelf(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "OutputHTMLSelf(*html.Node) string"
        },
        {
          "functionName": "OutputHTML(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "OutputHTML(*html.Node) string"
        },
        {
          "functionName": "LoadHTMLDocument(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "LoadHTMLDocument(any) (*html.Node, error)"
        },
        {
          "functionName": "InnerText(${1:n /*type: *html.Node*/})",
          "document": "",
          "definitionStr": "InnerText(n *html.Node) string  doc:InnerText returns the text between the start and end tags of the object."
        },
        {
          "functionName": "FindOne(${1:top /*type: *html.Node*/}, ${2:expr /*type: string*/})",
          "document": "",
          "definitionStr": "FindOne(top *html.Node, expr string) *html.Node  doc:FindOne is like Query but will panics if the expression `expr` cannot be parsed.See `Query()` function."
        },
        {
          "functionName": "Find(${1:top /*type: *html.Node*/}, ${2:expr /*type: string*/})",
          "document": "",
          "definitionStr": "Find(top *html.Node, expr string) []*html.Node  doc:Find is like QueryAll but Will panics if the expression `expr` cannot be parsed.See `QueryAll()` function."
        },
        {
          "functionName": "ExistedAttr(${1:n /*type: *html.Node*/}, ${2:name /*type: string*/})",
          "document": "",
          "definitionStr": "ExistedAttr(n *html.Node, name string) bool  doc:ExistsAttr returns whether attribute with specified name exists."
        },
        {
          "functionName": "CreateXPathNavigator(${1:v1/*type: *html.Node*/})",
          "document": "",
          "definitionStr": "CreateXPathNavigator(*html.Node) *htmlquery.NodeNavigator"
        }
      ]
    },
    {
      "libName": "xml",
      "prefix": "xml.",
      "functions": [
        {
          "functionName": "loads(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func xml.loads(v1: any) return (r0: yaklib.StringMap)"
        },
        {
          "functionName": "dumps(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func xml.dumps(v1: any) return (r0: bytes)"
        },
        {
          "functionName": "Escape(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func xml.Escape(v1: bytes) return (r0: string)"
        }
      ]
    },
    {
      "libName": "xhtml",
      "prefix": "xhtml.",
      "functions": [
        {
          "functionName": "Walker(${1:h}, ${2:handler /*type: func(node *html.Node)*/})",
          "document": "遍历 HTML",
          "definitionStr": "Walker(h any, handler func(node *html.Node)) error"
        },
        {
          "functionName": "RandomUpperAndLower(${1:s /*type: string*/})",
          "document": "随机大小写变换",
          "definitionStr": "RandomUpperAndLower(s string) string"
        },
        {
          "functionName": "MatchBetween(${1:srcBody}, ${2:start /*type: string*/}, ${3:end /*type: string*/}, ${4:max /*type: int*/})",
          "document": "",
          "definitionStr": "MatchBetween(srcBody any, start string, end string, max int) (int, string)"
        },
        {
          "functionName": "GenerateXPath(${1:node /*type: *html.Node*/})",
          "document": "生成 xpath",
          "definitionStr": "GenerateXPath(node *html.Node) string"
        },
        {
          "functionName": "Find(${1:html/*type: any*/}, ${2:keyword/*type: string*/})",
          "document": "寻找一个关键字在 HTML 中的位置",
          "definitionStr": "Find(any, string) []*xhtml.MatchNodeInfo"
        },
        {
          "functionName": "CompareHtml(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "CompareHtml(any, any) ([]*xhtml.DiffInfo, error)"
        }
      ]
    },
    {
      "libName": "x",
      "prefix": "x.",
      "functions": [
        {
          "functionName": "Zip(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "Zip(any, any) []funk.Tuple"
        },
        {
          "functionName": "WaitConnect(${1:addr /*type: string*/}, ${2:timeout /*type: float64*/})",
          "document": "等待一个链接具体多少秒钟",
          "definitionStr": "WaitConnect(addr string, timeout float64) error"
        },
        {
          "functionName": "Values(${1:out})",
          "document": "取 Map 中的 Value",
          "definitionStr": "Values(out any) any  doc:Values creates an array of the own enumerable map values or struct field values."
        },
        {
          "functionName": "ToMap(${1:in}, ${2:pivot /*type: string*/})",
          "document": "数字根据某一个字段生成 Map",
          "definitionStr": "ToMap(in any, pivot string) any  doc:ToMap transforms a slice of instances to a Map.[]*Foo =\u003e Map\u003cint, *Foo\u003e"
        },
        {
          "functionName": "ToFloat64(${1:x})",
          "document": "解析成数字（double/float64）",
          "definitionStr": "ToFloat64(x any) (float64, bool)  doc:ToFloat64 converts any numeric value to float64."
        },
        {
          "functionName": "Tail(${1:arr})",
          "document": "出去第一个元素之外的所有数组",
          "definitionStr": "Tail(arr any) any  doc:Tail gets all but the first element of array."
        },
        {
          "functionName": "Sum(${1:arr})",
          "document": "取和",
          "definitionStr": "Sum(arr any) float64  doc:Sum computes the sum of the values in array."
        },
        {
          "functionName": "Subtract(${1:x}, ${2:y})",
          "document": "集合相减",
          "definitionStr": "Subtract(x any, y any) any  doc:Subtract returns the subtraction between two collections."
        },
        {
          "functionName": "Sort(${1:x}, ${2:less /*type: func(i, j int) bool*/})",
          "document": "",
          "definitionStr": "Sort(x any, less func(i, j int) bool)  doc:SliceStable sorts the slice x using the provided lessfunction, keeping equal elements in their original order.It panics if x is not a slice.The less function must satisfy the same requirements asthe Interface type's Less method."
        },
        {
          "functionName": "Some(${1:in}, ${2:elements...})",
          "document": "",
          "definitionStr": "Some(in any, elements ...any) bool  doc:Some returns true if atleast one element is present in an iteratee."
        },
        {
          "functionName": "Shuffle(${1:in})",
          "document": "打乱集合顺序",
          "definitionStr": "Shuffle(in any) any  doc:Shuffle creates an array of shuffled values"
        },
        {
          "functionName": "Shift(${1:v1/*type: any*/})",
          "document": "取出第一个数组元素",
          "definitionStr": "Shift(any) any"
        },
        {
          "functionName": "Reverse(${1:in})",
          "document": "数组反向",
          "definitionStr": "Reverse(in any) any  doc:Reverse transforms an array the first element will become the last,the second element will become the second to last, etc."
        },
        {
          "functionName": "RemoveRepeat(${1:in})",
          "document": "移除数组/Slice中重复元素",
          "definitionStr": "RemoveRepeat(in any) any  doc:Uniq creates an array with unique values."
        },
        {
          "functionName": "Reduce(${1:v1/*type: any*/}, ${2:v2/*type: func funkGeneralReduceFuncType(v1: any, v2: any) return(any) */}, ${3:initValue/*type: any*/})",
          "document": "函数式编程 Reducer 支持",
          "definitionStr": "Reduce(any, yaklib.funkGeneralReduceFuncType, any) any"
        },
        {
          "functionName": "Range(${1:v1/*type: int*/})",
          "document": "生成一个范围数组/Slice",
          "definitionStr": "Range(int) []any"
        },
        {
          "functionName": "Min(${1:i})",
          "document": "取最小值",
          "definitionStr": "Min(i any) any"
        },
        {
          "functionName": "Max(${1:i})",
          "document": "取最大值",
          "definitionStr": "Max(i any) any"
        },
        {
          "functionName": "Map(${1:v1/*type: any*/}, ${2:v2/*type: func funkGeneralFuncType(v1: any) return(any) */})",
          "document": "批处理",
          "definitionStr": "Map(any, yaklib.funkGeneralFuncType) any"
        },
        {
          "functionName": "Keys(${1:out})",
          "document": "取 Map 的所有 Key",
          "definitionStr": "Keys(out any) any  doc:Keys creates an array of the own enumerable map keys or struct field names."
        },
        {
          "functionName": "IsSubset(${1:x}, ${2:y})",
          "document": "判断子集关系",
          "definitionStr": "IsSubset(x any, y any) bool  doc:Subset returns true if collection x is a subset of y."
        },
        {
          "functionName": "Intersect(${1:x}, ${2:y})",
          "document": "计算交集",
          "definitionStr": "Intersect(x any, y any) any"
        },
        {
          "functionName": "IndexOf(${1:in}, ${2:elem})",
          "document": "判断元素在数组中的位置",
          "definitionStr": "IndexOf(in any, elem any) int  doc:IndexOf gets the index at which the first occurrence of value is found in array or return -1if the value cannot be found"
        },
        {
          "functionName": "If(${1:condition/*type: bool*/}, ${2:obj1/*type: any*/}, ${3:obj2/*type: any*/})",
          "document": "类似 SQL 中的 IF 函数",
          "definitionStr": "If(bool, any, any) any"
        },
        {
          "functionName": "Head(${1:arr})",
          "document": "取第一个元素",
          "definitionStr": "Head(arr any) any  doc:Head gets the first element of array."
        },
        {
          "functionName": "ForeachRight(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: any) */})",
          "document": "反向 For 循环",
          "definitionStr": "ForeachRight(any, func(any))"
        },
        {
          "functionName": "Foreach(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: any) */})",
          "document": "For 循环的函数式编程支持",
          "definitionStr": "Foreach(any, func(any))"
        },
        {
          "functionName": "Find(${1:v1/*type: any*/}, ${2:v2/*type: func (v1: any) return(bool) */})",
          "document": "寻找符合要求的某个元素",
          "definitionStr": "Find(any, func(any) bool) any"
        },
        {
          "functionName": "Filter(${1:slice/*type: any*/}, ${2:v2/*type: func (v1: any) return(bool) */})",
          "document": "使用一个函数 func(i): bool 过滤某数组",
          "definitionStr": "Filter(any, func(any) bool) any"
        },
        {
          "functionName": "Every(${1:in}, ${2:elements...})",
          "document": "",
          "definitionStr": "Every(in any, elements ...any) bool  doc:Every returns true if every element is present in a iteratee."
        },
        {
          "functionName": "Equal(${1:expected}, ${2:actual})",
          "document": "判断两个元素是否相等",
          "definitionStr": "Equal(expected any, actual any) bool  doc:IsEqual returns if the two objects are equal"
        },
        {
          "functionName": "Drop(${1:in}, ${2:n /*type: int*/})",
          "document": "丢弃数组",
          "definitionStr": "Drop(in any, n int) any  doc:Drop creates an array/slice with `n` elements dropped from the beginning."
        },
        {
          "functionName": "Difference(${1:x}, ${2:y})",
          "document": "计算两个元素的差分",
          "definitionStr": "Difference(x any, y any) (any, any)  doc:Difference returns the difference between two collections."
        },
        {
          "functionName": "ConvertToMap(${1:v1/*type: any*/})",
          "document": "把一个对象尽可能转换为 map[string][]string",
          "definitionStr": "ConvertToMap(any) map[string][]string"
        },
        {
          "functionName": "Contains(${1:in}, ${2:elem})",
          "document": "集合中是否包含某一个元素",
          "definitionStr": "Contains(in any, elem any) bool  doc:Contains returns true if an element is present in a iteratee."
        },
        {
          "functionName": "Chunk(${1:arr}, ${2:size /*type: int*/})",
          "document": "把集合按数量分组",
          "definitionStr": "Chunk(arr any, size int) any  doc:Chunk creates an array of elements split into groups with the length of size.If array can't be split evenly, the final chunk will bethe remaining element."
        },
        {
          "functionName": "Any(${1:objs...})",
          "document": "元素中至少有一个为 true",
          "definitionStr": "Any(objs ...any) bool  doc:Any returns true if any element of the iterable is not empty. If the iterable is empty, return False."
        },
        {
          "functionName": "All(${1:objs...})",
          "document": "所有元素都存在且为 true",
          "definitionStr": "All(objs ...any) bool  doc:All returns true if all elements of the iterable are not empty (or if the iterable is empty)"
        }
      ]
    },
    {
      "libName": "udp",
      "prefix": "udp.",
      "functions": [
        {
          "functionName": "serverTimeout(${1:v1/*type: float64*/})",
          "document": "【可选】设置服务器默认超时时间",
          "definitionStr": "serverTimeout(float64) yaklib.udpServerOpt"
        },
        {
          "functionName": "serverContext(${1:v1/*type: context.Context*/})",
          "document": "【可选】设置服务器上下文",
          "definitionStr": "serverContext(context.Context) yaklib.udpServerOpt"
        },
        {
          "functionName": "serverCallback(${1:v1/*type: func (v1: *yaklib.udpConn, v2: bytes, v3: net.Addr) */})",
          "document": "【重要参数】设置服务器的处理函数",
          "definitionStr": "serverCallback(func(*yaklib.udpConn, []uint8, net.Addr)) yaklib.udpServerOpt"
        },
        {
          "functionName": "clientTimeout(${1:v1/*type: float64*/})",
          "document": "【可选】设置默认的客户端超时时间",
          "definitionStr": "clientTimeout(float64) yaklib.udpClientOption"
        },
        {
          "functionName": "clientLocalAddr(${1:localaddr/*type: string*/})",
          "document": "【可选】设置客户端的本地监听地址",
          "definitionStr": "clientLocalAddr(string) yaklib.udpClientOption"
        },
        {
          "functionName": "Serve(${1:host /*type: string*/}, ${2:port}, ${3:opts...})",
          "document": "启动一个 UDP 服务器",
          "definitionStr": "Serve(host string, port any, opts ...udpServerOpt) error"
        },
        {
          "functionName": "MockUDPProtocol(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func udp.MockUDPProtocol(v1: string) return (r0: string, r1: int)"
        },
        {
          "functionName": "Connect(${1:target/*type: string*/}, ${2:extraParams/*type ...yaklib.udpClientOption*/})",
          "document": "创建一个 UDP 连接",
          "definitionStr": "Connect(string, ...yaklib.udpClientOption) (*yaklib.udpConn, error)"
        }
      ]
    },
    {
      "libName": "tools",
      "prefix": "tools.",
      "functions": [
        {
          "functionName": "NewPocInvoker()",
          "document": "",
          "definitionStr": "NewPocInvoker() (*tools.PocInvoker, error)"
        },
        {
          "functionName": "NewBruteUtil(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "NewBruteUtil(string) (*bruteutils.BruteUtil, error)"
        }
      ]
    },
    {
      "libName": "tls",
      "prefix": "tls.",
      "functions": [
        {
          "functionName": "SignX509ServerCertAndKey(${1:ca /*type: []byte*/}, ${2:key /*type: []byte*/})",
          "document": "签发一个服务端证书，带x509认证",
          "definitionStr": "SignX509ServerCertAndKey(ca []byte, key []byte) (cert []byte, sKey []byte, _ error)"
        },
        {
          "functionName": "SignX509ClientCertAndKey(${1:cakey /*type: []byte*/})",
          "document": "签发一个带 x509 认证的客户端证书",
          "definitionStr": "SignX509ClientCertAndKey(ca, key []byte) ([]byte, []byte, error)"
        },
        {
          "functionName": "SignServerCertAndKey(${1:caCert/*type: bytes*/}, ${2:caKey/*type: bytes*/})",
          "document": "签发一个服务端证书，不带 x509 认证",
          "definitionStr": "SignServerCertAndKey([]uint8, []uint8) ([]uint8, []uint8, error)"
        },
        {
          "functionName": "SignClientCertAndKey(${1:caCert/*type: bytes*/}, ${2:pKey/*type: bytes*/})",
          "document": "签发一个客户端证书，不带x509认证",
          "definitionStr": "SignClientCertAndKey([]uint8, []uint8) ([]uint8, []uint8, error)"
        },
        {
          "functionName": "Inspect(${1:v1/*type: string*/})",
          "document": "审计一个地址的 TLS 信息",
          "definitionStr": "Inspect(string) ([]*tlsutils.TLSInspectResult, error)"
        },
        {
          "functionName": "GenerateSM2KeyPair()",
          "document": "",
          "definitionStr": "GenerateSM2KeyPair() ([]byte, []byte, error)"
        },
        {
          "functionName": "GenerateRootCA(${1:commonName/*type: string*/})",
          "document": "签发一个 CA 证书",
          "definitionStr": "GenerateRootCA(string) ([]uint8, []uint8, error)"
        },
        {
          "functionName": "GenerateRSAKeyPair(${1:bitSize /*type: int*/})",
          "document": "",
          "definitionStr": "GenerateRSAKeyPair(bitSize int) ([]byte, []byte, error)"
        },
        {
          "functionName": "GenerateRSA4096KeyPair()",
          "document": "",
          "definitionStr": "GenerateRSA4096KeyPair() ([]uint8, []uint8, error)"
        },
        {
          "functionName": "GenerateRSA2048KeyPair()",
          "document": "",
          "definitionStr": "GenerateRSA2048KeyPair() ([]uint8, []uint8, error)"
        },
        {
          "functionName": "GenerateRSA1024KeyPair()",
          "document": "",
          "definitionStr": "GenerateRSA1024KeyPair() ([]uint8, []uint8, error)"
        },
        {
          "functionName": "EncryptWithPkcs1v15(${1:pemBytes /*type: []byte*/}, ${2:data})",
          "document": "",
          "definitionStr": "EncryptWithPkcs1v15(pemBytes []byte, data any) ([]byte, error)"
        },
        {
          "functionName": "DecryptWithPkcs1v15(${1:pemPriBytes /*type: []byte*/}, ${2:data})",
          "document": "",
          "definitionStr": "DecryptWithPkcs1v15(pemPriBytes []byte, data any) ([]byte, error)"
        }
      ]
    },
    {
      "libName": "timezone",
      "prefix": "timezone.",
      "functions": [
        {
          "functionName": "Now(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "Now(string) time.Time"
        },
        {
          "functionName": "Get(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "Get(string) (*time.Location, error)"
        }
      ]
    },
    {
      "libName": "time",
      "prefix": "time.",
      "functions": [
        {
          "functionName": "sleep(${1:i /*type: float64*/})",
          "document": "sleep 一段时间",
          "definitionStr": "sleep(i float64)"
        },
        {
          "functionName": "now()",
          "document": "当前时间",
          "definitionStr": "now() time.Time"
        },
        {
          "functionName": "Until(${1:end/*type: time.Time*/})",
          "document": "计算当前时间到目标时间的时间间隔",
          "definitionStr": "Until(time.Time) time.Duration"
        },
        {
          "functionName": "Unix(${1:timestampSeconds/*type: int64*/}, ${2:nano/*type: int64*/})",
          "document": "使用 Unix 时间戳构建一个时间",
          "definitionStr": "Unix(int64, int64) time.Time"
        },
        {
          "functionName": "Sleep(${1:i /*type: float64*/})",
          "document": "sleep 一段时间",
          "definitionStr": "Sleep(i float64)"
        },
        {
          "functionName": "Since(${1:start/*type: time.Time*/})",
          "document": "计算一个时间到现在的时间差",
          "definitionStr": "Since(time.Time) time.Duration"
        },
        {
          "functionName": "ParseDuration(${1:v1/*type: string*/})",
          "document": "把一个字符串时间解析成 `time.Duration`",
          "definitionStr": "ParseDuration(string) (time.Duration, error)"
        },
        {
          "functionName": "Parse(${1:timeStr/*type: string*/}, ${2:format/*type: string*/})",
          "document": "把时间按照一定规则进行解析（遵循 Golang 的规则）",
          "definitionStr": "Parse(string, string) (time.Time, error)"
        },
        {
          "functionName": "Now()",
          "document": "获取当前时间",
          "definitionStr": "Now() time.Time"
        },
        {
          "functionName": "NewTimer(${1:seconds/*type: float64*/})",
          "document": "设置一个新的定时器，seconds 秒之后触发",
          "definitionStr": "NewTimer(float64) *time.Timer"
        },
        {
          "functionName": "NewTicker(${1:seconds/*type: float64*/})",
          "document": "获取一个 seconds 的 ticker，每隔 seconds 秒触发一次",
          "definitionStr": "NewTicker(float64) *time.Ticker"
        },
        {
          "functionName": "GetCurrentMonday()",
          "document": "或者当前周的周一日期",
          "definitionStr": "GetCurrentMonday() (time.Time, error)"
        },
        {
          "functionName": "GetCurrentDate()",
          "document": "获得当前今天的日期",
          "definitionStr": "GetCurrentDate() (time.Time, error)"
        },
        {
          "functionName": "AfterFunc(${1:v1/*type: time.Duration*/}, ${2:v2/*type: func () */})",
          "document": "一段时间之后执行一个函数",
          "definitionStr": "AfterFunc(time.Duration, func()) *time.Timer"
        },
        {
          "functionName": "After(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "After(float64) \u003c-chan time.Time"
        }
      ]
    },
    {
      "libName": "tcp",
      "prefix": "tcp.",
      "functions": [
        {
          "functionName": "serverTls(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【服务端参数】设置 SSL/TLS 服务器",
          "definitionStr": "serverTls(any, any, ...any) yaklib.tcpServerConfigOpt"
        },
        {
          "functionName": "serverContext(${1:ctx/*type: context.Context*/})",
          "document": "【服务端参数】设置服务端上下文，用于控制服务器生命周期",
          "definitionStr": "serverContext(context.Context) yaklib.tcpServerConfigOpt"
        },
        {
          "functionName": "serverCallback(${1:v1/*type: func (v1: *yaklib.tcpConnection) */})",
          "document": "【服务端参数】设置服务端连接处理回调函数",
          "definitionStr": "serverCallback(func(*yaklib.tcpConnection)) yaklib.tcpServerConfigOpt"
        },
        {
          "functionName": "clientTls(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【客户端参数】设置 TLS/SSL",
          "definitionStr": "clientTls(any, any, ...any) yaklib.dialerOpt"
        },
        {
          "functionName": "clientTimeout(${1:seconds/*type: float64*/})",
          "document": "【客户端参数】设置超时时间",
          "definitionStr": "clientTimeout(float64) yaklib.dialerOpt"
        },
        {
          "functionName": "clientLocal(${1:host/*type: any*/})",
          "document": "【客户端参数】设置客户端本地地址",
          "definitionStr": "clientLocal(any) yaklib.dialerOpt"
        },
        {
          "functionName": "cliengProxy(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "cliengProxy(string) yaklib.dialerOpt"
        },
        {
          "functionName": "Serve(${1:host}, ${2:port /*type: int*/}, ${3:opts...})",
          "document": "启动一个 tcp 服务器",
          "definitionStr": "Serve(host any, port int, opts ...tcpServerConfigOpt) error"
        },
        {
          "functionName": "MockServe(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func tcp.MockServe(v1: bytes) return (r0: string, r1: int)"
        },
        {
          "functionName": "Forward(${1:localPort /*type: int*/}, ${2:remoteHost /*type: string*/}, ${3:remotePort /*type: int*/})",
          "document": "转发 TCP 链接，在本地开一个 TCP 服务器，把到这个服务器的链接转发到远程端口上",
          "definitionStr": "Forward(localPort int, remoteHost string, remotePort int) error"
        },
        {
          "functionName": "Connect(${1:host/*type: string*/}, ${2:port/*type: any*/}, ${3:params/*type ...clientOpt*/})",
          "document": "",
          "definitionStr": "Connect(string, any, ...yaklib.dialerOpt) (*yaklib.tcpConnection, error)"
        }
      ]
    },
    {
      "libName": "t3",
      "prefix": "t3.",
      "functions": [
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "设置全超时时间",
          "definitionStr": "timeout(float64) t3.OptionFun"
        },
        {
          "functionName": "debugHandler(${1:v1/*type: func (v1: string) */})",
          "document": "设置调试回调接口",
          "definitionStr": "debugHandler(func(string)) t3.OptionFun"
        },
        {
          "functionName": "clearBackdoor(${1:v1/*type: bool*/})",
          "document": "清除控制后门程序",
          "definitionStr": "clearBackdoor(bool) t3.OptionFun"
        },
        {
          "functionName": "SendJavaObjectStreamBytes(${1:addr /*type: string*/}, ${2:acedBytes}, ${3:f...})",
          "document": "使用T3协议发送Java序列化流",
          "definitionStr": "SendJavaObjectStreamBytes(addr string, acedBytes any, f ...OptionFun) error"
        },
        {
          "functionName": "GenerateWeblogicJNDIPayload(${1:addr /*type: string*/})",
          "document": "生成Weblogic JNDI Payload(Bytes)",
          "definitionStr": "GenerateWeblogicJNDIPayload(addr string) []byte"
        },
        {
          "functionName": "GenerateJavaObjectStreamBytes(${1:cmd /*type: string*/})",
          "document": "生成T3协议的Java序列化流",
          "definitionStr": "GenerateJavaObjectStreamBytes(cmd string) []byte"
        },
        {
          "functionName": "ExecCommand(${1:addr /*type: string*/}, ${2:cmd /*type: string*/}, ${3:f...})",
          "document": "T3 命令执行",
          "definitionStr": "ExecCommand(addr string, cmd string, f ...OptionFun) (string, error)"
        }
      ]
    },
    {
      "libName": "systemd",
      "prefix": "systemd.",
      "functions": [
        {
          "functionName": "unit_wants(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_wants(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_requires(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_requires(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_extra_line(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_extra_line(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_documentation(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_documentation(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_description(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_description(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_binds_to(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_binds_to(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_before(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_before(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "unit_after(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.unit_after(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_unit_inactive_sec(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func systemd.timer_unit_inactive_sec(v1: int64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_unit_active_sec(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func systemd.timer_unit_active_sec(v1: int64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_unit(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.timer_unit(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_startup_sec(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func systemd.timer_startup_sec(v1: int64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_raw(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.timer_raw(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_calendar(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.timer_calendar(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_boot_sec(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func systemd.timer_boot_sec(v1: int64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "timer_active_sec(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func systemd.timer_active_sec(v1: int64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_user(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_user(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_umask(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_umask(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_type(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_type(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_timeout_start_sec(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "func systemd.service_timeout_start_sec(v1: float64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_stdout(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_stdout(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_stdin(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_stdin(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_stderr(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_stderr(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_restart_sec(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "func systemd.service_restart_sec(v1: float64) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_restart(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_restart(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_raw(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_raw(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_kill_signal(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_kill_signal(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_kill_mode(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_kill_mode(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_kill9()",
          "document": "",
          "definitionStr": "func systemd.service_kill9() return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_group(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_group(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_exec_stop_post(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_exec_stop_post(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_exec_stop(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_exec_stop(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_exec_start_pre(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_exec_start_pre(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_exec_start_post(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_exec_start_post(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_exec_start(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_exec_start(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_environment_file(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_environment_file(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "service_environment(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.service_environment(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "install_wanted_by(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.install_wanted_by(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "extra_raw(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func systemd.extra_raw(v1: string) return (r0: func ConfigOption(v1: *systemd.SystemdServiceConfig) )"
        },
        {
          "functionName": "Create(${1:v1/*type: string*/}, ${2:v2/*type ...systemd.ConfigOption*/})",
          "document": "",
          "definitionStr": "func systemd.Create(v1: string, v2 ...systemd.ConfigOption) return (r0: string, r1: string)"
        }
      ]
    },
    {
      "libName": "synscan",
      "prefix": "synscan.",
      "functions": [
        {
          "functionName": "wait(${1:v1/*type: float64*/})",
          "document": "【参数】当所有数据包发出之后，等待多少秒？",
          "definitionStr": "wait(float64) tools.scanOpt"
        },
        {
          "functionName": "submitTaskCallback(${1:v1/*type: func (v1: string) */})",
          "document": "",
          "definitionStr": "submitTaskCallback(func(string)) tools.scanOpt"
        },
        {
          "functionName": "rateLimit(${1:v1/*type: int*/}, ${2:v2/*type: int*/})",
          "document": "",
          "definitionStr": "rateLimit(int, int) tools.scanOpt"
        },
        {
          "functionName": "outputPrefix(${1:prefix/*type: string*/})",
          "document": "【参数】输出的文件每一行的前缀（用于增加 `https://` 这样的协议名等）",
          "definitionStr": "outputPrefix(string) tools.scanOpt"
        },
        {
          "functionName": "outputFile(${1:v1/*type: string*/})",
          "document": "【参数】synscan 对外输出的文件",
          "definitionStr": "outputFile(string) tools.scanOpt"
        },
        {
          "functionName": "initPortFilter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "initPortFilter(string) tools.scanOpt"
        },
        {
          "functionName": "initHostFilter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "initHostFilter(string) tools.scanOpt"
        },
        {
          "functionName": "excludePorts(${1:v1/*type: string*/})",
          "document": "设置排除端口",
          "definitionStr": "excludePorts(string) tools.scanOpt"
        },
        {
          "functionName": "excludeHosts(${1:v1/*type: string*/})",
          "document": "可设置排除的 Host",
          "definitionStr": "excludeHosts(string) tools.scanOpt"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "concurrent(int) tools.scanOpt"
        },
        {
          "functionName": "callback(${1:v1/*type: func (v1: *synscan.SynScanResult) */})",
          "document": "",
          "definitionStr": "callback(func(*synscan.SynScanResult)) tools.scanOpt"
        },
        {
          "functionName": "ScanFromPing(${1:res /*type: chan *pingutil.PingResult*/}, ${2:ports /*type: string*/}, ${3:opts...})",
          "document": "新增从 Ping 中的扫描",
          "definitionStr": "ScanFromPing(res chan *pingutil.PingResult, ports string, opts ...scanOpt) (chan *synscan.SynScanResult, error)"
        },
        {
          "functionName": "Scan(${1:hosts/*type: string*/}, ${2:ports/*type: string*/}, ${3:v3/*type ...tools.scanOpt*/})",
          "document": "扫描核心函数",
          "definitionStr": "Scan(string, string, ...tools.scanOpt) (chan *synscan.SynScanResult, error)"
        },
        {
          "functionName": "FixPermission()",
          "document": "",
          "definitionStr": "FixPermission() error"
        }
      ]
    },
    {
      "libName": "sync",
      "prefix": "sync.",
      "functions": [
        {
          "functionName": "NewWaitGroup()",
          "document": "",
          "definitionStr": "NewWaitGroup() *sync.WaitGroup"
        },
        {
          "functionName": "NewSizedWaitGroup(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "NewSizedWaitGroup(int) *utils.SizedWaitGroup"
        },
        {
          "functionName": "NewRWMutex()",
          "document": "",
          "definitionStr": "NewRWMutex() *sync.RWMutex"
        },
        {
          "functionName": "NewPool()",
          "document": "",
          "definitionStr": "NewPool() *sync.Pool"
        },
        {
          "functionName": "NewOnce()",
          "document": "",
          "definitionStr": "NewOnce() *sync.Once"
        },
        {
          "functionName": "NewMutex()",
          "document": "",
          "definitionStr": "NewMutex() *sync.Mutex"
        },
        {
          "functionName": "NewMap()",
          "document": "",
          "definitionStr": "NewMap() *sync.Map"
        },
        {
          "functionName": "NewLock()",
          "document": "",
          "definitionStr": "NewLock() *sync.Mutex"
        },
        {
          "functionName": "NewCond()",
          "document": "",
          "definitionStr": "NewCond() *sync.Cond"
        }
      ]
    },
    {
      "libName": "suricata",
      "prefix": "suricata.",
      "functions": [
        {
          "functionName": "YieldRulesByKeyword(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "func suricata.YieldRulesByKeyword(v1: string, v2 ...string) return (r0: chan *rule.Storage)"
        },
        {
          "functionName": "YieldRules()",
          "document": "",
          "definitionStr": "func suricata.YieldRules() return (r0: chan *rule.Storage)"
        },
        {
          "functionName": "TrafficGenerator()",
          "document": "",
          "definitionStr": "func suricata.TrafficGenerator() return (r0: *chaosmaker.ChaosMaker)"
        },
        {
          "functionName": "SuricataMatcher(${1:v1/*type: *rule.Rule*/})",
          "document": "",
          "definitionStr": "func suricata.SuricataMatcher(v1: *rule.Rule) return (r0: *match.Matcher)"
        },
        {
          "functionName": "ParseSuricata(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "func suricata.ParseSuricata(v1: string, v2 ...string) return (r0: []*rule.Rule, r1: error)"
        },
        {
          "functionName": "LoadSuricataToDatabase(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func suricata.LoadSuricataToDatabase(v1: string) return (r0: error)"
        }
      ]
    },
    {
      "libName": "subdomain",
      "prefix": "subdomain.",
      "functions": [
        {
          "functionName": "workerConcurrent(${1:concurrent/*type: int*/})",
          "document": "发送 DNS 请求的最大并发（同时允许多少个 DNS 请求同时发出？）主要用于控制速率",
          "definitionStr": "workerConcurrent(int) subdomain.ConfigOption"
        },
        {
          "functionName": "wildcardToStop(${1:v1/*type: bool*/})",
          "document": "遇到泛解析就停止",
          "definitionStr": "wildcardToStop(bool) subdomain.ConfigOption"
        },
        {
          "functionName": "targetTimeout(${1:seconds/*type: float64*/})",
          "document": "每一个目标应该最多爆破多久？单个目标的超时时间",
          "definitionStr": "targetTimeout(float64) subdomain.ConfigOption"
        },
        {
          "functionName": "targetConcurrent(${1:concurrent/*type: int*/})",
          "document": "针对多个目标进行并发爆破的时候，通过这个选项设置并发",
          "definitionStr": "targetConcurrent(int) subdomain.ConfigOption"
        },
        {
          "functionName": "recursiveDict(${1:dict/*type: string|fileName|[]string|bytes|reader*/})",
          "document": "如果开启了递归，则可以设置递归字典（默认自带一个小字典）",
          "definitionStr": "recursiveDict(any) subdomain.ConfigOption"
        },
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "是否开启递归爆破",
          "definitionStr": "recursive(bool) subdomain.ConfigOption"
        },
        {
          "functionName": "maxDepth(${1:depth/*type: int*/})",
          "document": "设置递归爆破的最大深度",
          "definitionStr": "maxDepth(int) subdomain.ConfigOption"
        },
        {
          "functionName": "mainDict(${1:dict/*type: string|[]string|fileName|bytes|reader*/})",
          "document": "子域名爆破使用的主字典（字典名/字典内容[]string/bytes/reader）均支持",
          "definitionStr": "mainDict(any) subdomain.ConfigOption"
        },
        {
          "functionName": "eachSearchTimeout(${1:seconds/*type: float64*/})",
          "document": "每次调用第三方接口进行子域名搜索的时候，HTTP 请求的超时时间",
          "definitionStr": "eachSearchTimeout(float64) subdomain.ConfigOption"
        },
        {
          "functionName": "eachQueryTimeout(${1:seconds/*type: float64*/})",
          "document": "每一次 DNS 请求发送的超时时间",
          "definitionStr": "eachQueryTimeout(float64) subdomain.ConfigOption"
        },
        {
          "functionName": "dnsServer(${1:servers/*type: []string*/})",
          "document": "为扫描过程设置自定义 dnsServer",
          "definitionStr": "dnsServer([]string) subdomain.ConfigOption"
        },
        {
          "functionName": "Scan(${1:target}, ${2:opts...})",
          "document": "扫描子域名的核心函数，通过和这个函数，输入想要扫描的子域名和相关参数",
          "definitionStr": "Scan(target any, opts ...subdomain.ConfigOption) (chan *subdomain.SubdomainResult, error)"
        }
      ]
    },
    {
      "libName": "str",
      "prefix": "str.",
      "functions": [
        {
          "functionName": "f(${1:f /*type: string*/}, ${2:items...})",
          "document": "相当于 `fmt.Sprintf`",
          "definitionStr": "f(f string, items ...any) string"
        },
        {
          "functionName": "VersionLessEqual(${1:v1v2 /*type: string*/})",
          "document": "",
          "definitionStr": "VersionLessEqual(v1, v2 string) bool  doc:VersionLessEqual v1 小于等于 v2 返回true"
        },
        {
          "functionName": "VersionLess(${1:v1v2 /*type: string*/})",
          "document": "",
          "definitionStr": "VersionLess(v1, v2 string) bool  doc:VersionLess v1 小于 v2 返回true"
        },
        {
          "functionName": "VersionGreaterEqual(${1:v1v2 /*type: string*/})",
          "document": "",
          "definitionStr": "VersionGreaterEqual(v1, v2 string) bool  doc:VersionGreaterEqual v1 大于等于 v2 返回 true"
        },
        {
          "functionName": "VersionGreater(${1:v1v2 /*type: string*/})",
          "document": "",
          "definitionStr": "VersionGreater(v1, v2 string) bool  doc:VersionGreater v1 大于 v2 返回 true"
        },
        {
          "functionName": "VersionEqual(${1:v1v2 /*type: string*/})",
          "document": "",
          "definitionStr": "VersionEqual(v1, v2 string) bool  doc:VersionEqual v1 等于 v2 返回 true"
        },
        {
          "functionName": "UrlJoin(${1:origin /*type: string*/}, ${2:paths...})",
          "document": "URL Join，可以拼接 URL Path",
          "definitionStr": "UrlJoin(origin string, paths ...string) (string, error)  doc:https://baidu.com/abc   a?key=valuehttps://baidu.com/abc/a?key=value =\u003e [X] https://baidu.com/abc/a%xxkey=value[X] https://baidu.com/a?key=value"
        },
        {
          "functionName": "TrimSuffix(${1:ssuffix /*type: string*/})",
          "document": "移除后缀",
          "definitionStr": "TrimSuffix(s, suffix string) string  doc:TrimSuffix returns s without the provided trailing suffix string.If s doesn't end with suffix, s is returned unchanged."
        },
        {
          "functionName": "TrimSpace(${1:s /*type: string*/})",
          "document": "移除前后空白字符",
          "definitionStr": "TrimSpace(s string) string  doc:TrimSpace returns a slice of the string s, with all leadingand trailing white space removed, as defined by Unicode."
        },
        {
          "functionName": "TrimRight(${1:scutset /*type: string*/})",
          "document": "移除右边的某些字符",
          "definitionStr": "TrimRight(s, cutset string) string  doc:TrimRight returns a slice of the string s, with all trailingUnicode code points contained in cutset removed.To remove a suffix, use TrimSuffix instead."
        },
        {
          "functionName": "TrimPrefix(${1:sprefix /*type: string*/})",
          "document": "移除某个前缀",
          "definitionStr": "TrimPrefix(s, prefix string) string  doc:TrimPrefix returns s without the provided leading prefix string.If s doesn't start with prefix, s is returned unchanged."
        },
        {
          "functionName": "TrimLeft(${1:scutset /*type: string*/})",
          "document": "移除左边的某些字符",
          "definitionStr": "TrimLeft(s, cutset string) string  doc:TrimLeft returns a slice of the string s with all leadingUnicode code points contained in cutset removed.To remove a prefix, use TrimPrefix instead."
        },
        {
          "functionName": "Trim(${1:scutset /*type: string*/})",
          "document": "把字符串前后任何包含子字符串中字符移除",
          "definitionStr": "Trim(s, cutset string) string  doc:Trim returns a slice of the string s with all leading andtrailing Unicode code points contained in cutset removed."
        },
        {
          "functionName": "ToValidUTF8(${1:sreplacement /*type: string*/})",
          "document": "把字符串中不安全的UTF8字符替换掉，避免 panic",
          "definitionStr": "ToValidUTF8(s, replacement string) string  doc:ToValidUTF8 returns a copy of the string s with each run of invalid UTF-8 byte sequencesreplaced by the replacement string, which may be empty."
        },
        {
          "functionName": "ToUpperSpecial(${1:c /*type: unicode.SpecialCase*/}, ${2:s /*type: string*/})",
          "document": "同 Golang `strings.ToUpperSpecial`",
          "definitionStr": "ToUpperSpecial(c unicode.SpecialCase, s string) string  doc:ToUpperSpecial returns a copy of the string s with all Unicode letters mapped to theirupper case using the case mapping specified by c."
        },
        {
          "functionName": "ToUpper(${1:s /*type: string*/})",
          "document": "把字符串变成全大写",
          "definitionStr": "ToUpper(s string) string  doc:ToUpper returns s with all Unicode letters mapped to their upper case."
        },
        {
          "functionName": "ToTitleSpecial(${1:c /*type: unicode.SpecialCase*/}, ${2:s /*type: string*/})",
          "document": "同 Golang `strings.ToTitleSpecial`",
          "definitionStr": "ToTitleSpecial(c unicode.SpecialCase, s string) string  doc:ToTitleSpecial returns a copy of the string s with all Unicode letters mapped to theirUnicode title case, giving priority to the special casing rules."
        },
        {
          "functionName": "ToTitle(${1:s /*type: string*/})",
          "document": "同 Golang `strings.ToTitle`",
          "definitionStr": "ToTitle(s string) string  doc:ToTitle returns a copy of the string s with all Unicode letters mapped totheir Unicode title case."
        },
        {
          "functionName": "ToStringSlice(${1:i})",
          "document": "把任意一个数据结构转换成数组",
          "definitionStr": "ToStringSlice(i any) []string"
        },
        {
          "functionName": "ToLowerSpecial(${1:c /*type: unicode.SpecialCase*/}, ${2:s /*type: string*/})",
          "document": "同 Golang `strings.ToLowerSpecial`",
          "definitionStr": "ToLowerSpecial(c unicode.SpecialCase, s string) string  doc:ToLowerSpecial returns a copy of the string s with all Unicode letters mapped to theirlower case using the case mapping specified by c."
        },
        {
          "functionName": "ToLower(${1:s /*type: string*/})",
          "document": "把字符串变成小写",
          "definitionStr": "ToLower(s string) string  doc:ToLower returns s with all Unicode letters mapped to their lower case."
        },
        {
          "functionName": "ToJsonIndentStr(${1:v1/*type: any*/})",
          "document": "把一个对象解析成 Json，并保证 indent 合理",
          "definitionStr": "ToJsonIndentStr(any) string"
        },
        {
          "functionName": "Title(${1:s /*type: string*/})",
          "document": "把字符串每个单词首字母大写，变成 Title",
          "definitionStr": "Title(s string) string  doc:Title returns a copy of the string s with all Unicode letters that begin wordsmapped to their Unicode title case.Deprecated: The rule Title uses for word boundaries does not handle Unicodepunctuation properly. Use golang.org/x/text/cases instead."
        },
        {
          "functionName": "Subtract(${1:x /*type: []string*/}, ${2:y /*type: []string*/})",
          "document": "列表相减",
          "definitionStr": "Subtract(x []string, y []string) []string  doc:SubtractString returns the subtraction between two collections of string"
        },
        {
          "functionName": "StringSliceContainsAll(${1:o /*type: []string*/}, ${2:elements...})",
          "document": "判断一个 Slice 中是否包含后续所有子串？",
          "definitionStr": "StringSliceContainsAll(o []string, elements ...string) bool  doc:SliceContainsSlick"
        },
        {
          "functionName": "StringSliceContains(${1:s}, ${2:raw /*type: string*/})",
          "document": "",
          "definitionStr": "StringSliceContains(s any, raw string) (result bool)"
        },
        {
          "functionName": "StringContainsAnyOfSubString(${1:s /*type: string*/}, ${2:subs /*type: []string*/})",
          "document": "判断字符串是否包含任意一个后续 Slice 中的元素？",
          "definitionStr": "StringContainsAnyOfSubString(s string, subs []string) bool"
        },
        {
          "functionName": "StartsWith(${1:sprefix /*type: string*/})",
          "document": "判断主字符串是否是子串开头？",
          "definitionStr": "StartsWith(s, prefix string) bool  doc:HasPrefix tests whether the string s begins with prefix."
        },
        {
          "functionName": "SplitN(${1:ssep /*type: string*/}, ${2:n /*type: int*/})",
          "document": "分割字符串，分割成N块",
          "definitionStr": "SplitN(s, sep string, n int) []string  doc:SplitN slices s into substrings separated by sep and returns a slice ofthe substrings between those separators.The count determines the number of substrings to return:  n \u003e 0: at most n substrings; the last substring will be the unsplit remainder.  n == 0: the result is nil (zero substrings)  n \u003c 0: all substringsEdge cases for s and sep (for example, empty strings) are handledas described in the documentation for Split.To split around the first instance of a separator, see Cut."
        },
        {
          "functionName": "SplitHostsToPrivateAndPublic(${1:hosts...})",
          "document": "",
          "definitionStr": "SplitHostsToPrivateAndPublic(hosts ...string) (privs, pub []string)"
        },
        {
          "functionName": "SplitHTTPHeadersAndBodyFromPacket(${1:raw /*type: []byte*/}, ${2:hook...})",
          "document": "把数据包的 headers 和 body 进行分离",
          "definitionStr": "SplitHTTPHeadersAndBodyFromPacket(raw []byte, hook ...func(line string)) (string, []byte)"
        },
        {
          "functionName": "SplitAndTrim(${1:Raw /*type: string*/}, ${2:sep /*type: string*/})",
          "document": "分割，并清除每一个部分的前后空白",
          "definitionStr": "SplitAndTrim(Raw string, sep string) (targets []string)"
        },
        {
          "functionName": "SplitAfterN(${1:ssep /*type: string*/}, ${2:n /*type: int*/})",
          "document": "分割字符串，不移除分隔符，最多分割成N个块",
          "definitionStr": "SplitAfterN(s, sep string, n int) []string  doc:SplitAfterN slices s into substrings after each instance of sep andreturns a slice of those substrings.The count determines the number of substrings to return:  n \u003e 0: at most n substrings; the last substring will be the unsplit remainder.  n == 0: the result is nil (zero substrings)  n \u003c 0: all substringsEdge cases for s and sep (for example, empty strings) are handledas described in the documentation for SplitAfter."
        },
        {
          "functionName": "SplitAfter(${1:ssep /*type: string*/})",
          "document": "分割字符串，不移除分隔符",
          "definitionStr": "SplitAfter(s, sep string) []string  doc:SplitAfter slices s into all substrings after each instance of sep andreturns a slice of those substrings.If s does not contain sep and sep is not empty, SplitAfter returnsa slice of length 1 whose only element is s.If sep is empty, SplitAfter splits after each UTF-8 sequence. Ifboth s and sep are empty, SplitAfter returns an empty slice.It is equivalent to SplitAfterN with a count of -1."
        },
        {
          "functionName": "Split(${1:ssep /*type: string*/})",
          "document": "分割字符串",
          "definitionStr": "Split(s, sep string) []string  doc:Split slices s into all substrings separated by sep and returns a slice ofthe substrings between those separators.If s does not contain sep and sep is not empty, Split returns aslice of length 1 whose only element is s.If sep is empty, Split splits after each UTF-8 sequence. If both sand sep are empty, Split returns an empty slice.It is equivalent to SplitN with a count of -1.To split around the first instance of a separator, see Cut."
        },
        {
          "functionName": "ReplaceHTTPPacketBody(${1:raw /*type: []byte*/}, ${2:body /*type: []byte*/}, ${3:chunk /*type: bool*/})",
          "document": "整体替代一个数据包的 body",
          "definitionStr": "ReplaceHTTPPacketBody(raw []byte, body []byte, chunk bool) []byte"
        },
        {
          "functionName": "ReplaceAll(${1:soldnew /*type: string*/})",
          "document": "字符串替换，全部",
          "definitionStr": "ReplaceAll(s, old, new string) string  doc:ReplaceAll returns a copy of the string s with allnon-overlapping instances of old replaced by new.If old is empty, it matches at the beginning of the stringand after each UTF-8 sequence, yielding up to k+1 replacementsfor a k-rune string."
        },
        {
          "functionName": "Replace(${1:soldnew /*type: string*/}, ${2:n /*type: int*/})",
          "document": "字符串替换（次数）",
          "definitionStr": "Replace(s, old, new string, n int) string  doc:Replace returns a copy of the string s with the first nnon-overlapping instances of old replaced by new.If old is empty, it matches at the beginning of the stringand after each UTF-8 sequence, yielding up to k+1 replacementsfor a k-rune string.If n \u003c 0, there is no limit on the number of replacements."
        },
        {
          "functionName": "Repeat(${1:s /*type: string*/}, ${2:count /*type: int*/})",
          "document": "重复字符串",
          "definitionStr": "Repeat(s string, count int) string  doc:Repeat returns a new string consisting of count copies of the string s.It panics if count is negative or ifthe result of (len(s) * count) overflows."
        },
        {
          "functionName": "RemoveRepeat(${1:slc /*type: []string*/})",
          "document": "移除 slice 中重复元素",
          "definitionStr": "RemoveRepeat(slc []string) []string  doc:元素去重"
        },
        {
          "functionName": "RegexpMatch(${1:regexpPattern/*type: string*/}, ${2:content/*type: any*/})",
          "document": "使用正则匹配",
          "definitionStr": "RegexpMatch(string, any) bool"
        },
        {
          "functionName": "RandStr(${1:n /*type: int*/})",
          "document": "生成一个随机字符串",
          "definitionStr": "RandStr(n int) string"
        },
        {
          "functionName": "RandSecret(${1:n /*type: int*/})",
          "document": "生成一个随机密码",
          "definitionStr": "RandSecret(n int) string"
        },
        {
          "functionName": "PathJoin(${1:elem...})",
          "document": "把 path 进行拼接",
          "definitionStr": "PathJoin(elem ...string) string  doc:Join joins any number of path elements into a single path,separating them with an OS specific Separator. Empty elementsare ignored. The result is Cleaned. However, if the argumentlist is empty or all its elements are empty, Join returnsan empty string.On Windows, the result will only be a UNC path if the firstnon-empty element is a UNC path."
        },
        {
          "functionName": "ParseStringUrlToWebsiteRootPath(${1:s /*type: string*/})",
          "document": "",
          "definitionStr": "ParseStringUrlToWebsiteRootPath(s string) string"
        },
        {
          "functionName": "ParseStringUrlToUrlInstance(${1:s /*type: string*/})",
          "document": "把 URL 解析成 *url.URL",
          "definitionStr": "ParseStringUrlToUrlInstance(s string) (*url.URL, error)"
        },
        {
          "functionName": "ParseStringToUrlsWith3W(${1:sub...})",
          "document": "把字符串（域名/IP/URL）解析成可能的 URL（如果是域名，自动补充 WWW 前缀）",
          "definitionStr": "ParseStringToUrlsWith3W(sub ...string) []string"
        },
        {
          "functionName": "ParseStringToUrls(${1:targets...})",
          "document": "把字符串（域名/IP/URL）解析成可能的 URL（如果是域名，不自动补充 WWW 前缀）",
          "definitionStr": "ParseStringToUrls(targets ...string) []string"
        },
        {
          "functionName": "ParseStringToPorts(${1:ports /*type: string*/})",
          "document": "把字符串解析成多个端口，逗号分隔",
          "definitionStr": "ParseStringToPorts(ports string) []int"
        },
        {
          "functionName": "ParseStringToLines(${1:raw /*type: string*/})",
          "document": "把一个字符串按行解析",
          "definitionStr": "ParseStringToLines(raw string) []string"
        },
        {
          "functionName": "ParseStringToHosts(${1:raw /*type: string*/})",
          "document": "把字符串解析成 hosts，字符串可以是逗号分割的网段/域名/ip地址",
          "definitionStr": "ParseStringToHosts(raw string) []string"
        },
        {
          "functionName": "ParseStringToHostPort(${1:raw /*type: string*/})",
          "document": "把字符串解析成 host 和 port",
          "definitionStr": "ParseStringToHostPort(raw string) (host string, port int, err error)"
        },
        {
          "functionName": "ParseStringToHTTPResponse(${1:res /*type: string*/})",
          "document": "",
          "definitionStr": "ParseStringToHTTPResponse(res string) (*http.Response, error)"
        },
        {
          "functionName": "ParseStringToHTTPRequest(${1:raw /*type: string*/})",
          "document": "把字符串解析为 *http.Request",
          "definitionStr": "ParseStringToHTTPRequest(raw string) (*http.Request, error)"
        },
        {
          "functionName": "ParseStringToCClassHosts(${1:targets /*type: string*/})",
          "document": "把网络段的字符串变为整理后的 C 段主机",
          "definitionStr": "ParseStringToCClassHosts(targets string) string"
        },
        {
          "functionName": "ParseBytesToHTTPResponse(${1:res /*type: []byte*/})",
          "document": "把 bytes 解析成 *http.Response",
          "definitionStr": "ParseBytesToHTTPResponse(res []byte) (*http.Response, error)"
        },
        {
          "functionName": "ParseBytesToHTTPRequest(${1:raw /*type: []byte*/})",
          "document": "把 bytes 解析成 *http.Request",
          "definitionStr": "ParseBytesToHTTPRequest(raw []byte) (*http.Request, error)"
        },
        {
          "functionName": "ParamsGetOr(${1:i /*type: map[string]string*/}, ${2:keyValuedefaultValue /*type: string*/})",
          "document": "从 `map[string]string` 中获取参数",
          "definitionStr": "ParamsGetOr(i map[string]string, keyValue, defaultValue string) string"
        },
        {
          "functionName": "NewReader(${1:v1/*type: string*/})",
          "document": "创建一个 Reader",
          "definitionStr": "NewReader(string) *strings.Reader"
        },
        {
          "functionName": "NewFilter()",
          "document": "创建一个字符串过滤器",
          "definitionStr": "NewFilter() *filter.StringFilter"
        },
        {
          "functionName": "MergeUrlFromHTTPRequest(${1:rawRequest /*type: []byte*/}, ${2:target /*type: string*/}, ${3:isHttps /*type: bool*/})",
          "document": "根据原始数据包拼接一个新的 URL",
          "definitionStr": "MergeUrlFromHTTPRequest(rawRequest []byte, target string, isHttps bool) string"
        },
        {
          "functionName": "MatchAnyOfSubString(${1:i}, ${2:re...})",
          "document": "包含任何一个子字符串",
          "definitionStr": "MatchAnyOfSubString(i any, re ...string) bool"
        },
        {
          "functionName": "MatchAnyOfRegexp(${1:i}, ${2:re...})",
          "document": "匹配任何一条正则语句",
          "definitionStr": "MatchAnyOfRegexp(\n\ti any,\n\tre ...string) bool"
        },
        {
          "functionName": "MatchAnyOfGlob(${1:i}, ${2:re...})",
          "document": "只要有一条规则被匹配到规则即可",
          "definitionStr": "MatchAnyOfGlob(\n\ti any, re ...string) bool"
        },
        {
          "functionName": "MatchAllOfSubString(${1:i}, ${2:re...})",
          "document": "所有的子字符串都被匹配到",
          "definitionStr": "MatchAllOfSubString(i any, re ...string) bool"
        },
        {
          "functionName": "MatchAllOfRegexp(${1:i}, ${2:re...})",
          "document": "所有的正则都被匹配到",
          "definitionStr": "MatchAllOfRegexp(\n\ti any,\n\tre ...string) bool"
        },
        {
          "functionName": "MatchAllOfGlob(${1:i}, ${2:re...})",
          "document": "所有的 glob 规则都被匹配到",
          "definitionStr": "MatchAllOfGlob(\n\ti any, re ...string) bool"
        },
        {
          "functionName": "LowerAndTrimSpace(${1:raw /*type: string*/})",
          "document": "把字符串前后空白移除，并变成小写",
          "definitionStr": "LowerAndTrimSpace(raw string) string"
        },
        {
          "functionName": "LastIndexByte(${1:s /*type: string*/}, ${2:c /*type: byte*/})",
          "document": "最后一个目标 byte 的位置",
          "definitionStr": "LastIndexByte(s string, c byte) int  doc:LastIndexByte returns the index of the last instance of c in s, or -1 if c is not present in s."
        },
        {
          "functionName": "LastIndexAny(${1:schars /*type: string*/})",
          "document": "子字符串中任何一个字符在主字符串中最后出现的位置",
          "definitionStr": "LastIndexAny(s, chars string) int  doc:LastIndexAny returns the index of the last instance of any Unicode codepoint from chars in s, or -1 if no Unicode code point from chars ispresent in s."
        },
        {
          "functionName": "LastIndex(${1:ssubstr /*type: string*/})",
          "document": "从后往前匹配最后一个子字符串位置",
          "definitionStr": "LastIndex(s, substr string) int  doc:LastIndex returns the index of the last instance of substr in s, or -1 if substr is not present in s."
        },
        {
          "functionName": "JsonToMapList(${1:line /*type: string*/})",
          "document": "",
          "definitionStr": "JsonToMapList(line string) []map[string]string"
        },
        {
          "functionName": "JsonToMap(${1:line /*type: string*/})",
          "document": "把 Json 解析成 `map[string]string`",
          "definitionStr": "JsonToMap(line string) map[string]string"
        },
        {
          "functionName": "JsonStreamToMapList(${1:reader /*type: io.Reader*/})",
          "document": "把 json 流解析成多个 `map[string]interface{}`",
          "definitionStr": "JsonStreamToMapList(reader io.Reader) []map[string]any"
        },
        {
          "functionName": "Join(${1:i}, ${2:d})",
          "document": "",
          "definitionStr": "Join(i any, d any) (defaultResult string)"
        },
        {
          "functionName": "IsXmlValue(${1:v1/*type: any*/})",
          "document": "判断一个值是不是 XML",
          "definitionStr": "IsXmlValue(any) bool"
        },
        {
          "functionName": "IsXmlRequest(${1:v1/*type: any*/})",
          "document": "判断一个请求是不是 XML 请求",
          "definitionStr": "IsXmlRequest(any) bool"
        },
        {
          "functionName": "IsXmlParam(${1:key /*type: string*/}, ${2:value})",
          "document": "判断一个参数是否是 XML 参数",
          "definitionStr": "IsXmlParam(key string, value any) bool"
        },
        {
          "functionName": "IsUsernameField(${1:key /*type: string*/})",
          "document": "判断一个字段名是不是可能是用户名？",
          "definitionStr": "IsUsernameField(key string) bool"
        },
        {
          "functionName": "IsUrlPath(${1:v})",
          "document": "判断一个参数是不是路径？",
          "definitionStr": "IsUrlPath(v any) bool  doc:根据 value 猜测是否是一个 url path"
        },
        {
          "functionName": "IsUrlParam(${1:key /*type: string*/}, ${2:value})",
          "document": "判断一个参数是不是 URL",
          "definitionStr": "IsUrlParam(key string, value any) bool"
        },
        {
          "functionName": "IsTLSServer(${1:addr /*type: string*/}, ${2:proxies...})",
          "document": "判断地址对应是不是 TLS",
          "definitionStr": "IsTLSServer(addr string, proxies ...string) bool"
        },
        {
          "functionName": "IsStrongPassword(${1:s /*type: string*/})",
          "document": "判断一个密码是不是强密码",
          "definitionStr": "IsStrongPassword(s string) bool"
        },
        {
          "functionName": "IsSha256Value(${1:s /*type: string*/})",
          "document": "判断是否是一个可能的 SHA256 值",
          "definitionStr": "IsSha256Value(s string) bool"
        },
        {
          "functionName": "IsServerError(${1:v1/*type: any*/})",
          "document": "判断是否有服务器常见错误",
          "definitionStr": "IsServerError(any) bool"
        },
        {
          "functionName": "IsSensitiveTokenField(${1:key /*type: string*/})",
          "document": "判断是不是敏感 Token/AC/SecretKey",
          "definitionStr": "IsSensitiveTokenField(key string) bool"
        },
        {
          "functionName": "IsSensitiveJson(${1:data /*type: []byte*/})",
          "document": "判断是否是敏感 JSON（Key:Value）",
          "definitionStr": "IsSensitiveJson(data []byte) bool"
        },
        {
          "functionName": "IsSQLColumnField(${1:s /*type: string*/})",
          "document": "判断字段名是不是 SQL 列名",
          "definitionStr": "IsSQLColumnField(s string) bool"
        },
        {
          "functionName": "IsRedirectParam(${1:key /*type: string*/}, ${2:value})",
          "document": "判断参数是不是可能是 Redirect 参数",
          "definitionStr": "IsRedirectParam(key string, value any) bool  doc:根据 key 的名字猜测是否是用于重定向的参数"
        },
        {
          "functionName": "IsPlainBase64Value(${1:s /*type: string*/})",
          "document": "判断Base64的结果是不是都是可见字符",
          "definitionStr": "IsPlainBase64Value(s string) bool"
        },
        {
          "functionName": "IsPasswordField(${1:key /*type: string*/})",
          "document": "判断是否是密码字段",
          "definitionStr": "IsPasswordField(key string) bool"
        },
        {
          "functionName": "IsMD5Value(${1:s /*type: string*/})",
          "document": "判断有没有参数是 MD5 值的",
          "definitionStr": "IsMD5Value(s string) bool"
        },
        {
          "functionName": "IsJsonResponse(${1:v1/*type: any*/})",
          "document": "判断请求是不是 JSON 请求",
          "definitionStr": "IsJsonResponse(any) bool"
        },
        {
          "functionName": "IsJSONPParam(${1:key /*type: string*/}, ${2:value})",
          "document": "判断 JSONP 参数",
          "definitionStr": "IsJSONPParam(key string, value any) bool"
        },
        {
          "functionName": "IsIPv6(${1:raw /*type: string*/})",
          "document": "判断一个字符串是不是 IPv6",
          "definitionStr": "IsIPv6(raw string) bool"
        },
        {
          "functionName": "IsIPv4(${1:raw /*type: string*/})",
          "document": "判断一个字符串是不是 IPv4",
          "definitionStr": "IsIPv4(raw string) bool"
        },
        {
          "functionName": "IsHttpURL(${1:v})",
          "document": "判断 URL 是不是 http(s):// ",
          "definitionStr": "IsHttpURL(v any) bool  doc:IsFullURL 根据 value 猜测是否是一个完整 url，目前只关心 http 和 https"
        },
        {
          "functionName": "IsHtmlResponse(${1:v1/*type: any*/})",
          "document": "判断一个 Response 是不是 HTML",
          "definitionStr": "IsHtmlResponse(any) bool"
        },
        {
          "functionName": "IsDigit(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "IsDigit(any) bool"
        },
        {
          "functionName": "IsCaptchaField(${1:key /*type: string*/})",
          "document": "判断一个参数是不是验证码",
          "definitionStr": "IsCaptchaField(key string) bool"
        },
        {
          "functionName": "IsBase64Value(${1:s /*type: string*/})",
          "document": "判断一个值是不是 base64",
          "definitionStr": "IsBase64Value(s string) bool"
        },
        {
          "functionName": "IsAlphaNum(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "IsAlphaNum(any) bool"
        },
        {
          "functionName": "IsAlpha(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "IsAlpha(any) bool"
        },
        {
          "functionName": "IsAlNum(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "IsAlNum(any) bool"
        },
        {
          "functionName": "IntersectString(${1:x /*type: []string*/}, ${2:y /*type: []string*/})",
          "document": "取两个集合的交集",
          "definitionStr": "IntersectString(x []string, y []string) []string  doc:IntersectString returns the intersection between two collections of string."
        },
        {
          "functionName": "IndexByte(${1:s /*type: string*/}, ${2:c /*type: byte*/})",
          "document": "判断一个 byte 的位置",
          "definitionStr": "IndexByte(s string, c byte) int  doc:IndexByte returns the index of the first instance of c in s, or -1 if c is not present in s."
        },
        {
          "functionName": "IndexAny(${1:schars /*type: string*/})",
          "document": "判断子字符串中任意一个字符在主串中的位置",
          "definitionStr": "IndexAny(s, chars string) int  doc:IndexAny returns the index of the first instance of any Unicode code pointfrom chars in s, or -1 if no Unicode code point from chars is present in s."
        },
        {
          "functionName": "Index(${1:ssubstr /*type: string*/})",
          "document": "判断子字符串在字符串中的位置",
          "definitionStr": "Index(s, substr string) int  doc:Index returns the index of the first instance of substr in s, or -1 if substr is not present in s."
        },
        {
          "functionName": "IPv4ToCClassNetwork(${1:s /*type: string*/})",
          "document": "把一个 IPv4 变成对应的 C段网络",
          "definitionStr": "IPv4ToCClassNetwork(s string) (string, error)"
        },
        {
          "functionName": "HostPort(${1:host /*type: string*/}, ${2:port})",
          "document": "把字符串Host和Port拼接起来",
          "definitionStr": "HostPort(host string, port any) string"
        },
        {
          "functionName": "HasSuffix(${1:ssuffix /*type: string*/})",
          "document": "判断字符串是否以子字符串为后缀",
          "definitionStr": "HasSuffix(s, suffix string) bool  doc:HasSuffix tests whether the string s ends with suffix."
        },
        {
          "functionName": "HasPrefix(${1:sprefix /*type: string*/})",
          "document": "判断字符串是不是以子串为前缀",
          "definitionStr": "HasPrefix(s, prefix string) bool  doc:HasPrefix tests whether the string s begins with prefix."
        },
        {
          "functionName": "Grok(${1:content/*type: string*/}, ${2:grokRule/*type: string*/})",
          "document": "同 `re.Grok`",
          "definitionStr": "Grok(string, string) yaklib.GrokResult"
        },
        {
          "functionName": "FixHTTPResponse(${1:raw /*type: []byte*/})",
          "document": "修复 HTTPResponse 的 bytes",
          "definitionStr": "FixHTTPResponse(raw []byte) (rsp []byte, body []byte, _ error)  doc:FixHTTPResponse try its best to fix and present human-readable response"
        },
        {
          "functionName": "FixHTTPRequest(${1:raw /*type: []byte*/})",
          "document": "",
          "definitionStr": "FixHTTPRequest(raw []byte) []byte"
        },
        {
          "functionName": "Fields(${1:s /*type: string*/})",
          "document": "按空格把字符串分割开",
          "definitionStr": "Fields(s string) []string  doc:Fields splits the string s around each instance of one or more consecutive white spacecharacters, as defined by unicode.IsSpace, returning a slice of substrings of s or anempty slice if s contains only white space."
        },
        {
          "functionName": "ExtractURLFromHTTPRequestRaw(${1:req /*type: []byte*/}, ${2:isHttps /*type: bool*/})",
          "document": "从一个原始数据包中提取 URL",
          "definitionStr": "ExtractURLFromHTTPRequestRaw(req []byte, isHttps bool) (*url.URL, error)"
        },
        {
          "functionName": "ExtractURLFromHTTPRequest(${1:r /*type: *http.Request*/}, ${2:https /*type: bool*/})",
          "document": "从一个请求对象提取 URL",
          "definitionStr": "ExtractURLFromHTTPRequest(r *http.Request, https bool) (*url.URL, error)"
        },
        {
          "functionName": "ExtractTitle(${1:v1/*type: any*/})",
          "document": "从 HTML 中提取标题",
          "definitionStr": "ExtractTitle(any) string"
        },
        {
          "functionName": "ExtractStrContext(${1:raw /*type: []byte*/}, ${2:res /*type: []string*/})",
          "document": "提取 str 的上下文，（前后字符串）",
          "definitionStr": "ExtractStrContext(raw []byte, res []string) []string"
        },
        {
          "functionName": "ExtractRootDomain(${1:i})",
          "document": "",
          "definitionStr": "ExtractRootDomain(i any) []string"
        },
        {
          "functionName": "ExtractJsonWithRaw(${1:i})",
          "document": "",
          "definitionStr": "ExtractJsonWithRaw(i any) ([]string, []string)"
        },
        {
          "functionName": "ExtractJson(${1:i})",
          "document": "",
          "definitionStr": "ExtractJson(i any) []string"
        },
        {
          "functionName": "ExtractHost(${1:raw /*type: string*/})",
          "document": "",
          "definitionStr": "ExtractHost(raw string) string"
        },
        {
          "functionName": "ExtractDomain(${1:i})",
          "document": "",
          "definitionStr": "ExtractDomain(i any) []string"
        },
        {
          "functionName": "ExtractChineseIDCards(${1:v1/*type: any*/})",
          "document": "提取内容中的身份证号",
          "definitionStr": "ExtractChineseIDCards(any) []string"
        },
        {
          "functionName": "ExtractBodyFromHTTPResponseRaw(${1:res /*type: []byte*/})",
          "document": "从 response bytes 中提取 body",
          "definitionStr": "ExtractBodyFromHTTPResponseRaw(res []byte) ([]byte, error)"
        },
        {
          "functionName": "EqualFold(${1:st /*type: string*/})",
          "document": "判断忽略大小写字符串是否相等？",
          "definitionStr": "EqualFold(s, t string) bool  doc:EqualFold reports whether s and t, interpreted as UTF-8 strings,are equal under Unicode case-folding, which is a more generalform of case-insensitivity."
        },
        {
          "functionName": "EndsWith(${1:ssuffix /*type: string*/})",
          "document": "判断字符串是否以子串为结尾",
          "definitionStr": "EndsWith(s, suffix string) bool  doc:HasSuffix tests whether the string s ends with suffix."
        },
        {
          "functionName": "Count(${1:ssubstr /*type: string*/})",
          "document": "字符串中包含多少个字串？",
          "definitionStr": "Count(s, substr string) int  doc:Count counts the number of non-overlapping instances of substr in s.If substr is an empty string, Count returns 1 + the number of Unicode code points in s."
        },
        {
          "functionName": "ContainsAny(${1:schars /*type: string*/})",
          "document": "字符串中包含字串的任何一个字符",
          "definitionStr": "ContainsAny(s, chars string) bool  doc:ContainsAny reports whether any Unicode code points in chars are within s."
        },
        {
          "functionName": "Contains(${1:ssubstr /*type: string*/})",
          "document": "字符串中是否包含一个子串",
          "definitionStr": "Contains(s, substr string) bool  doc:Contains reports whether substr is within s."
        },
        {
          "functionName": "Compare(${1:ab /*type: string*/})",
          "document": "比较字符串",
          "definitionStr": "Compare(a, b string) int  doc:Compare returns an integer comparing two strings lexicographically.The result will be 0 if a == b, -1 if a \u003c b, and +1 if a \u003e b.Compare is included only for symmetry with package bytes.It is usually clearer and always faster to use the built-instring comparison operators ==, \u003c, \u003e, and so on."
        },
        {
          "functionName": "CalcTextMaxSubStrStability(${1:raw...})",
          "document": "计算文本相似度（SQLMap 文本相似度算法）",
          "definitionStr": "CalcTextMaxSubStrStability(raw ...[]byte) (float64, error)"
        },
        {
          "functionName": "CalcSimilarity(${1:raw...})",
          "document": "计算多个文本的相似度（综合）",
          "definitionStr": "CalcSimilarity(raw ...[]byte) float64"
        },
        {
          "functionName": "CalcSimHashStability(${1:req...})",
          "document": "计算多个值 SimHash 的相似度",
          "definitionStr": "CalcSimHashStability(req ...[]byte) (float64, error)  doc:计算 simhash 稳定性"
        },
        {
          "functionName": "CalcSimHash(${1:raw /*type: []byte*/})",
          "document": "计算 SimHash 的值",
          "definitionStr": "CalcSimHash(raw []byte) uint64"
        },
        {
          "functionName": "CalcSSDeepStability(${1:req...})",
          "document": "计算多个文本的 SSDeep 平均相似度，0-1.0，越大越稳定（相似）",
          "definitionStr": "CalcSSDeepStability(req ...[]byte) (float64, error)  doc:稳定性定义为最远距离 / 最低分数"
        },
        {
          "functionName": "CalcSSDeep(${1:raw /*type: []byte*/})",
          "document": "计算 SSDeep 的 Hash 值",
          "definitionStr": "CalcSSDeep(raw []byte) string"
        }
      ]
    },
    {
      "libName": "spacengine",
      "prefix": "spacengine.",
      "functions": [
        {
          "functionName": "pageSize(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func spacengine.pageSize(v1: int) return (r0: func _spaceEngineConfigOpt(v1: *yaklib._spaceEngineConfig) )"
        },
        {
          "functionName": "maxRecord(${1:maxRecord/*type: int*/})",
          "document": "【参数】最多获取多少条数据？但是由于 limit 的限制，这个数据往往比 maxRecord 多，直到补满当前页",
          "definitionStr": "maxRecord(int) yaklib._spaceEngineConfigOpt"
        },
        {
          "functionName": "maxPage(${1:maxPage/*type: int*/})",
          "document": "【参数】最多筛选多少页？",
          "definitionStr": "maxPage(int) yaklib._spaceEngineConfigOpt"
        },
        {
          "functionName": "ZoomeyeQuery(${1:key /*type: string*/}, ${2:filter /*type: string*/}, ${3:opts...})",
          "document": "",
          "definitionStr": "ZoomeyeQuery(key string, filter string, opts ..._spaceEngineConfigOpt) (chan *spacengine.NetSpaceEngineResult, error)"
        },
        {
          "functionName": "ShodanQuery(${1:token /*type: string*/}, ${2:filter /*type: string*/}, ${3:opts...})",
          "document": "",
          "definitionStr": "ShodanQuery(token string, filter string, opts ..._spaceEngineConfigOpt) (chan *spacengine.NetSpaceEngineResult, error)"
        },
        {
          "functionName": "QuakeQuery(${1:token /*type: string*/}, ${2:filter /*type: string*/}, ${3:opts...})",
          "document": "",
          "definitionStr": "QuakeQuery(token string, filter string, opts ..._spaceEngineConfigOpt) (chan *spacengine.NetSpaceEngineResult, error)"
        },
        {
          "functionName": "HunterQuery(${1:namekey /*type: string*/}, ${2:filter /*type: string*/}, ${3:opts...})",
          "document": "新增 Hunter 空间引擎接口",
          "definitionStr": "HunterQuery(name, key string, filter string, opts ..._spaceEngineConfigOpt) (chan *spacengine.NetSpaceEngineResult, error)"
        },
        {
          "functionName": "FofaQuery(${1:emailkey /*type: string*/}, ${2:filter /*type: string*/}, ${3:opts...})",
          "document": "查询 Fofa 中的数据",
          "definitionStr": "FofaQuery(email, key string, filter string, opts ..._spaceEngineConfigOpt) (chan *spacengine.NetSpaceEngineResult, error)"
        }
      ]
    },
    {
      "libName": "smb",
      "prefix": "smb.",
      "functions": [
        {
          "functionName": "workstation(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "workstation(string) yaklib._smbConfigHandler"
        },
        {
          "functionName": "username(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "username(string) yaklib._smbConfigHandler"
        },
        {
          "functionName": "password(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "password(string) yaklib._smbConfigHandler"
        },
        {
          "functionName": "hash(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "hash(string) yaklib._smbConfigHandler"
        },
        {
          "functionName": "domain(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "domain(string) yaklib._smbConfigHandler"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "debug(bool) yaklib._smbConfigHandler"
        },
        {
          "functionName": "Connect(${1:addr /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "Connect(addr string, opts ..._smbConfigHandler) (*smb.Session, error)"
        }
      ]
    },
    {
      "libName": "simulator",
      "prefix": "simulator.",
      "functions": [
        {
          "functionName": "wsAddress(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.wsAddress(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "usernameSelector(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.usernameSelector(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "usernameList(${1:v1/*type: []string*/})",
          "document": "",
          "definitionStr": "usernameList([]string) examples.ConfigOpt"
        },
        {
          "functionName": "username(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func simulator.username(v1 ...string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "urlChangeMode",
          "document": "simulator.urlChangeMode: httpbrute.loginDetectMode",
          "definitionStr": "simulator.urlChangeMode: httpbrute.loginDetectMode"
        },
        {
          "functionName": "submitButtonSelector(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.submitButtonSelector(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "simple",
          "document": "simulator.simple: map[string]interface {} = 0xmap[626f64794d6f64696679546172676574:626f6479 626f64795265706c616365546172676574:626f64795265706c616365 63726561746542726f77736572:10221b5c0 686561646572734d6f64696679546172676574:68656164657273 686561646c657373:10221afd0 686f73744d6f64696679546172676574:686f7374 6e6f53616e64426f78:10221af60 70726f7879:10221adb0 726571756573744d6f64696679:10221b300 726573706f6e73654d6f64696679:10221b040 777341646472657373:10221acb0]",
          "definitionStr": "simulator.simple: map[string]interface {} = 0xmap[626f64794d6f64696679546172676574:626f6479 626f64795265706c616365546172676574:626f64795265706c616365 63726561746542726f77736572:10221b5c0 686561646572734d6f64696679546172676574:68656164657273 686561646c657373:10221afd0 686f73744d6f64696679546172676574:686f7374 6e6f53616e64426f78:10221af60 70726f7879:10221adb0 726571756573744d6f64696679:10221b300 726573706f6e73654d6f64696679:10221b040 777341646472657373:10221acb0]"
        },
        {
          "functionName": "proxy(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "func simulator.proxy(v1: string, v2 ...string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "passwordSelector(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.passwordSelector(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "passwordList(${1:v1/*type: []string*/})",
          "document": "",
          "definitionStr": "passwordList([]string) examples.ConfigOpt"
        },
        {
          "functionName": "password(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func simulator.password(v1 ...string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "loginDetectMode(${1:v1/*type: httpbrute.loginDetectMode*/}, ${2:v2/*type ...float64*/})",
          "document": "",
          "definitionStr": "func simulator.loginDetectMode(v1: httpbrute.loginDetectMode, v2 ...float64) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "leaklessStatus(${1:v1/*type: config.LeaklessMode*/})",
          "document": "",
          "definitionStr": "func simulator.leaklessStatus(v1: config.LeaklessMode) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "leaklessOn",
          "document": "simulator.leaklessOn: config.LeaklessMode",
          "definitionStr": "simulator.leaklessOn: config.LeaklessMode"
        },
        {
          "functionName": "leaklessOff",
          "document": "simulator.leaklessOff: config.LeaklessMode",
          "definitionStr": "simulator.leaklessOff: config.LeaklessMode"
        },
        {
          "functionName": "leaklessDefault",
          "document": "simulator.leaklessDefault: config.LeaklessMode",
          "definitionStr": "simulator.leaklessDefault: config.LeaklessMode"
        },
        {
          "functionName": "htmlChangeMode",
          "document": "simulator.htmlChangeMode: httpbrute.loginDetectMode",
          "definitionStr": "simulator.htmlChangeMode: httpbrute.loginDetectMode"
        },
        {
          "functionName": "extraWaitLoadTime(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func simulator.extraWaitLoadTime(v1: int) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "exePath(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.exePath(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "defaultChangeMode",
          "document": "simulator.defaultChangeMode: httpbrute.loginDetectMode",
          "definitionStr": "simulator.defaultChangeMode: httpbrute.loginDetectMode"
        },
        {
          "functionName": "captchaUrl(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "captchaUrl(string) examples.ConfigOpt"
        },
        {
          "functionName": "captchaMode(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "captchaMode(string) examples.ConfigOpt"
        },
        {
          "functionName": "captchaInputSelector(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.captchaInputSelector(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "captchaImgSelector(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func simulator.captchaImgSelector(v1: string) return (r0: func BruteConfigOpt(v1: *httpbrute.BruteConfig) )"
        },
        {
          "functionName": "HttpBruteForce(${1:v1/*type: string*/}, ${2:v2/*type ...httpbrute.BruteConfigOpt*/})",
          "document": "",
          "definitionStr": "func simulator.HttpBruteForce(v1: string, v2 ...httpbrute.BruteConfigOpt) return (r0: chan httpbrute.Result, r1: error)"
        }
      ]
    },
    {
      "libName": "servicescan",
      "prefix": "servicescan.",
      "functions": [
        {
          "functionName": "webRule(${1:v1/*type: any*/})",
          "document": "启用用户自定义 web 规则",
          "definitionStr": "webRule(any) fp.ConfigOption"
        },
        {
          "functionName": "web()",
          "document": "强制启用 web 扫描",
          "definitionStr": "web() fp.ConfigOption"
        },
        {
          "functionName": "service()",
          "document": "启动服务扫描（nmap 规则库）",
          "definitionStr": "service() fp.ConfigOption"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "设置代理！",
          "definitionStr": "proxy(...string) fp.ConfigOption"
        },
        {
          "functionName": "proto(${1:protos/*type ...any*/})",
          "document": "设置扫描的协议",
          "definitionStr": "proto(...any) fp.ConfigOption"
        },
        {
          "functionName": "probeTimeout(${1:请求超时时间/*type: float64*/})",
          "document": "",
          "definitionStr": "probeTimeout(float64) fp.ConfigOption"
        },
        {
          "functionName": "nmapRule(${1:v1/*type: any*/})",
          "document": "【参数】设置 nmap 规则文件（可以自己写）",
          "definitionStr": "nmapRule(any) fp.ConfigOption"
        },
        {
          "functionName": "nmapRarityMax(${1:max/*type: int*/})",
          "document": "【参数】设置nmap规则的最大稀有度",
          "definitionStr": "nmapRarityMax(int) fp.ConfigOption"
        },
        {
          "functionName": "maxProbesConcurrent(${1:size/*type: int*/})",
          "document": "【参数】每个指纹扫描目标允许的并发量",
          "definitionStr": "maxProbesConcurrent(int) fp.ConfigOption"
        },
        {
          "functionName": "maxProbes(${1:count/*type: int*/})",
          "document": "【参数】设置每个指纹扫描过程最多主动发送多少个数据包",
          "definitionStr": "maxProbes(int) fp.ConfigOption"
        },
        {
          "functionName": "excludePorts(${1:v1/*type: string*/})",
          "document": "设置排除端口",
          "definitionStr": "excludePorts(string) fp.ConfigOption"
        },
        {
          "functionName": "excludeHosts(${1:v1/*type: string*/})",
          "document": "设置排除 hosts",
          "definitionStr": "excludeHosts(string) fp.ConfigOption"
        },
        {
          "functionName": "databaseCache(${1:v1/*type: bool*/})",
          "document": "设置缓存（数据库中缓存）",
          "definitionStr": "databaseCache(bool) fp.ConfigOption"
        },
        {
          "functionName": "concurrent(${1:concurrentSize/*type: int*/})",
          "document": "",
          "definitionStr": "concurrent(int) fp.ConfigOption"
        },
        {
          "functionName": "cache(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "cache(bool) fp.ConfigOption"
        },
        {
          "functionName": "all()",
          "document": "【参数】扫描全部指纹",
          "definitionStr": "all() fp.ConfigOption"
        },
        {
          "functionName": "active(${1:isActive/*type: bool*/})",
          "document": "【参数】主动扫描模式",
          "definitionStr": "active(bool) fp.ConfigOption"
        },
        {
          "functionName": "ScanOne(${1:target /*type: string*/}, ${2:port /*type: int*/}, ${3:opts...})",
          "document": "同步扫描单个目标",
          "definitionStr": "ScanOne(target string, port int, opts ...fp.ConfigOption) (*fp.MatchResult, error)"
        },
        {
          "functionName": "ScanFromSynResult(${1:res}, ${2:opts...})",
          "document": "从 synscan 中返回的结果直接进入 servicescan 扫描的通道",
          "definitionStr": "ScanFromSynResult(res any, opts ...fp.ConfigOption) (chan *fp.MatchResult, error)"
        },
        {
          "functionName": "ScanFromSpaceEngine(${1:res}, ${2:opts...})",
          "document": "从网络空间搜索引擎的结果中扫描指纹信息",
          "definitionStr": "ScanFromSpaceEngine(res any, opts ...fp.ConfigOption) (chan *fp.MatchResult, error)"
        },
        {
          "functionName": "ScanFromPing(${1:res /*type: chan *pingutil.PingResult*/}, ${2:ports /*type: string*/}, ${3:opts...})",
          "document": "从 Ping 中扫描",
          "definitionStr": "ScanFromPing(res chan *pingutil.PingResult, ports string, opts ...fp.ConfigOption) (chan *fp.MatchResult, error)"
        },
        {
          "functionName": "Scan(${1:target /*type: string*/}, ${2:port /*type: string*/}, ${3:opts...})",
          "document": "扫描服务指纹的核心函数",
          "definitionStr": "Scan(target string, port string, opts ...fp.ConfigOption) (chan *fp.MatchResult, error)"
        }
      ]
    },
    {
      "libName": "sca",
      "prefix": "sca.",
      "functions": [
        {
          "functionName": "scanMode(${1:v1/*type: analyzer.ScanMode*/})",
          "document": "",
          "definitionStr": "func sca.scanMode(v1: analyzer.ScanMode) return (r0: func dockerContextOption(v1: *sca.dockerContextConfig) )"
        },
        {
          "functionName": "endpoint(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func sca.endpoint(v1: string) return (r0: func dockerContextOption(v1: *sca.dockerContextConfig) )"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func sca.concurrent(v1: int) return (r0: func dockerContextOption(v1: *sca.dockerContextConfig) )"
        },
        {
          "functionName": "analyzers(${1:v1/*type ...analyzer.TypAnalyzer*/})",
          "document": "",
          "definitionStr": "func sca.analyzers(v1 ...analyzer.TypAnalyzer) return (r0: func dockerContextOption(v1: *sca.dockerContextConfig) )"
        },
        {
          "functionName": "ScanImageFromFile(${1:v1/*type: string*/}, ${2:v2/*type ...sca.dockerContextOption*/})",
          "document": "",
          "definitionStr": "func sca.ScanImageFromFile(v1: string, v2 ...sca.dockerContextOption) return (r0: []*dxtypes.Package, r1: error)"
        },
        {
          "functionName": "ScanImageFromContext(${1:v1/*type: string*/}, ${2:v2/*type ...sca.dockerContextOption*/})",
          "document": "",
          "definitionStr": "func sca.ScanImageFromContext(v1: string, v2 ...sca.dockerContextOption) return (r0: []*dxtypes.Package, r1: error)"
        },
        {
          "functionName": "ScanContainerFromContext(${1:v1/*type: string*/}, ${2:v2/*type ...sca.dockerContextOption*/})",
          "document": "",
          "definitionStr": "func sca.ScanContainerFromContext(v1: string, v2 ...sca.dockerContextOption) return (r0: []*dxtypes.Package, r1: error)"
        },
        {
          "functionName": "RUST_CARGO_ANALYZER",
          "document": "sca.RUST_CARGO_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.RUST_CARGO_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "RUBY_GEMSPEC_ANALYZER",
          "document": "sca.RUBY_GEMSPEC_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.RUBY_GEMSPEC_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "RUBY_BUNDLER_ANALYZER",
          "document": "sca.RUBY_BUNDLER_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.RUBY_BUNDLER_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "RPM_ALALYZER",
          "document": "sca.RPM_ALALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.RPM_ALALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "PYTHON_POETRY_ANALYZER",
          "document": "sca.PYTHON_POETRY_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.PYTHON_POETRY_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "PYTHON_PIP_ANALYZER",
          "document": "sca.PYTHON_PIP_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.PYTHON_PIP_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "PYTHON_PIPENV_ANALYZER",
          "document": "sca.PYTHON_PIPENV_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.PYTHON_PIPENV_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "PYTHON_PACKAGING_ANALYZER",
          "document": "sca.PYTHON_PACKAGING_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.PYTHON_PACKAGING_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "PKG_MODE",
          "document": "sca.PKG_MODE: int = 0x2",
          "definitionStr": "sca.PKG_MODE: int = 0x2"
        },
        {
          "functionName": "PHP_COMPOSER_ANALYZER",
          "document": "sca.PHP_COMPOSER_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.PHP_COMPOSER_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "NODE_YARN_ANALYZER",
          "document": "sca.NODE_YARN_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.NODE_YARN_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "NODE_PNPM_ANALYZER",
          "document": "sca.NODE_PNPM_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.NODE_PNPM_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "NODE_NPM_ANALYZER",
          "document": "sca.NODE_NPM_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.NODE_NPM_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "LANGUAGE_MODE",
          "document": "sca.LANGUAGE_MODE: int = 0x4",
          "definitionStr": "sca.LANGUAGE_MODE: int = 0x4"
        },
        {
          "functionName": "JAVA_POM_ANALYZER",
          "document": "sca.JAVA_POM_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.JAVA_POM_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "JAVA_JAR_ANALYZER",
          "document": "sca.JAVA_JAR_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.JAVA_JAR_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "JAVA_GRADLE_ANALYZER",
          "document": "sca.JAVA_GRADLE_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.JAVA_GRADLE_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "GO_MOD_ANALYZER",
          "document": "sca.GO_MOD_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.GO_MOD_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "GO_BINARY_ANALYZER",
          "document": "sca.GO_BINARY_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.GO_BINARY_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "DPKG_ALALYZER",
          "document": "sca.DPKG_ALALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.DPKG_ALALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "CLANG_CONAN_ANALYZER",
          "document": "sca.CLANG_CONAN_ANALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.CLANG_CONAN_ANALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "APK_ALALYZER",
          "document": "sca.APK_ALALYZER: analyzer.TypAnalyzer",
          "definitionStr": "sca.APK_ALALYZER: analyzer.TypAnalyzer"
        },
        {
          "functionName": "ALL_MODE",
          "document": "sca.ALL_MODE: analyzer.ScanMode",
          "definitionStr": "sca.ALL_MODE: analyzer.ScanMode"
        }
      ]
    },
    {
      "libName": "rpa",
      "prefix": "rpa.",
      "functions": [
        {
          "functionName": "whiteDomain(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "whiteDomain(string) core.ConfigOpt"
        },
        {
          "functionName": "timeout(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "timeout(int) core.ConfigOpt"
        },
        {
          "functionName": "strictUrl(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "strictUrl(bool) core.ConfigOpt"
        },
        {
          "functionName": "select(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "select(string, string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "proxy(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "proxy(string, ...string) core.ConfigOpt"
        },
        {
          "functionName": "maxUrl(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "maxUrl(int) core.ConfigOpt"
        },
        {
          "functionName": "input(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "input(string, string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "headers(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "headers(string) core.ConfigOpt"
        },
        {
          "functionName": "depth(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "depth(int) core.ConfigOpt"
        },
        {
          "functionName": "click(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "click(string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "bruteUsername(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "bruteUsername(...string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "bruteUserPassPath(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "bruteUserPassPath(...string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "bruteUserElement(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "bruteUserElement(string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "brutePassword(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "brutePassword(...string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "brutePassElement(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "brutePassElement(string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "bruteCaptchaElement(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "bruteCaptchaElement(string, string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "bruteButtonElement(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "bruteButtonElement(string) bruteforce.ConfigOpt"
        },
        {
          "functionName": "blackDomain(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "blackDomain(string) core.ConfigOpt"
        },
        {
          "functionName": "Start(${1:url /*type: string*/}, ${2:opt...})",
          "document": "",
          "definitionStr": "Start(url string, opt ...core.ConfigOpt) (chan core.RequestIf, error)"
        },
        {
          "functionName": "Bruteforce(${1:url /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "Bruteforce(url string, opts ...ConfigOpt) (string, string)"
        }
      ]
    },
    {
      "libName": "risk",
      "prefix": "risk.",
      "functions": [
        {
          "functionName": "typeVerbose(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "typeVerbose(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "type(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "type(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "token(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "token(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "titleVerbose(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "titleVerbose(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "title(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "title(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "solution(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func risk.solution(v1: string) return (r0: func RiskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "severity(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "severity(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "runtimeId(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "runtimeId(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "response(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "response(any) yakit.RiskParamsOpt"
        },
        {
          "functionName": "request(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "request(any) yakit.RiskParamsOpt"
        },
        {
          "functionName": "potential(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "potential(bool) yakit.RiskParamsOpt"
        },
        {
          "functionName": "payload(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "payload(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "parameter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "parameter(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "level(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "level(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "ignore(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func risk.ignore(v1: bool) return (r0: func RiskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "fromYakScript(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "fromYakScript(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "details(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "details(any) yakit.RiskParamsOpt"
        },
        {
          "functionName": "description(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func risk.description(v1: string) return (r0: func RiskParamsOpt(v1: *yakit.Risk) )"
        },
        {
          "functionName": "cve(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "cve(string) yakit.RiskParamsOpt"
        },
        {
          "functionName": "YieldRiskByTarget(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "YieldRiskByTarget(string) chan *yakit.Risk"
        },
        {
          "functionName": "YieldRiskByRuntimeId(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "YieldRiskByRuntimeId(string) chan *yakit.Risk"
        },
        {
          "functionName": "YieldRiskByCreateAt(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func risk.YieldRiskByCreateAt(v1: int64) return (r0: chan *yakit.Risk)"
        },
        {
          "functionName": "Save(${1:r /*type: *Risk*/})",
          "document": "",
          "definitionStr": "Save(r *Risk) error"
        },
        {
          "functionName": "RegisterBeforeRiskSave(${1:v1/*type: func (v1: *yakit.Risk) */})",
          "document": "",
          "definitionStr": "`func risk.RegisterBeforeRiskSave(v1: func (v1: *yakit.Risk) )`"
        },
        {
          "functionName": "NewUnverifiedRisk(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewUnverifiedRisk(string, string, ...yakit.RiskParamsOpt) (*yakit.Risk, error)"
        },
        {
          "functionName": "NewRisk(${1:target /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "NewRisk(target string, opts ...yakit.RiskParamsOpt)"
        },
        {
          "functionName": "NewRandomPortTrigger(${1:opt...})",
          "document": "",
          "definitionStr": "NewRandomPortTrigger(opt ...RiskParamsOpt) (token string, addr string, _ error)"
        },
        {
          "functionName": "NewPublicReverseRMIUrl(${1:v1/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewPublicReverseRMIUrl(...yakit.RiskParamsOpt) string"
        },
        {
          "functionName": "NewPublicReverseHTTPUrl(${1:v1/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewPublicReverseHTTPUrl(...yakit.RiskParamsOpt) string"
        },
        {
          "functionName": "NewPublicReverseHTTPSUrl(${1:v1/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewPublicReverseHTTPSUrl(...yakit.RiskParamsOpt) string"
        },
        {
          "functionName": "NewLocalReverseRMIUrl(${1:v1/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewLocalReverseRMIUrl(...yakit.RiskParamsOpt) string"
        },
        {
          "functionName": "NewLocalReverseHTTPUrl(${1:v1/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewLocalReverseHTTPUrl(...yakit.RiskParamsOpt) string"
        },
        {
          "functionName": "NewLocalReverseHTTPSUrl(${1:v1/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "NewLocalReverseHTTPSUrl(...yakit.RiskParamsOpt) string"
        },
        {
          "functionName": "NewDNSLogDomain()",
          "document": "",
          "definitionStr": "NewDNSLogDomain() (domain string, token string, _ error)"
        },
        {
          "functionName": "HaveReverseRisk(${1:token /*type: string*/})",
          "document": "判断一个 Token 的反连是否触发",
          "definitionStr": "HaveReverseRisk(token string) bool"
        },
        {
          "functionName": "ExtractTokenFromUrl(${1:tokenUrl /*type: string*/})",
          "document": "从 URL 中提取 token",
          "definitionStr": "ExtractTokenFromUrl(tokenUrl string) string"
        },
        {
          "functionName": "DeleteRiskByTarget(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "`func risk.DeleteRiskByTarget(v1: string)`"
        },
        {
          "functionName": "DeleteRiskByID(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "`func risk.DeleteRiskByID(v1: any)`"
        },
        {
          "functionName": "CreateRisk(${1:v1/*type: string*/}, ${2:v2/*type ...yakit.RiskParamsOpt*/})",
          "document": "",
          "definitionStr": "CreateRisk(string, ...yakit.RiskParamsOpt) *yakit.Risk"
        },
        {
          "functionName": "CheckRandomTriggerByToken(${1:t /*type: string*/})",
          "document": "通过 Token 来查询随机触发器",
          "definitionStr": "CheckRandomTriggerByToken(t string) (*tpb.RandomPortTriggerEvent, error)"
        },
        {
          "functionName": "CheckICMPTriggerByLength(${1:i /*type: int*/})",
          "document": "检查 ICMP 触发器",
          "definitionStr": "CheckICMPTriggerByLength(i int) (*tpb.ICMPTriggerNotification, error)"
        },
        {
          "functionName": "CheckDNSLogByToken(${1:token /*type: string*/})",
          "document": "",
          "definitionStr": "CheckDNSLogByToken(token string) ([]*tpb.DNSLogEvent, error)"
        }
      ]
    },
    {
      "libName": "report",
      "prefix": "report.",
      "functions": [
        {
          "functionName": "New()",
          "document": "新增 报告 机制",
          "definitionStr": "New() *yakit.Report"
        }
      ]
    },
    {
      "libName": "regen",
      "prefix": "regen.",
      "functions": [
        {
          "functionName": "MustGenerate(${1:pattern /*type: string*/})",
          "document": "",
          "definitionStr": "MustGenerate(pattern string) []string"
        },
        {
          "functionName": "Generate(${1:pattern /*type: string*/})",
          "document": "",
          "definitionStr": "Generate(pattern string) ([]string, error)"
        }
      ]
    },
    {
      "libName": "redis",
      "prefix": "redis.",
      "functions": [
        {
          "functionName": "username(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "username(string) yaklib.redisConfigOpt"
        },
        {
          "functionName": "timeoutSeconds(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "timeoutSeconds(int) yaklib.redisConfigOpt"
        },
        {
          "functionName": "retry(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "retry(int) yaklib.redisConfigOpt"
        },
        {
          "functionName": "port(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "port(int) yaklib.redisConfigOpt"
        },
        {
          "functionName": "password(${1:v1/*type: string*/})",
          "document": "设置 Redis 密码",
          "definitionStr": "password(string) yaklib.redisConfigOpt"
        },
        {
          "functionName": "host(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "host(string) yaklib.redisConfigOpt"
        },
        {
          "functionName": "addr(${1:v1/*type: string*/})",
          "document": "设置 Redis 地址",
          "definitionStr": "addr(string) yaklib.redisConfigOpt"
        },
        {
          "functionName": "New(${1:v1/*type ...yaklib.redisConfigOpt*/})",
          "document": "启动一个 Redis 客户端",
          "definitionStr": "New(...yaklib.redisConfigOpt) *yaklib.redisClient"
        }
      ]
    },
    {
      "libName": "re2",
      "prefix": "re2.",
      "functions": [
        {
          "functionName": "ReplaceAllWithFunc(${1:origin}, ${2:re /*type: string*/}, ${3:newStr /*type: func(string) string*/})",
          "document": "",
          "definitionStr": "ReplaceAllWithFunc(origin any, re string, newStr func(string) string) string"
        },
        {
          "functionName": "ReplaceAll(${1:origin}, ${2:re /*type: string*/}, ${3:newStr})",
          "document": "",
          "definitionStr": "ReplaceAll(origin any, re string, newStr any) string"
        },
        {
          "functionName": "QuoteMeta(${1:s /*type: string*/})",
          "document": "",
          "definitionStr": "QuoteMeta(s string) string  doc:QuoteMeta returns a string that escapes all regular expression metacharactersinside the argument text; the returned string is a regular expression matchingthe literal text."
        },
        {
          "functionName": "MustCompilePOSIX(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "MustCompilePOSIX(string) *regexp.Regexp"
        },
        {
          "functionName": "MustCompile(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "MustCompile(string) *regexp.Regexp"
        },
        {
          "functionName": "Match(${1:v1/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "Match(string, any) bool"
        },
        {
          "functionName": "Grok(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "Grok(string, string) yaklib.GrokResult"
        },
        {
          "functionName": "FindSubmatchIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindSubmatchIndex(origin any, re string) []int"
        },
        {
          "functionName": "FindSubmatchAllIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindSubmatchAllIndex(origin any, re string) [][]int"
        },
        {
          "functionName": "FindSubmatchAll(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindSubmatchAll(origin any, re string) [][]string"
        },
        {
          "functionName": "FindSubmatch(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindSubmatch(origin any, re string) []string"
        },
        {
          "functionName": "FindIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindIndex(origin any, re string) []int"
        },
        {
          "functionName": "FindGroupAll(${1:i}, ${2:raw /*type: string*/})",
          "document": "",
          "definitionStr": "FindGroupAll(i any, raw string) []map[string]string"
        },
        {
          "functionName": "FindGroup(${1:i}, ${2:raw /*type: string*/})",
          "document": "",
          "definitionStr": "FindGroup(i any, raw string) map[string]string"
        },
        {
          "functionName": "FindAllIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindAllIndex(origin any, re string) [][]int"
        },
        {
          "functionName": "FindAll(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "FindAll(origin any, re string) []string"
        },
        {
          "functionName": "Find(${1:origin}, ${2:re /*type: string*/})",
          "document": "",
          "definitionStr": "Find(origin any, re string) string"
        },
        {
          "functionName": "ExtractURL(${1:i})",
          "document": "",
          "definitionStr": "ExtractURL(i any) []string  doc:URL"
        },
        {
          "functionName": "ExtractTTY(${1:i})",
          "document": "",
          "definitionStr": "ExtractTTY(i any) []string  doc:TTY"
        },
        {
          "functionName": "ExtractPath(${1:i})",
          "document": "",
          "definitionStr": "ExtractPath(i any) []string  doc:PATHPARAM"
        },
        {
          "functionName": "ExtractMac(${1:i})",
          "document": "",
          "definitionStr": "ExtractMac(i any) []string"
        },
        {
          "functionName": "ExtractIPv6(${1:i})",
          "document": "",
          "definitionStr": "ExtractIPv6(i any) []string"
        },
        {
          "functionName": "ExtractIPv4(${1:i})",
          "document": "",
          "definitionStr": "ExtractIPv4(i any) []string"
        },
        {
          "functionName": "ExtractIP(${1:i})",
          "document": "",
          "definitionStr": "ExtractIP(i any) []string"
        },
        {
          "functionName": "ExtractHostPort(${1:i})",
          "document": "",
          "definitionStr": "ExtractHostPort(i any) []string  doc:HOSTPORT"
        },
        {
          "functionName": "ExtractEmail(${1:i})",
          "document": "",
          "definitionStr": "ExtractEmail(i any) []string"
        },
        {
          "functionName": "CompilePOSIX(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "CompilePOSIX(string) (*regexp.Regexp, error)"
        },
        {
          "functionName": "Compile(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "Compile(string) (*regexp.Regexp, error)"
        }
      ]
    },
    {
      "libName": "re",
      "prefix": "re.",
      "functions": [
        {
          "functionName": "ReplaceAllWithFunc(${1:origin}, ${2:re /*type: string*/}, ${3:newStr /*type: func(string) string*/})",
          "document": "正则批量替换数据（使用函数处理匹配结果）",
          "definitionStr": "ReplaceAllWithFunc(origin any, re string, newStr func(string) string) string"
        },
        {
          "functionName": "ReplaceAll(${1:origin}, ${2:re /*type: string*/}, ${3:newStr})",
          "document": "整体批量替换",
          "definitionStr": "ReplaceAll(origin any, re string, newStr any) string"
        },
        {
          "functionName": "QuoteMeta(${1:s /*type: string*/})",
          "document": "把正则保留字符进行转义",
          "definitionStr": "QuoteMeta(s string) string  doc:QuoteMeta returns a string that escapes all regular expression metacharactersinside the argument text; the returned string is a regular expression matchingthe literal text."
        },
        {
          "functionName": "MustCompilePOSIX(${1:regexpStr/*type: string*/})",
          "document": "编译正则 POSIX 模式，编译失败则 Panic",
          "definitionStr": "MustCompilePOSIX(string) *regexp.Regexp"
        },
        {
          "functionName": "MustCompile(${1:regexpStr/*type: string*/})",
          "document": "编译正则，如果编译失败则 Panic",
          "definitionStr": "MustCompile(string) *regexp.Regexp"
        },
        {
          "functionName": "Match(${1:regexpPattern/*type: string*/}, ${2:content/*type: any*/})",
          "document": "",
          "definitionStr": "Match(string, any) bool"
        },
        {
          "functionName": "Grok(${1:content/*type: string*/}, ${2:grokRule/*type: string*/})",
          "document": "从内容中按照 Grok 规则提取数据",
          "definitionStr": "Grok(string, string) yaklib.GrokResult"
        },
        {
          "functionName": "FindSubmatchIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "只匹配并提取第一组的分组带索引（起止位置）",
          "definitionStr": "FindSubmatchIndex(origin any, re string) []int"
        },
        {
          "functionName": "FindSubmatchAllIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "匹配并提取分组带索引（起止位置）",
          "definitionStr": "FindSubmatchAllIndex(origin any, re string) [][]int"
        },
        {
          "functionName": "FindSubmatchAll(${1:origin}, ${2:re /*type: string*/})",
          "document": "正则匹配提取带分组的数据（匹配全部）",
          "definitionStr": "FindSubmatchAll(origin any, re string) [][]string"
        },
        {
          "functionName": "FindSubmatch(${1:origin}, ${2:re /*type: string*/})",
          "document": "正则匹配提取带分组的数据（只匹配一个）",
          "definitionStr": "FindSubmatch(origin any, re string) []string"
        },
        {
          "functionName": "FindIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "提取匹配到的数据索引位置（起止位置）",
          "definitionStr": "FindIndex(origin any, re string) []int"
        },
        {
          "functionName": "FindGroupAll(${1:i}, ${2:raw /*type: string*/})",
          "document": "",
          "definitionStr": "FindGroupAll(i any, raw string) []map[string]string"
        },
        {
          "functionName": "FindGroup(${1:i}, ${2:raw /*type: string*/})",
          "document": "",
          "definitionStr": "FindGroup(i any, raw string) map[string]string"
        },
        {
          "functionName": "FindAllIndex(${1:origin}, ${2:re /*type: string*/})",
          "document": "提取匹配到的数据的索引（起止位置）",
          "definitionStr": "FindAllIndex(origin any, re string) [][]int"
        },
        {
          "functionName": "FindAll(${1:origin}, ${2:re /*type: string*/})",
          "document": "提取所有正则匹配到的数据",
          "definitionStr": "FindAll(origin any, re string) []string"
        },
        {
          "functionName": "Find(${1:origin}, ${2:re /*type: string*/})",
          "document": "匹配并提取数据中符合正则的数据",
          "definitionStr": "Find(origin any, re string) string"
        },
        {
          "functionName": "ExtractURL(${1:i})",
          "document": "从内容中提取 URL",
          "definitionStr": "ExtractURL(i any) []string  doc:URL"
        },
        {
          "functionName": "ExtractTTY(${1:i})",
          "document": "从内容中提取 TTY 内容",
          "definitionStr": "ExtractTTY(i any) []string  doc:TTY"
        },
        {
          "functionName": "ExtractPath(${1:i})",
          "document": "从内容中提取路径",
          "definitionStr": "ExtractPath(i any) []string  doc:PATHPARAM"
        },
        {
          "functionName": "ExtractMac(${1:i})",
          "document": "从字符串中提取可用的 Mac 地址",
          "definitionStr": "ExtractMac(i any) []string"
        },
        {
          "functionName": "ExtractIPv6(${1:i})",
          "document": "从内容中提取 IPv6 地址",
          "definitionStr": "ExtractIPv6(i any) []string"
        },
        {
          "functionName": "ExtractIPv4(${1:i})",
          "document": "从内容中提取 IPv4 地址",
          "definitionStr": "ExtractIPv4(i any) []string"
        },
        {
          "functionName": "ExtractIP(${1:i})",
          "document": "从内容中提取 IP 地址",
          "definitionStr": "ExtractIP(i any) []string"
        },
        {
          "functionName": "ExtractHostPort(${1:i})",
          "document": "从结果中提取 `host:port`",
          "definitionStr": "ExtractHostPort(i any) []string  doc:HOSTPORT"
        },
        {
          "functionName": "ExtractEmail(${1:i})",
          "document": "从字符串中提取 email",
          "definitionStr": "ExtractEmail(i any) []string"
        },
        {
          "functionName": "CompilePOSIX(${1:regexpStr/*type: string*/})",
          "document": "",
          "definitionStr": "CompilePOSIX(string) (*regexp.Regexp, error)"
        },
        {
          "functionName": "Compile(${1:regexpStr/*type: string*/})",
          "document": "编译正则",
          "definitionStr": "Compile(string) (*regexp.Regexp, error)"
        }
      ]
    },
    {
      "libName": "rdp",
      "prefix": "rdp.",
      "functions": [
        {
          "functionName": "Version(${1:addr /*type: string*/}, ${2:timeout /*type: time.Duration*/})",
          "document": "",
          "definitionStr": "Version(addr string, timeout time.Duration) (_ string, _ []string, finalResult error)"
        },
        {
          "functionName": "Login(${1:ipdomainuserpassword /*type: string*/}, ${2:port /*type: int*/})",
          "document": "",
          "definitionStr": "Login(ip, domain, user, password string, port int) (_ bool, err error)"
        }
      ]
    },
    {
      "libName": "poc",
      "prefix": "poc.",
      "functions": [
        {
          "functionName": "websocketOnClient(${1:v1/*type: func (v1: *lowhttp.WebsocketClient) */})",
          "document": "",
          "definitionStr": "websocketOnClient(func(*lowhttp.WebsocketClient)) yaklib.pocConfig"
        },
        {
          "functionName": "websocketFromServer(${1:v1/*type: func (v1: bytes, v2: func () ) */})",
          "document": "",
          "definitionStr": "websocketFromServer(func([]uint8, func())) yaklib.pocConfig"
        },
        {
          "functionName": "websocket(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "websocket(bool) yaklib.pocConfig"
        },
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "timeout(float64) yaklib.pocConfig"
        },
        {
          "functionName": "source(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.source(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "session(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "session(any) yaklib.pocConfig"
        },
        {
          "functionName": "save(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "save(bool) yaklib.pocConfig"
        },
        {
          "functionName": "retryTimes(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "retryTimes(int) yaklib.pocConfig"
        },
        {
          "functionName": "retryNotInStatusCode(${1:v1/*type ...int*/})",
          "document": "",
          "definitionStr": "retryNotInStatusCode(...int) yaklib.pocConfig"
        },
        {
          "functionName": "retryInStatusCode(${1:v1/*type ...int*/})",
          "document": "",
          "definitionStr": "retryInStatusCode(...int) yaklib.pocConfig"
        },
        {
          "functionName": "replaceQueryParam(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceQueryParam(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replacePostParam(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replacePostParam(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replacePath(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replacePath(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceMethod(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceMethod(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceHost(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceHost(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceHeader(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceHeader(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceFirstLine(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceFirstLine(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceCookie(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceCookie(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceBody(${1:v1/*type: bytes*/}, ${2:v2/*type: bool*/})",
          "document": "",
          "definitionStr": "func poc.replaceBody(v1: bytes, v2: bool) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceBasicAuth(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.replaceBasicAuth(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceAllQueryParams(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "func poc.replaceAllQueryParams(v1: map[string]string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "replaceAllPostParams(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "func poc.replaceAllPostParams(v1: map[string]string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "redirectTimes(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "redirectTimes(int) yaklib.pocConfig"
        },
        {
          "functionName": "redirectHandler(${1:v1/*type: func (v1: bool, v2: bytes, v3: bytes) return(bool) */})",
          "document": "",
          "definitionStr": "redirectHandler(func(bool, []uint8, []uint8) bool) yaklib.pocConfig"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "proxy(...string) yaklib.pocConfig"
        },
        {
          "functionName": "port(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "port(int) yaklib.pocConfig"
        },
        {
          "functionName": "params(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "params(any) yaklib.pocConfig"
        },
        {
          "functionName": "noRedirect(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "noRedirect(bool) yaklib.pocConfig"
        },
        {
          "functionName": "noFixContentLength(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "noFixContentLength(bool) yaklib.pocConfig"
        },
        {
          "functionName": "jsRedirect(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "jsRedirect(bool) yaklib.pocConfig"
        },
        {
          "functionName": "https(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "https(bool) yaklib.pocConfig"
        },
        {
          "functionName": "http2(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "http2(bool) yaklib.pocConfig"
        },
        {
          "functionName": "host(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "host(string) yaklib.pocConfig"
        },
        {
          "functionName": "deleteQueryParam(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.deleteQueryParam(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "deletePostParam(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.deletePostParam(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "deleteHeader(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.deleteHeader(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "deleteForm(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.deleteForm(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "deleteCookie(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.deleteCookie(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendUploadFile(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type: any*/}, ${4:v4/*type ...string*/})",
          "document": "",
          "definitionStr": "func poc.appendUploadFile(v1: string, v2: string, v3: any, v4 ...string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendQueryParam(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.appendQueryParam(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendPostParam(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.appendPostParam(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendPath(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.appendPath(v1: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendHeader(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.appendHeader(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendFormEncoded(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.appendFormEncoded(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "appendCookie(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.appendCookie(v1: string, v2: string) return (r0: func PocConfig(v1: *yaklib._pocConfig) )"
        },
        {
          "functionName": "Websocket(${1:v1/*type: any*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "Websocket(any, ...yaklib.pocConfig) ([]uint8, []uint8, error)"
        },
        {
          "functionName": "Split(${1:raw /*type: []byte*/}, ${2:hook...})",
          "document": "把一个数据包的 Header 部分和 Body 分开，Header 是 string，body 部分是 bytes",
          "definitionStr": "Split(raw []byte, hook ...func(line string)) (string, []byte)"
        },
        {
          "functionName": "ReplaceHTTPPacketQueryParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketQueryParam(v1: bytes, v2: string, v3: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketPostParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketPostParam(v1: bytes, v2: string, v3: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketPath(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketPath(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketMethod(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketMethod(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketHost(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketHost(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketHeader(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: any*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketHeader(v1: bytes, v2: string, v3: any) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketFirstLine(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketFirstLine(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketCookie(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: any*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketCookie(v1: bytes, v2: string, v3: any) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketBody(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketBody(v1: bytes, v2: bytes) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceHTTPPacketBasicAuth(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceHTTPPacketBasicAuth(v1: bytes, v2: string, v3: string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceBody(${1:raw /*type: []byte*/}, ${2:body /*type: []byte*/}, ${3:chunk /*type: bool*/})",
          "document": "",
          "definitionStr": "ReplaceBody(raw []byte, body []byte, chunk bool) []byte"
        },
        {
          "functionName": "ReplaceAllHTTPPacketQueryParams(${1:v1/*type: bytes*/}, ${2:v2/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceAllHTTPPacketQueryParams(v1: bytes, v2: map[string]string) return (r0: bytes)"
        },
        {
          "functionName": "ReplaceAllHTTPPacketPostParams(${1:v1/*type: bytes*/}, ${2:v2/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "func poc.ReplaceAllHTTPPacketPostParams(v1: bytes, v2: map[string]string) return (r0: bytes)"
        },
        {
          "functionName": "Post(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.Post(v1: string, v2 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "ParseUrlToHTTPRequestRaw(${1:method /*type: string*/}, ${2:i})",
          "document": "把 URL 解析成原始数据包",
          "definitionStr": "ParseUrlToHTTPRequestRaw(method string, i any) (bool, []byte, error)"
        },
        {
          "functionName": "ParseBytesToHTTPResponse(${1:res /*type: []byte*/})",
          "document": "把一个数据包转变成可用的 HTTP Response 对象",
          "definitionStr": "ParseBytesToHTTPResponse(res []byte) (*http.Response, error)"
        },
        {
          "functionName": "ParseBytesToHTTPRequest(${1:raw /*type: []byte*/})",
          "document": "把一个原始数据包 bytes 转变成 HTTP 请求",
          "definitionStr": "ParseBytesToHTTPRequest(raw []byte) (*http.Request, error)"
        },
        {
          "functionName": "Options(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.Options(v1: string, v2 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "IsResponse(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func poc.IsResponse(v1: any) return (r0: bool)"
        },
        {
          "functionName": "Head(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.Head(v1: string, v2 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "HTTPRequestToCurl(${1:v1/*type: bool*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func poc.HTTPRequestToCurl(v1: bool, v2: any) return (r0: string)"
        },
        {
          "functionName": "HTTPPacketForceChunked(${1:raw /*type: []byte*/})",
          "document": "",
          "definitionStr": "HTTPPacketForceChunked(raw []byte) []byte"
        },
        {
          "functionName": "HTTPEx(${1:v1/*type: any*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.HTTPEx(v1: any, v2 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "HTTP(${1:raw}, ${2:opts...})",
          "document": "",
          "definitionStr": "HTTP(raw any, opts ...pocConfig) ([]byte, []byte, error)"
        },
        {
          "functionName": "GetStatusCodeFromResponse(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetStatusCodeFromResponse(v1: bytes) return (r0: int)"
        },
        {
          "functionName": "GetHTTPPacketQueryParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketQueryParam(v1: bytes, v2: string) return (r0: string)"
        },
        {
          "functionName": "GetHTTPPacketPostParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketPostParam(v1: bytes, v2: string) return (r0: string)"
        },
        {
          "functionName": "GetHTTPPacketHeadersFull(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketHeadersFull(v1: bytes) return (r0: map[string][]string)"
        },
        {
          "functionName": "GetHTTPPacketHeaders(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketHeaders(v1: bytes) return (r0: map[string]string)"
        },
        {
          "functionName": "GetHTTPPacketHeader(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketHeader(v1: bytes, v2: string) return (r0: string)"
        },
        {
          "functionName": "GetHTTPPacketFirstLine(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketFirstLine(v1: bytes) return (r0: string, r1: string, r2: string)"
        },
        {
          "functionName": "GetHTTPPacketCookiesFull(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketCookiesFull(v1: bytes) return (r0: map[string][]string)"
        },
        {
          "functionName": "GetHTTPPacketCookies(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketCookies(v1: bytes) return (r0: map[string]string)"
        },
        {
          "functionName": "GetHTTPPacketCookieValues(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketCookieValues(v1: bytes, v2: string) return (r0: []string)"
        },
        {
          "functionName": "GetHTTPPacketCookieFirst(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketCookieFirst(v1: bytes, v2: string) return (r0: string)"
        },
        {
          "functionName": "GetHTTPPacketCookie(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketCookie(v1: bytes, v2: string) return (r0: string)"
        },
        {
          "functionName": "GetHTTPPacketContentType(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketContentType(v1: bytes) return (r0: string)"
        },
        {
          "functionName": "GetHTTPPacketBody(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetHTTPPacketBody(v1: bytes) return (r0: bytes)"
        },
        {
          "functionName": "GetAllHTTPPacketQueryParams(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetAllHTTPPacketQueryParams(v1: bytes) return (r0: map[string]string)"
        },
        {
          "functionName": "GetAllHTTPPacketPostParams(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func poc.GetAllHTTPPacketPostParams(v1: bytes) return (r0: map[string]string)"
        },
        {
          "functionName": "Get(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.Get(v1: string, v2 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "FixHTTPResponse(${1:v1/*type: bytes*/})",
          "document": "修复可能有问题的 http response 数据包",
          "definitionStr": "FixHTTPResponse([]uint8) []uint8"
        },
        {
          "functionName": "FixHTTPRequest(${1:raw /*type: []byte*/})",
          "document": "修复可能有问题的 http request 数据包",
          "definitionStr": "FixHTTPRequest(raw []byte) []byte"
        },
        {
          "functionName": "FixHTTPPacketCRLF(${1:raw /*type: []byte*/}, ${2:noFixLength /*type: bool*/})",
          "document": "",
          "definitionStr": "FixHTTPPacketCRLF(raw []byte, noFixLength bool) []byte"
        },
        {
          "functionName": "Do(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.Do(v1: string, v2: string, v3 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "DeleteHTTPPacketQueryParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.DeleteHTTPPacketQueryParam(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "DeleteHTTPPacketPostParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.DeleteHTTPPacketPostParam(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "DeleteHTTPPacketHeader(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.DeleteHTTPPacketHeader(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "DeleteHTTPPacketForm(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.DeleteHTTPPacketForm(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "DeleteHTTPPacketCookie(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.DeleteHTTPPacketCookie(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "Delete(${1:v1/*type: string*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.Delete(v1: string, v2 ...yaklib.PocConfig) return (r0: *lowhttp.LowhttpResponse, r1: *http.Request, r2: error)"
        },
        {
          "functionName": "CurlToHTTPRequest(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.CurlToHTTPRequest(v1: string) return (r0: bytes)"
        },
        {
          "functionName": "BuildRequest(${1:v1/*type: any*/}, ${2:v2/*type ...yaklib.PocConfig*/})",
          "document": "",
          "definitionStr": "func poc.BuildRequest(v1: any, v2 ...yaklib.PocConfig) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketUploadFile(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/}, ${4:v4/*type: any*/}, ${5:v5/*type ...string*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketUploadFile(v1: bytes, v2: string, v3: string, v4: any, v5 ...string) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketQueryParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketQueryParam(v1: bytes, v2: string, v3: string) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketPostParam(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketPostParam(v1: bytes, v2: string, v3: string) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketPath(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketPath(v1: bytes, v2: string) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketHeader(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: any*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketHeader(v1: bytes, v2: string, v3: any) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketFormEncoded(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketFormEncoded(v1: bytes, v2: string, v3: string) return (r0: bytes)"
        },
        {
          "functionName": "AppendHTTPPacketCookie(${1:v1/*type: bytes*/}, ${2:v2/*type: string*/}, ${3:v3/*type: any*/})",
          "document": "",
          "definitionStr": "func poc.AppendHTTPPacketCookie(v1: bytes, v2: string, v3: any) return (r0: bytes)"
        }
      ]
    },
    {
      "libName": "ping",
      "prefix": "ping.",
      "functions": [
        {
          "functionName": "timeout(${1:seconds/*type: float64*/})",
          "document": "设置 ping 超时",
          "definitionStr": "timeout(float64) yaklib._pingConfigOpt"
        },
        {
          "functionName": "tcpPingPorts(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "tcpPingPorts(string) yaklib._pingConfigOpt"
        },
        {
          "functionName": "skip(${1:v1/*type: bool*/})",
          "document": "跳过存活检查，默认均为存活",
          "definitionStr": "skip(bool) yaklib._pingConfigOpt"
        },
        {
          "functionName": "scanCClass(${1:v1/*type: bool*/})",
          "document": "直接 ping 整个 C 段",
          "definitionStr": "scanCClass(bool) yaklib._pingConfigOpt"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "为 TCP Ping 增加代理",
          "definitionStr": "proxy(...string) yaklib._pingConfigOpt"
        },
        {
          "functionName": "onResult(${1:v1/*type: func (v1: *pingutil.PingResult) */})",
          "document": "",
          "definitionStr": "onResult(func(*pingutil.PingResult)) yaklib._pingConfigOpt"
        },
        {
          "functionName": "excludeHosts(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "excludeHosts(string) yaklib._pingConfigOpt"
        },
        {
          "functionName": "dnsTimeout(${1:v1/*type: float64*/})",
          "document": "设置 DNS 超时时间",
          "definitionStr": "dnsTimeout(float64) yaklib._pingConfigOpt"
        },
        {
          "functionName": "dnsServers(${1:v1/*type ...string*/})",
          "document": "设置 DNS 服务器",
          "definitionStr": "dnsServers(...string) yaklib._pingConfigOpt"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "设置 Ping 扫的并发",
          "definitionStr": "concurrent(int) yaklib._pingConfigOpt"
        },
        {
          "functionName": "Scan(${1:target /*type: string*/}, ${2:opts...})",
          "document": "ping 扫描",
          "definitionStr": "Scan(target string, opts ..._pingConfigOpt) chan *pingutil.PingResult"
        },
        {
          "functionName": "Ping(${1:target /*type: string*/}, ${2:opts...})",
          "document": "原生 ICMP ping",
          "definitionStr": "Ping(target string, opts ..._pingConfigOpt) *pingutil.PingResult"
        }
      ]
    },
    {
      "libName": "pcapx",
      "prefix": "pcapx.",
      "functions": [
        {
          "functionName": "udp_srcPort(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.udp_srcPort(v1: any) return (r0: func UDPOption(v1: *layers.UDP) return(error) )"
        },
        {
          "functionName": "udp_dstPort(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.udp_dstPort(v1: any) return (r0: func UDPOption(v1: *layers.UDP) return(error) )"
        },
        {
          "functionName": "tcp_window(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_window(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_urgent(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_urgent(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_srcPort(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_srcPort(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_seq(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_seq(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_optionWindowScale(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_optionWindowScale(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_optionTimestamp(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_optionTimestamp(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_optionSACKPermitted()",
          "document": "",
          "definitionStr": "func pcapx.tcp_optionSACKPermitted() return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_optionSACK(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_optionSACK(v1 ...any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_optionRaw(${1:v1/*type: any*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_optionRaw(v1: any, v2: bytes) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_optionMSS(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_optionMSS(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_flag(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_flag(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_dstPort(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_dstPort(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_dataOffset(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_dataOffset(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "tcp_ack(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.tcp_ack(v1: any) return (r0: func TCPOption(v1: *layers.TCP) return(error) )"
        },
        {
          "functionName": "ipv4_ttl(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_ttl(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_tos(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_tos(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_srcIp(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_srcIp(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_option(${1:v1/*type: any*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_option(v1: any, v2: bytes) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_nextLayerProtocol(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_nextLayerProtocol(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_id(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_id(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_fragment(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_fragment(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_flags(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_flags(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "ipv4_dstOp(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ipv4_dstOp(v1: any) return (r0: func IPv4Option(v1: *layers.IPv4) return(error) )"
        },
        {
          "functionName": "icmp_type(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.icmp_type(v1: any, v2: any) return (r0: func ICMPOption(v1: *layers.ICMPv4) return(error) )"
        },
        {
          "functionName": "icmp_seq(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.icmp_seq(v1: any) return (r0: func ICMPOption(v1: *layers.ICMPv4) return(error) )"
        },
        {
          "functionName": "icmp_payload(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "func pcapx.icmp_payload(v1: bytes) return (r0: func ICMPOption(v1: *layers.ICMPv4) return(error) )"
        },
        {
          "functionName": "icmp_id(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.icmp_id(v1: any) return (r0: func ICMPOption(v1: *layers.ICMPv4) return(error) )"
        },
        {
          "functionName": "ethernet_srcMac(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ethernet_srcMac(v1: any) return (r0: func EthernetOption(v1: *layers.Ethernet) return(error) )"
        },
        {
          "functionName": "ethernet_nextLayerType(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ethernet_nextLayerType(v1: any) return (r0: func EthernetOption(v1: *layers.Ethernet) return(error) )"
        },
        {
          "functionName": "ethernet_dstMac(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func pcapx.ethernet_dstMac(v1: any) return (r0: func EthernetOption(v1: *layers.Ethernet) return(error) )"
        },
        {
          "functionName": "arp_requestEx(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/})",
          "document": "",
          "definitionStr": "func pcapx.arp_requestEx(v1: string, v2: string, v3: string) return (r0: func ArpConfig(v1: *layers.ARP) return(error) )"
        },
        {
          "functionName": "arp_request(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func pcapx.arp_request(v1: string) return (r0: func ArpConfig(v1: *layers.ARP) return(error) )"
        },
        {
          "functionName": "arp_replyEx(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type: string*/}, ${4:v4/*type: string*/})",
          "document": "",
          "definitionStr": "func pcapx.arp_replyEx(v1: string, v2: string, v3: string, v4: string) return (r0: func ArpConfig(v1: *layers.ARP) return(error) )"
        },
        {
          "functionName": "arp_reply(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func pcapx.arp_reply(v1: string, v2: string) return (r0: func ArpConfig(v1: *layers.ARP) return(error) )"
        },
        {
          "functionName": "TCP_FLAG_URG",
          "document": "pcapx.TCP_FLAG_URG: int = 0x20",
          "definitionStr": "pcapx.TCP_FLAG_URG: int = 0x20"
        },
        {
          "functionName": "TCP_FLAG_SYN",
          "document": "pcapx.TCP_FLAG_SYN: int = 0x2",
          "definitionStr": "pcapx.TCP_FLAG_SYN: int = 0x2"
        },
        {
          "functionName": "TCP_FLAG_RST",
          "document": "pcapx.TCP_FLAG_RST: int = 0x4",
          "definitionStr": "pcapx.TCP_FLAG_RST: int = 0x4"
        },
        {
          "functionName": "TCP_FLAG_PSH",
          "document": "pcapx.TCP_FLAG_PSH: int = 0x8",
          "definitionStr": "pcapx.TCP_FLAG_PSH: int = 0x8"
        },
        {
          "functionName": "TCP_FLAG_NS",
          "document": "pcapx.TCP_FLAG_NS: int = 0x100",
          "definitionStr": "pcapx.TCP_FLAG_NS: int = 0x100"
        },
        {
          "functionName": "TCP_FLAG_FIN",
          "document": "pcapx.TCP_FLAG_FIN: int = 0x1",
          "definitionStr": "pcapx.TCP_FLAG_FIN: int = 0x1"
        },
        {
          "functionName": "TCP_FLAG_ECE",
          "document": "pcapx.TCP_FLAG_ECE: int = 0x40",
          "definitionStr": "pcapx.TCP_FLAG_ECE: int = 0x40"
        },
        {
          "functionName": "TCP_FLAG_CWR",
          "document": "pcapx.TCP_FLAG_CWR: int = 0x80",
          "definitionStr": "pcapx.TCP_FLAG_CWR: int = 0x80"
        },
        {
          "functionName": "TCP_FLAG_ACK",
          "document": "pcapx.TCP_FLAG_ACK: int = 0x10",
          "definitionStr": "pcapx.TCP_FLAG_ACK: int = 0x10"
        },
        {
          "functionName": "InjectTCP(${1:v1/*type: bytes*/}, ${2:v2/*type ...pcapx.ConfigOption*/})",
          "document": "",
          "definitionStr": "`func pcapx.InjectTCP(v1: bytes, v2 ...pcapx.ConfigOption)`"
        },
        {
          "functionName": "InjectRaw(${1:v1/*type: bytes*/}, ${2:v2/*type ...pcapx.ConfigOption*/})",
          "document": "",
          "definitionStr": "`func pcapx.InjectRaw(v1: bytes, v2 ...pcapx.ConfigOption)`"
        },
        {
          "functionName": "InjectIP(${1:v1/*type: bytes*/}, ${2:v2/*type ...pcapx.ConfigOption*/})",
          "document": "",
          "definitionStr": "`func pcapx.InjectIP(v1: bytes, v2 ...pcapx.ConfigOption)`"
        },
        {
          "functionName": "InjectHTTPRequest(${1:v1/*type: bytes*/}, ${2:v2/*type ...pcapx.ConfigOption*/})",
          "document": "",
          "definitionStr": "`func pcapx.InjectHTTPRequest(v1: bytes, v2 ...pcapx.ConfigOption)`"
        },
        {
          "functionName": "InjectChaosTraffic(${1:v1/*type: *pcapx.ChaosTraffic*/}, ${2:v2/*type ...pcapx.ConfigOption*/})",
          "document": "",
          "definitionStr": "`func pcapx.InjectChaosTraffic(v1: *pcapx.ChaosTraffic, v2 ...pcapx.ConfigOption)`"
        },
        {
          "functionName": "IPV4_PROTOCOL_VRRP",
          "document": "pcapx.IPV4_PROTOCOL_VRRP: int = 0x70",
          "definitionStr": "pcapx.IPV4_PROTOCOL_VRRP: int = 0x70"
        },
        {
          "functionName": "IPV4_PROTOCOL_UDPLITE",
          "document": "pcapx.IPV4_PROTOCOL_UDPLITE: int = 0x88",
          "definitionStr": "pcapx.IPV4_PROTOCOL_UDPLITE: int = 0x88"
        },
        {
          "functionName": "IPV4_PROTOCOL_UDP",
          "document": "pcapx.IPV4_PROTOCOL_UDP: int = 0x11",
          "definitionStr": "pcapx.IPV4_PROTOCOL_UDP: int = 0x11"
        },
        {
          "functionName": "IPV4_PROTOCOL_TCP",
          "document": "pcapx.IPV4_PROTOCOL_TCP: int = 0x6",
          "definitionStr": "pcapx.IPV4_PROTOCOL_TCP: int = 0x6"
        },
        {
          "functionName": "IPV4_PROTOCOL_SCTP",
          "document": "pcapx.IPV4_PROTOCOL_SCTP: int = 0x84",
          "definitionStr": "pcapx.IPV4_PROTOCOL_SCTP: int = 0x84"
        },
        {
          "functionName": "IPV4_PROTOCOL_OSPF",
          "document": "pcapx.IPV4_PROTOCOL_OSPF: int = 0x59",
          "definitionStr": "pcapx.IPV4_PROTOCOL_OSPF: int = 0x59"
        },
        {
          "functionName": "IPV4_PROTOCOL_MPLSINIP",
          "document": "pcapx.IPV4_PROTOCOL_MPLSINIP: int = 0x89",
          "definitionStr": "pcapx.IPV4_PROTOCOL_MPLSINIP: int = 0x89"
        },
        {
          "functionName": "IPV4_PROTOCOL_IPIP",
          "document": "pcapx.IPV4_PROTOCOL_IPIP: int = 0x5e",
          "definitionStr": "pcapx.IPV4_PROTOCOL_IPIP: int = 0x5e"
        },
        {
          "functionName": "IPV4_PROTOCOL_IGMP",
          "document": "pcapx.IPV4_PROTOCOL_IGMP: int = 0x2",
          "definitionStr": "pcapx.IPV4_PROTOCOL_IGMP: int = 0x2"
        },
        {
          "functionName": "IPV4_PROTOCOL_ICMP",
          "document": "pcapx.IPV4_PROTOCOL_ICMP: int = 0x1",
          "definitionStr": "pcapx.IPV4_PROTOCOL_ICMP: int = 0x1"
        },
        {
          "functionName": "IPV4_PROTOCOL_GRE",
          "document": "pcapx.IPV4_PROTOCOL_GRE: int = 0x2f",
          "definitionStr": "pcapx.IPV4_PROTOCOL_GRE: int = 0x2f"
        },
        {
          "functionName": "IPV4_PROTOCOL_ETHERIP",
          "document": "pcapx.IPV4_PROTOCOL_ETHERIP: int = 0x61",
          "definitionStr": "pcapx.IPV4_PROTOCOL_ETHERIP: int = 0x61"
        },
        {
          "functionName": "IPV4_PROTOCOL_ESP",
          "document": "pcapx.IPV4_PROTOCOL_ESP: int = 0x32",
          "definitionStr": "pcapx.IPV4_PROTOCOL_ESP: int = 0x32"
        },
        {
          "functionName": "IPV4_PROTOCOL_AH",
          "document": "pcapx.IPV4_PROTOCOL_AH: int = 0x33",
          "definitionStr": "pcapx.IPV4_PROTOCOL_AH: int = 0x33"
        },
        {
          "functionName": "IPV4_FLAG_MORE_FRAGMENT",
          "document": "pcapx.IPV4_FLAG_MORE_FRAGMENT: int = 0x1",
          "definitionStr": "pcapx.IPV4_FLAG_MORE_FRAGMENT: int = 0x1"
        },
        {
          "functionName": "IPV4_FLAG_EVIL_BIT",
          "document": "pcapx.IPV4_FLAG_EVIL_BIT: int = 0x4",
          "definitionStr": "pcapx.IPV4_FLAG_EVIL_BIT: int = 0x4"
        },
        {
          "functionName": "IPV4_FLAG_DONT_FRAGMENT",
          "document": "pcapx.IPV4_FLAG_DONT_FRAGMENT: int = 0x2",
          "definitionStr": "pcapx.IPV4_FLAG_DONT_FRAGMENT: int = 0x2"
        },
        {
          "functionName": "ICMP_TYPE_TIME_EXCEEDED",
          "document": "pcapx.ICMP_TYPE_TIME_EXCEEDED: int = 0xb",
          "definitionStr": "pcapx.ICMP_TYPE_TIME_EXCEEDED: int = 0xb"
        },
        {
          "functionName": "ICMP_TYPE_TIMESTAMP_REPLY",
          "document": "pcapx.ICMP_TYPE_TIMESTAMP_REPLY: int = 0xe",
          "definitionStr": "pcapx.ICMP_TYPE_TIMESTAMP_REPLY: int = 0xe"
        },
        {
          "functionName": "ICMP_TYPE_TIMESTAMP",
          "document": "pcapx.ICMP_TYPE_TIMESTAMP: int = 0xd",
          "definitionStr": "pcapx.ICMP_TYPE_TIMESTAMP: int = 0xd"
        },
        {
          "functionName": "ICMP_TYPE_SRC_QUENCH",
          "document": "pcapx.ICMP_TYPE_SRC_QUENCH: int = 0x4",
          "definitionStr": "pcapx.ICMP_TYPE_SRC_QUENCH: int = 0x4"
        },
        {
          "functionName": "ICMP_TYPE_ROUTER_SOLICITATION",
          "document": "pcapx.ICMP_TYPE_ROUTER_SOLICITATION: int = 0xa",
          "definitionStr": "pcapx.ICMP_TYPE_ROUTER_SOLICITATION: int = 0xa"
        },
        {
          "functionName": "ICMP_TYPE_ROUTER_ADVERTISEMENT",
          "document": "pcapx.ICMP_TYPE_ROUTER_ADVERTISEMENT: int = 0x9",
          "definitionStr": "pcapx.ICMP_TYPE_ROUTER_ADVERTISEMENT: int = 0x9"
        },
        {
          "functionName": "ICMP_TYPE_REDIRECT",
          "document": "pcapx.ICMP_TYPE_REDIRECT: int = 0x5",
          "definitionStr": "pcapx.ICMP_TYPE_REDIRECT: int = 0x5"
        },
        {
          "functionName": "ICMP_TYPE_PARAM_PROBLEM",
          "document": "pcapx.ICMP_TYPE_PARAM_PROBLEM: int = 0xc",
          "definitionStr": "pcapx.ICMP_TYPE_PARAM_PROBLEM: int = 0xc"
        },
        {
          "functionName": "ICMP_TYPE_INFO_REQUEST",
          "document": "pcapx.ICMP_TYPE_INFO_REQUEST: int = 0xf",
          "definitionStr": "pcapx.ICMP_TYPE_INFO_REQUEST: int = 0xf"
        },
        {
          "functionName": "ICMP_TYPE_INFO_REPLY",
          "document": "pcapx.ICMP_TYPE_INFO_REPLY: int = 0x10",
          "definitionStr": "pcapx.ICMP_TYPE_INFO_REPLY: int = 0x10"
        },
        {
          "functionName": "ICMP_TYPE_ECHO_REQUEST",
          "document": "pcapx.ICMP_TYPE_ECHO_REQUEST: int = 0x8",
          "definitionStr": "pcapx.ICMP_TYPE_ECHO_REQUEST: int = 0x8"
        },
        {
          "functionName": "ICMP_TYPE_ECHO_REPLY",
          "document": "pcapx.ICMP_TYPE_ECHO_REPLY: int = 0x0",
          "definitionStr": "pcapx.ICMP_TYPE_ECHO_REPLY: int = 0x0"
        },
        {
          "functionName": "ICMP_TYPE_DEST_UNREACH",
          "document": "pcapx.ICMP_TYPE_DEST_UNREACH: int = 0x3",
          "definitionStr": "pcapx.ICMP_TYPE_DEST_UNREACH: int = 0x3"
        },
        {
          "functionName": "ICMP_TYPE_ADDRESS_MASK_REQUEST",
          "document": "pcapx.ICMP_TYPE_ADDRESS_MASK_REQUEST: int = 0x11",
          "definitionStr": "pcapx.ICMP_TYPE_ADDRESS_MASK_REQUEST: int = 0x11"
        },
        {
          "functionName": "ICMP_TYPE_ADDRESS_MASK_REPLY",
          "document": "pcapx.ICMP_TYPE_ADDRESS_MASK_REPLY: int = 0x12",
          "definitionStr": "pcapx.ICMP_TYPE_ADDRESS_MASK_REPLY: int = 0x12"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_SRC_ROUTE_FAIL",
          "document": "pcapx.ICMP_CODE_UNREACH_SRC_ROUTE_FAIL: int = 0x5",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_SRC_ROUTE_FAIL: int = 0x5"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_SRC_ISOLATED",
          "document": "pcapx.ICMP_CODE_UNREACH_SRC_ISOLATED: int = 0x8",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_SRC_ISOLATED: int = 0x8"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_PROTOCOL",
          "document": "pcapx.ICMP_CODE_UNREACH_PROTOCOL: int = 0x2",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_PROTOCOL: int = 0x2"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_PRECEDENCE_CUTOFF",
          "document": "pcapx.ICMP_CODE_UNREACH_PRECEDENCE_CUTOFF: int = 0xf",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_PRECEDENCE_CUTOFF: int = 0xf"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_PORT",
          "document": "pcapx.ICMP_CODE_UNREACH_PORT: int = 0x3",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_PORT: int = 0x3"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_NET_UNKNOWN",
          "document": "pcapx.ICMP_CODE_UNREACH_NET_UNKNOWN: int = 0x6",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_NET_UNKNOWN: int = 0x6"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_NET_TOS",
          "document": "pcapx.ICMP_CODE_UNREACH_NET_TOS: int = 0xb",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_NET_TOS: int = 0xb"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_NET_ADMIN",
          "document": "pcapx.ICMP_CODE_UNREACH_NET_ADMIN: int = 0x9",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_NET_ADMIN: int = 0x9"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_NET",
          "document": "pcapx.ICMP_CODE_UNREACH_NET: int = 0x0",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_NET: int = 0x0"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_HOST_UNKNOWN",
          "document": "pcapx.ICMP_CODE_UNREACH_HOST_UNKNOWN: int = 0x7",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_HOST_UNKNOWN: int = 0x7"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_HOST_TOS",
          "document": "pcapx.ICMP_CODE_UNREACH_HOST_TOS: int = 0xc",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_HOST_TOS: int = 0xc"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_HOST_PRECEDENCE",
          "document": "pcapx.ICMP_CODE_UNREACH_HOST_PRECEDENCE: int = 0xe",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_HOST_PRECEDENCE: int = 0xe"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_HOST_ADMIN",
          "document": "pcapx.ICMP_CODE_UNREACH_HOST_ADMIN: int = 0xa",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_HOST_ADMIN: int = 0xa"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_HOST",
          "document": "pcapx.ICMP_CODE_UNREACH_HOST: int = 0x1",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_HOST: int = 0x1"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_FRAGMENTATION_NEEDED",
          "document": "pcapx.ICMP_CODE_UNREACH_FRAGMENTATION_NEEDED: int = 0x4",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_FRAGMENTATION_NEEDED: int = 0x4"
        },
        {
          "functionName": "ICMP_CODE_UNREACH_COMM_ADMIN",
          "document": "pcapx.ICMP_CODE_UNREACH_COMM_ADMIN: int = 0xd",
          "definitionStr": "pcapx.ICMP_CODE_UNREACH_COMM_ADMIN: int = 0xd"
        },
        {
          "functionName": "ICMP_CODE_TIME_EXCEEDED_TTL",
          "document": "pcapx.ICMP_CODE_TIME_EXCEEDED_TTL: int = 0x0",
          "definitionStr": "pcapx.ICMP_CODE_TIME_EXCEEDED_TTL: int = 0x0"
        },
        {
          "functionName": "ICMP_CODE_TIME_EXCEEDED_FRAG_REASS",
          "document": "pcapx.ICMP_CODE_TIME_EXCEEDED_FRAG_REASS: int = 0x1",
          "definitionStr": "pcapx.ICMP_CODE_TIME_EXCEEDED_FRAG_REASS: int = 0x1"
        },
        {
          "functionName": "ICMP_CODE_REDIRECT_TOS_NET",
          "document": "pcapx.ICMP_CODE_REDIRECT_TOS_NET: int = 0xb",
          "definitionStr": "pcapx.ICMP_CODE_REDIRECT_TOS_NET: int = 0xb"
        },
        {
          "functionName": "ICMP_CODE_REDIRECT_TOS_HOST",
          "document": "pcapx.ICMP_CODE_REDIRECT_TOS_HOST: int = 0xc",
          "definitionStr": "pcapx.ICMP_CODE_REDIRECT_TOS_HOST: int = 0xc"
        },
        {
          "functionName": "ICMP_CODE_REDIRECT_NET",
          "document": "pcapx.ICMP_CODE_REDIRECT_NET: int = 0x0",
          "definitionStr": "pcapx.ICMP_CODE_REDIRECT_NET: int = 0x0"
        },
        {
          "functionName": "ICMP_CODE_REDIRECT_HOST",
          "document": "pcapx.ICMP_CODE_REDIRECT_HOST: int = 0x1",
          "definitionStr": "pcapx.ICMP_CODE_REDIRECT_HOST: int = 0x1"
        },
        {
          "functionName": "ICMP_CODE_PARAM_PROBLEM_POINTER_INDICATES_ERROR",
          "document": "pcapx.ICMP_CODE_PARAM_PROBLEM_POINTER_INDICATES_ERROR: int = 0x0",
          "definitionStr": "pcapx.ICMP_CODE_PARAM_PROBLEM_POINTER_INDICATES_ERROR: int = 0x0"
        },
        {
          "functionName": "ICMP_CODE_PARAM_PROBLEM_MISSING_OPTION",
          "document": "pcapx.ICMP_CODE_PARAM_PROBLEM_MISSING_OPTION: int = 0x1",
          "definitionStr": "pcapx.ICMP_CODE_PARAM_PROBLEM_MISSING_OPTION: int = 0x1"
        },
        {
          "functionName": "ICMP_CODE_PARAM_PROBLEM_BAD_LENGTH",
          "document": "pcapx.ICMP_CODE_PARAM_PROBLEM_BAD_LENGTH: int = 0x2",
          "definitionStr": "pcapx.ICMP_CODE_PARAM_PROBLEM_BAD_LENGTH: int = 0x2"
        },
        {
          "functionName": "GetStatistics()",
          "document": "",
          "definitionStr": "func pcapx.GetStatistics() return (r0: *pcapx.Statistics)"
        }
      ]
    },
    {
      "libName": "os",
      "prefix": "os.",
      "functions": [
        {
          "functionName": "WaitConnect(${1:v1/*type: string*/}, ${2:v2/*type: float64*/})",
          "document": "",
          "definitionStr": "func os.WaitConnect(v1: string, v2: float64) return (r0: error)"
        },
        {
          "functionName": "Unsetenv(${1:key /*type: string*/})",
          "document": "清除环境变量",
          "definitionStr": "Unsetenv(key string) error  doc:Unsetenv unsets a single environment variable."
        },
        {
          "functionName": "TempDir()",
          "document": "",
          "definitionStr": "TempDir() string  doc:TempDir returns the default directory to use for temporary files.On Unix systems, it returns $TMPDIR if non-empty, else /tmp.On Windows, it uses GetTempPath, returning the first non-emptyvalue from %TMP%, %TEMP%, %USERPROFILE%, or the Windows directory.On Plan 9, it returns /tmp.The directory is neither guaranteed to exist nor have accessiblepermissions."
        },
        {
          "functionName": "Stdout",
          "document": "os.Stdout: *os.File",
          "definitionStr": "os.Stdout: *os.File"
        },
        {
          "functionName": "Stdin",
          "document": "os.Stdin: *os.File",
          "definitionStr": "os.Stdin: *os.File"
        },
        {
          "functionName": "Stderr",
          "document": "os.Stderr: *os.File",
          "definitionStr": "os.Stderr: *os.File"
        },
        {
          "functionName": "Setenv(${1:keyvalue /*type: string*/})",
          "document": "设置环境变量",
          "definitionStr": "Setenv(key, value string) error  doc:Setenv sets the value of the environment variable named by the key.It returns an error, if any."
        },
        {
          "functionName": "Rename(${1:oldpathnewpath /*type: string*/})",
          "document": "重命名一个文件：同 Golang `os.Rename`",
          "definitionStr": "Rename(oldpath, newpath string) error  doc:Rename renames (moves) oldpath to newpath.If newpath already exists and is not a directory, Rename replaces it.OS-specific restrictions may apply when oldpath and newpath are in different directories.If there is an error, it will be of type *LinkError."
        },
        {
          "functionName": "RemoveAll(${1:path /*type: string*/})",
          "document": "移除一个文件（强制）",
          "definitionStr": "RemoveAll(path string) error  doc:RemoveAll removes path and any children it contains.It removes everything it can but returns the first errorit encounters. If the path does not exist, RemoveAllreturns nil (no error).If there is an error, it will be of type *PathError."
        },
        {
          "functionName": "Remove(${1:name /*type: string*/})",
          "document": "移除一个文件",
          "definitionStr": "Remove(name string) error  doc:Remove removes the named file or (empty) directory.If there is an error, it will be of type *PathError."
        },
        {
          "functionName": "Pipe()",
          "document": "返回文件管道，两个结果互通，均可互相读写",
          "definitionStr": "Pipe() (r *File, w *File, err error)  doc:Pipe returns a connected pair of Files; reads from r return bytes written to w.It returns the files and an error, if any."
        },
        {
          "functionName": "OS",
          "document": "os.OS: string",
          "definitionStr": "os.OS: string"
        },
        {
          "functionName": "LookupIP(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func os.LookupIP(v1: string) return (r0: []string)"
        },
        {
          "functionName": "LookupHost(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func os.LookupHost(v1: string) return (r0: []string)"
        },
        {
          "functionName": "LookupEnv(${1:key /*type: string*/})",
          "document": "判断这个环境变量是否存在，如果存在，返回环境变量的值，不存在设置 ok 为 false",
          "definitionStr": "LookupEnv(key string) (string, bool)  doc:LookupEnv retrieves the value of the environment variable namedby the key. If the variable is present in the environment thevalue (which may be empty) is returned and the boolean is true.Otherwise the returned value will be empty and the boolean willbe false."
        },
        {
          "functionName": "IsUDPPortOpen(${1:port/*type: int*/})",
          "document": "判断一个本地 UDP 端口是否开放",
          "definitionStr": "IsUDPPortOpen(int) bool"
        },
        {
          "functionName": "IsUDPPortAvailable(${1:p /*type: int*/})",
          "document": "判断一个本地 UDP 端口是否可用",
          "definitionStr": "IsUDPPortAvailable(p int) bool"
        },
        {
          "functionName": "IsTCPPortOpen(${1:port/*type: int*/})",
          "document": "判断一个本地端口是否开放",
          "definitionStr": "IsTCPPortOpen(int) bool"
        },
        {
          "functionName": "IsTCPPortAvailable(${1:p /*type: int*/})",
          "document": "判断一个本地 TCP 端口是否可用（监听可用）",
          "definitionStr": "IsTCPPortAvailable(p int) bool"
        },
        {
          "functionName": "IsRemoteTCPPortOpen(${1:host/*type: string*/}, ${2:port/*type: int*/})",
          "document": "判断一个远程 TCP 端口是否开放",
          "definitionStr": "IsRemoteTCPPortOpen(string, int) bool"
        },
        {
          "functionName": "IsPrivileged",
          "document": "os.IsPrivileged: bool",
          "definitionStr": "os.IsPrivileged: bool"
        },
        {
          "functionName": "Hostname()",
          "document": "",
          "definitionStr": "Hostname() (name string, err error)  doc:Hostname returns the host name reported by the kernel."
        },
        {
          "functionName": "Getwd()",
          "document": "",
          "definitionStr": "Getwd() (dir string, err error)  doc:Getwd returns a rooted path name corresponding to thecurrent directory. If the current directory can bereached via multiple paths (due to symbolic links),Getwd may return any one of them."
        },
        {
          "functionName": "Getuid()",
          "document": "",
          "definitionStr": "Getuid() int  doc:Getuid returns the numeric user id of the caller.On Windows, it returns -1."
        },
        {
          "functionName": "Getppid()",
          "document": "",
          "definitionStr": "Getppid() int  doc:Getppid returns the process id of the caller's parent."
        },
        {
          "functionName": "Getpid()",
          "document": "",
          "definitionStr": "Getpid() int  doc:Getpid returns the process id of the caller."
        },
        {
          "functionName": "Getgid()",
          "document": "",
          "definitionStr": "Getgid() int  doc:Getgid returns the numeric group id of the caller.On Windows, it returns -1."
        },
        {
          "functionName": "Geteuid()",
          "document": "",
          "definitionStr": "Geteuid() int  doc:Geteuid returns the numeric effective user id of the caller.On Windows, it returns -1."
        },
        {
          "functionName": "Getenv(${1:key /*type: string*/})",
          "document": "获得一个环境变量的值",
          "definitionStr": "Getenv(key string) string  doc:Getenv retrieves the value of the environment variable named by the key.It returns the value, which will be empty if the variable is not present.To distinguish between an empty value and an unset value, use LookupEnv."
        },
        {
          "functionName": "Getegid()",
          "document": "",
          "definitionStr": "Getegid() int  doc:Getegid returns the numeric effective group id of the caller.On Windows, it returns -1."
        },
        {
          "functionName": "GetRandomAvailableUDPPort()",
          "document": "随机获得一个可用的 UDP 端口",
          "definitionStr": "GetRandomAvailableUDPPort() int"
        },
        {
          "functionName": "GetRandomAvailableTCPPort()",
          "document": "随机获得一个可用的 TCP 端口",
          "definitionStr": "GetRandomAvailableTCPPort() int"
        },
        {
          "functionName": "GetMachineID()",
          "document": "",
          "definitionStr": "GetMachineID() string"
        },
        {
          "functionName": "GetDefaultDNSServers()",
          "document": "",
          "definitionStr": "GetDefaultDNSServers() []string"
        },
        {
          "functionName": "ExpandEnv(${1:s /*type: string*/})",
          "document": "同 Golang 的 `os.ExpandEnv`：根据当前环境变量的值来替换字符串中的${var}或者$var",
          "definitionStr": "ExpandEnv(s string) string  doc:ExpandEnv replaces ${var} or $var in the string according to the valuesof the current environment variables. References to undefinedvariables are replaced by the empty string."
        },
        {
          "functionName": "Exit(${1:code /*type: int*/})",
          "document": "退出主程序，手动结束当前进程",
          "definitionStr": "Exit(code int)  doc:Exit causes the current program to exit with the given status code.Conventionally, code zero indicates success, non-zero an error.The program terminates immediately; deferred functions are not run.For portability, the status code should be in the range [0, 125]."
        },
        {
          "functionName": "Executable()",
          "document": "获取当前正在执行的二进制程序的路径",
          "definitionStr": "Executable() (string, error)  doc:Executable returns the path name for the executable that startedthe current process. There is no guarantee that the path is stillpointing to the correct executable. If a symlink was used to startthe process, depending on the operating system, the result mightbe the symlink or the path it pointed to. If a stable result isneeded, path/filepath.EvalSymlinks might help.Executable returns an absolute path unless an error occurred.The main use case is finding resources located relative to anexecutable."
        },
        {
          "functionName": "Environ()",
          "document": "获取当前所有的环境变量内容",
          "definitionStr": "Environ() []string  doc:Environ returns a copy of strings representing the environment,in the form \"key=value\"."
        },
        {
          "functionName": "Clearenv()",
          "document": "清除环境变量，与原生 Golang `go.Clearenv` 相同",
          "definitionStr": "Clearenv()  doc:Clearenv deletes all environment variables."
        },
        {
          "functionName": "Chown(${1:name /*type: string*/}, ${2:uidgid /*type: int*/})",
          "document": "",
          "definitionStr": "Chown(name string, uid, gid int) error  doc:Chown changes the numeric uid and gid of the named file.If the file is a symbolic link, it changes the uid and gid of the link's target.A uid or gid of -1 means to not change that value.If there is an error, it will be of type *PathError.On Windows or Plan 9, Chown always returns the syscall.EWINDOWS orEPLAN9 error, wrapped in *PathError."
        },
        {
          "functionName": "Chmod(${1:name /*type: string*/}, ${2:mode /*type: FileMode*/})",
          "document": "",
          "definitionStr": "Chmod(name string, mode FileMode) error  doc:Chmod changes the mode of the named file to mode.If the file is a symbolic link, it changes the mode of the link's target.If there is an error, it will be of type *PathError.A different subset of the mode bits are used, depending on theoperating system.On Unix, the mode's permission bits, ModeSetuid, ModeSetgid, andModeSticky are used.On Windows, only the 0200 bit (owner writable) of mode is used; itcontrols whether the file's read-only attribute is set or cleared.The other bits are currently unused. For compatibility with Go 1.12and earlier, use a non-zero mode. Use mode 0400 for a read-onlyfile and 0600 for a readable+writable file.On Plan 9, the mode's permission bits, ModeAppend, ModeExclusive,and ModeTemporary are used."
        },
        {
          "functionName": "Chdir(${1:dir /*type: string*/})",
          "document": "",
          "definitionStr": "Chdir(dir string) error  doc:Chdir changes the current working directory to the named directory.If there is an error, it will be of type *PathError."
        },
        {
          "functionName": "Args",
          "document": "os.Args: []string",
          "definitionStr": "os.Args: []string"
        },
        {
          "functionName": "ARCH",
          "document": "os.ARCH: string",
          "definitionStr": "os.ARCH: string"
        }
      ]
    },
    {
      "libName": "openai",
      "prefix": "openai.",
      "functions": [
        {
          "functionName": "yakDomain()",
          "document": "",
          "definitionStr": "func openai.yakDomain() return (r0: func ConfigOption(v1: *openai.Client) )"
        },
        {
          "functionName": "proxy(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func openai.proxy(v1: string) return (r0: func ConfigOption(v1: *openai.Client) )"
        },
        {
          "functionName": "model(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func openai.model(v1: string) return (r0: func ConfigOption(v1: *openai.Client) )"
        },
        {
          "functionName": "localAPIKey()",
          "document": "",
          "definitionStr": "func openai.localAPIKey() return (r0: func ConfigOption(v1: *openai.Client) )"
        },
        {
          "functionName": "domain(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func openai.domain(v1: string) return (r0: func ConfigOption(v1: *openai.Client) )"
        },
        {
          "functionName": "apiKey(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func openai.apiKey(v1: string) return (r0: func ConfigOption(v1: *openai.Client) )"
        },
        {
          "functionName": "TranslateToChinese(${1:v1/*type: string*/}, ${2:v2/*type ...openai.ConfigOption*/})",
          "document": "",
          "definitionStr": "func openai.TranslateToChinese(v1: string, v2 ...openai.ConfigOption) return (r0: string)"
        },
        {
          "functionName": "Chat(${1:v1/*type: string*/}, ${2:v2/*type ...openai.ConfigOption*/})",
          "document": "",
          "definitionStr": "func openai.Chat(v1: string, v2 ...openai.ConfigOption) return (r0: string)"
        }
      ]
    },
    {
      "libName": "nuclei",
      "prefix": "nuclei.",
      "functions": [
        {
          "functionName": "workflows(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "workflows(...string) tools.nucleiOpt"
        },
        {
          "functionName": "version(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "version(bool) tools.nucleiOpt"
        },
        {
          "functionName": "verbose(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "verbose(bool) tools.nucleiOpt"
        },
        {
          "functionName": "updateTemplates(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "updateTemplates(bool) tools.nucleiOpt"
        },
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "timeout(int) tools.nucleiOpt"
        },
        {
          "functionName": "templatesVersion(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "templatesVersion(bool) tools.nucleiOpt"
        },
        {
          "functionName": "templatesThreads(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "templatesThreads(int) tools.nucleiOpt"
        },
        {
          "functionName": "templatesDir(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "templatesDir(string) tools.nucleiOpt"
        },
        {
          "functionName": "templates(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "templates(...string) tools.nucleiOpt"
        },
        {
          "functionName": "templateList(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "templateList(bool) tools.nucleiOpt"
        },
        {
          "functionName": "tcpResultCallback(${1:v1/*type: func (v1: map[string]any) */})",
          "document": "",
          "definitionStr": "func nuclei.tcpResultCallback(v1: func (v1: map[string]any) ) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "targetConcurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func nuclei.targetConcurrent(v1: int) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "tags(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "tags(...string) tools.nucleiOpt"
        },
        {
          "functionName": "systemDnsResolver(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "systemDnsResolver(bool) tools.nucleiOpt"
        },
        {
          "functionName": "stopAtFirstMatch(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "stopAtFirstMatch(bool) tools.nucleiOpt"
        },
        {
          "functionName": "silent(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "silent(bool) tools.nucleiOpt"
        },
        {
          "functionName": "showBrowser(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "showBrowser(bool) tools.nucleiOpt"
        },
        {
          "functionName": "severity(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "severity(...string) tools.nucleiOpt"
        },
        {
          "functionName": "runtimeId(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.runtimeId(v1: string) return (r0: func LowhttpOpt(v1: *lowhttp.LowhttpExecConfig) )"
        },
        {
          "functionName": "reverseUrl(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "reverseUrl(string) tools.nucleiOpt"
        },
        {
          "functionName": "retry(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "retry(int) tools.nucleiOpt"
        },
        {
          "functionName": "resultCallback(${1:v1/*type: func (v1: map[string]any) */})",
          "document": "",
          "definitionStr": "func nuclei.resultCallback(v1: func (v1: map[string]any) ) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "reportingDB(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "reportingDB(string) tools.nucleiOpt"
        },
        {
          "functionName": "reportingConfig(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "reportingConfig(string) tools.nucleiOpt"
        },
        {
          "functionName": "rawTemplate(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.rawTemplate(v1: string) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "rateLimit(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "rateLimit(int) tools.nucleiOpt"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "proxy(...string) tools.nucleiOpt"
        },
        {
          "functionName": "pageTimeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "pageTimeout(int) tools.nucleiOpt"
        },
        {
          "functionName": "output(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "output(string) tools.nucleiOpt"
        },
        {
          "functionName": "noMeta(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "noMeta(bool) tools.nucleiOpt"
        },
        {
          "functionName": "noInteractsh(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "noInteractsh(bool) tools.nucleiOpt"
        },
        {
          "functionName": "noColor(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "noColor(bool) tools.nucleiOpt"
        },
        {
          "functionName": "newTemplates(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "newTemplates(bool) tools.nucleiOpt"
        },
        {
          "functionName": "mode(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.mode(v1: string) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "metrics(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "metrics(bool) tools.nucleiOpt"
        },
        {
          "functionName": "logFile(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "logFile(string) tools.nucleiOpt"
        },
        {
          "functionName": "interactshTimeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "func nuclei.interactshTimeout(v1: float64) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "https(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.https(v1: bool) return (r0: func LowhttpOpt(v1: *lowhttp.LowhttpExecConfig) )"
        },
        {
          "functionName": "http2(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.http2(v1: bool) return (r0: func LowhttpOpt(v1: *lowhttp.LowhttpExecConfig) )"
        },
        {
          "functionName": "headless(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "headless(bool) tools.nucleiOpt"
        },
        {
          "functionName": "headers(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "headers(...string) tools.nucleiOpt"
        },
        {
          "functionName": "fuzzQueryTemplate(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nuclei.fuzzQueryTemplate(v1 ...string) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "fromPlugin(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nuclei.fromPlugin(v1: string) return (r0: func LowhttpOpt(v1: *lowhttp.LowhttpExecConfig) )"
        },
        {
          "functionName": "excludeTemplates(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "excludeTemplates(...string) tools.nucleiOpt"
        },
        {
          "functionName": "excludeTags(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "excludeTags(...string) tools.nucleiOpt"
        },
        {
          "functionName": "enableReverseConnection(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func nuclei.enableReverseConnection(v1: bool) return (r0: func ConfigOption(v1: *httptpl.Config) )"
        },
        {
          "functionName": "dnsResolver(${1:v1/*type: []string*/})",
          "document": "",
          "definitionStr": "dnsResolver(...string) tools.nucleiOpt"
        },
        {
          "functionName": "debugResponse(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "debugResponse(bool) tools.nucleiOpt"
        },
        {
          "functionName": "debugRequest(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "debugRequest(bool) tools.nucleiOpt"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "debug(bool) tools.nucleiOpt"
        },
        {
          "functionName": "bulkSize(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "bulkSize(int) tools.nucleiOpt"
        },
        {
          "functionName": "UpdateDatabase(${1:nucleiDir...})",
          "document": "",
          "definitionStr": "UpdateDatabase(nucleiDir ...string) error"
        },
        {
          "functionName": "ScanAuto(${1:v1/*type: any*/}, ${2:v2/*type ...any*/})",
          "document": "",
          "definitionStr": "`func nuclei.ScanAuto(v1: any, v2 ...any)`"
        },
        {
          "functionName": "Scan(${1:v1/*type: any*/}, ${2:v2/*type ...any*/})",
          "document": "",
          "definitionStr": "Scan(string, ...tools.nucleiOpt) (chan *tools.PocVul, error)"
        },
        {
          "functionName": "RemoveDatabase()",
          "document": "移除 nuclei 数据库",
          "definitionStr": "RemoveDatabase() error"
        },
        {
          "functionName": "PullDatabase(${1:giturl /*type: string*/}, ${2:proxy...})",
          "document": "拉去数据库",
          "definitionStr": "PullDatabase(giturl string, proxy ...string) (string, error)"
        },
        {
          "functionName": "PocVulToRisk(${1:p /*type: *PocVul*/})",
          "document": "",
          "definitionStr": "PocVulToRisk(p *PocVul) *yakit.Risk"
        },
        {
          "functionName": "GetPoCDir()",
          "document": "",
          "definitionStr": "GetPoCDir() string"
        },
        {
          "functionName": "AllPoC(${1:v1/*type ...string*/})",
          "document": "获取当前所有 PoC 对象",
          "definitionStr": "AllPoC(...string) ([]*tools.templateDesc, error)"
        }
      ]
    },
    {
      "libName": "nasl",
      "prefix": "nasl.",
      "functions": [
        {
          "functionName": "riskHandle(${1:v1/*type: func (v1: any) */})",
          "document": "",
          "definitionStr": "func nasl.riskHandle(v1: func (v1: any) ) return (r0: func NaslScriptConfigOptFunc(v1: *antlr4nasl.NaslScriptConfig) )"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nasl.proxy(v1 ...string) return (r0: func NaslScriptConfigOptFunc(v1: *antlr4nasl.NaslScriptConfig) )"
        },
        {
          "functionName": "preference(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func nasl.preference(v1: any) return (r0: func NaslScriptConfigOptFunc(v1: *antlr4nasl.NaslScriptConfig) )"
        },
        {
          "functionName": "plugin(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func nasl.plugin(v1 ...string) return (r0: func NaslScriptConfigOptFunc(v1: *antlr4nasl.NaslScriptConfig) )"
        },
        {
          "functionName": "family(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func nasl.family(v1: string) return (r0: func NaslScriptConfigOptFunc(v1: *antlr4nasl.NaslScriptConfig) )"
        },
        {
          "functionName": "conditions(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "func nasl.conditions(v1 ...any) return (r0: func NaslScriptConfigOptFunc(v1: *antlr4nasl.NaslScriptConfig) )"
        },
        {
          "functionName": "UpdateDatabase(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "`func nasl.UpdateDatabase(v1: string)`"
        },
        {
          "functionName": "ScanTarget(${1:v1/*type: string*/}, ${2:v2/*type ...antlr4nasl.NaslScriptConfigOptFunc*/})",
          "document": "",
          "definitionStr": "func nasl.ScanTarget(v1: string, v2 ...antlr4nasl.NaslScriptConfigOptFunc) return (r0: map[string]any, r1: error)"
        },
        {
          "functionName": "Scan(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...antlr4nasl.NaslScriptConfigOptFunc*/})",
          "document": "",
          "definitionStr": "func nasl.Scan(v1: string, v2: string, v3 ...antlr4nasl.NaslScriptConfigOptFunc) return (r0: map[string]any, r1: error)"
        },
        {
          "functionName": "RemoveDatabase()",
          "document": "",
          "definitionStr": "func nasl.RemoveDatabase() return (r0: error)"
        },
        {
          "functionName": "QueryAllScripts(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "func nasl.QueryAllScripts(v1 ...any) return (r0: []*antlr4nasl.NaslScriptInfo)"
        }
      ]
    },
    {
      "libName": "mmdb",
      "prefix": "mmdb.",
      "functions": [
        {
          "functionName": "QueryIPCity(${1:v1/*type: *maxminddb.Reader*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "QueryIPCity(*maxminddb.Reader, string) (*geo.City, error)"
        },
        {
          "functionName": "Open(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "Open(string) (*maxminddb.Reader, error)"
        }
      ]
    },
    {
      "libName": "mitm",
      "prefix": "mitm.",
      "functions": [
        {
          "functionName": "wsforcetext(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "wsforcetext(bool) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "wscallback(${1:v1/*type: func (v1: bytes, v2: bool) return(any) */})",
          "document": "",
          "definitionStr": "wscallback(func([]uint8, bool) any) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "useDefaultCA(${1:v1/*type: bool*/})",
          "document": "设置是否使用默认CA，如果使用了默认CA会在当前目录自动生成一套CA证书和Key",
          "definitionStr": "useDefaultCA(bool) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "rootCA(${1:caCert/*type: bytes*/}, ${2:key/*type: bytes*/})",
          "document": "设置中间人根 CA 证书（可以用 `tls` 工具包生成）",
          "definitionStr": "rootCA([]uint8, []uint8) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "maxContentLength(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "maxContentLength(int) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "isTransparent(${1:v1/*type: bool*/})",
          "document": "设置启动一个透明 mitm 劫持接口！",
          "definitionStr": "isTransparent(bool) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "host(${1:v1/*type: string*/})",
          "document": "【参数】设置中间人代理/服务器的监听主机端口",
          "definitionStr": "host(string) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "hijackHTTPResponseEx(${1:v1/*type: func (v1: bool, v2: string, v3: bytes, v4: bytes, v5: func (v1: bytes) , v6: func () ) */})",
          "document": "",
          "definitionStr": "func mitm.hijackHTTPResponseEx(v1: func (v1: bool, v2: string, v3: bytes, v4: bytes, v5: func (v1: bytes) , v6: func () ) ) return (r0: func mitmConfigOpt(v1: *yaklib.mitmConfig) )"
        },
        {
          "functionName": "hijackHTTPResponse(${1:v1/*type: func (v1: bool, v2: string, v3: bytes, v4: func (v1: bytes) , v5: func () ) */})",
          "document": "",
          "definitionStr": "hijackHTTPResponse(func(bool, string, []uint8, func([]uint8), func())) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "hijackHTTPRequest(${1:v1/*type: func (v1: bool, v2: string, v3: bytes, v4: func (v1: bytes) , v5: func () ) */})",
          "document": "",
          "definitionStr": "hijackHTTPRequest(func(bool, string, []uint8, func([]uint8), func())) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "context(${1:v1/*type: context.Context*/})",
          "document": "【参数】设置中间人的 context，用来控制生命周期",
          "definitionStr": "context(context.Context) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "callback(${1:v1/*type: func(isHttps, url, req: *http.Request, rsp: *http.Resposne)*/})",
          "document": "",
          "definitionStr": "callback(func(bool, string, *http.Request, *http.Response)) yaklib.mitmConfigOpt"
        },
        {
          "functionName": "Start(${1:port /*type: int*/}, ${2:opts...})",
          "document": "启动一个中间人代理",
          "definitionStr": "Start(\n\tport int,\n\topts ...mitmConfigOpt,\n) error"
        },
        {
          "functionName": "Bridge(${1:port}, ${2:downstreamProxy /*type: string*/}, ${3:opts...})",
          "document": "桥接模式中间人",
          "definitionStr": "Bridge(\n\tport any,\n\tdownstreamProxy string,\n\topts ...mitmConfigOpt,\n) error"
        }
      ]
    },
    {
      "libName": "math",
      "prefix": "math.",
      "functions": [
        {
          "functionName": "SqrtPi",
          "document": "math.SqrtPi: float64",
          "definitionStr": "math.SqrtPi: float64"
        },
        {
          "functionName": "SqrtE",
          "document": "math.SqrtE: float64",
          "definitionStr": "math.SqrtE: float64"
        },
        {
          "functionName": "Sqrt2",
          "document": "math.Sqrt2: float64",
          "definitionStr": "math.Sqrt2: float64"
        },
        {
          "functionName": "Sqrt(${1:x /*type: float64*/})",
          "document": "",
          "definitionStr": "Sqrt(x float64) float64  doc:Sqrt returns the square root of x.Special cases are:\tSqrt(+Inf) = +Inf\tSqrt(±0) = ±0\tSqrt(x \u003c 0) = NaN\tSqrt(NaN) = NaN"
        },
        {
          "functionName": "RoundToEven(${1:x /*type: float64*/})",
          "document": "",
          "definitionStr": "RoundToEven(x float64) float64  doc:RoundToEven returns the nearest integer, rounding ties to even.Special cases are:\tRoundToEven(±0) = ±0\tRoundToEven(±Inf) = ±Inf\tRoundToEven(NaN) = NaN"
        },
        {
          "functionName": "Round(${1:x /*type: float64*/})",
          "document": "",
          "definitionStr": "Round(x float64) float64  doc:Round returns the nearest integer, rounding half away from zero.Special cases are:\tRound(±0) = ±0\tRound(±Inf) = ±Inf\tRound(NaN) = NaN"
        },
        {
          "functionName": "Pow10(${1:n /*type: int*/})",
          "document": "",
          "definitionStr": "Pow10(n int) float64  doc:Pow10 returns 10**n, the base-10 exponential of n.Special cases are:\tPow10(n) =    0 for n \u003c -323\tPow10(n) = +Inf for n \u003e 308"
        },
        {
          "functionName": "Pow(${1:xy /*type: float64*/})",
          "document": "",
          "definitionStr": "Pow(x, y float64) float64  doc:Pow returns x**y, the base-x exponential of y.Special cases are (in order):\tPow(x, ±0) = 1 for any x\tPow(1, y) = 1 for any y\tPow(x, 1) = x for any x\tPow(NaN, y) = NaN\tPow(x, NaN) = NaN\tPow(±0, y) = ±Inf for y an odd integer \u003c 0\tPow(±0, -Inf) = +Inf\tPow(±0, +Inf) = +0\tPow(±0, y) = +Inf for finite y \u003c 0 and not an odd integer\tPow(±0, y) = ±0 for y an odd integer \u003e 0\tPow(±0, y) = +0 for finite y \u003e 0 and not an odd integer\tPow(-1, ±Inf) = 1\tPow(x, +Inf) = +Inf for |x| \u003e 1\tPow(x, -Inf) = +0 for |x| \u003e 1\tPow(x, +Inf) = +0 for |x| \u003c 1\tPow(x, -Inf) = +Inf for |x| \u003c 1\tPow(+Inf, y) = +Inf for y \u003e 0\tPow(+Inf, y) = +0 for y \u003c 0\tPow(-Inf, y) = Pow(-0, -y)\tPow(x, y) = NaN for finite x \u003c 0 and finite non-integer y"
        },
        {
          "functionName": "Pi",
          "document": "math.Pi: float64",
          "definitionStr": "math.Pi: float64"
        },
        {
          "functionName": "NaN()",
          "document": "",
          "definitionStr": "NaN() float64  doc:NaN returns an IEEE 754 ``not-a-number'' value."
        },
        {
          "functionName": "Ln2",
          "document": "math.Ln2: float64",
          "definitionStr": "math.Ln2: float64"
        },
        {
          "functionName": "Ln10",
          "document": "math.Ln10: float64",
          "definitionStr": "math.Ln10: float64"
        },
        {
          "functionName": "IsNaN(${1:f /*type: float64*/})",
          "document": "",
          "definitionStr": "IsNaN(f float64) (is bool)  doc:IsNaN reports whether f is an IEEE 754 ``not-a-number'' value."
        },
        {
          "functionName": "Floor(${1:x /*type: float64*/})",
          "document": "",
          "definitionStr": "Floor(x float64) float64  doc:Floor returns the greatest integer value less than or equal to x.Special cases are:\tFloor(±0) = ±0\tFloor(±Inf) = ±Inf\tFloor(NaN) = NaN"
        },
        {
          "functionName": "E",
          "document": "math.E: float64",
          "definitionStr": "math.E: float64"
        },
        {
          "functionName": "Ceil(${1:x /*type: float64*/})",
          "document": "",
          "definitionStr": "Ceil(x float64) float64  doc:Ceil returns the least integer value greater than or equal to x.Special cases are:\tCeil(±0) = ±0\tCeil(±Inf) = ±Inf\tCeil(NaN) = NaN"
        },
        {
          "functionName": "Abs(${1:x /*type: float64*/})",
          "document": "",
          "definitionStr": "Abs(x float64) float64  doc:Abs returns the absolute value of x.Special cases are:\tAbs(±Inf) = +Inf\tAbs(NaN) = NaN"
        }
      ]
    },
    {
      "libName": "log",
      "prefix": "log.",
      "functions": [
        {
          "functionName": "warn(${1:raw /*type: string*/}, ${2:args...})",
          "document": "打印日志信息【警告级别】",
          "definitionStr": "warn(raw string, args ...any)"
        },
        {
          "functionName": "setLevel(${1:i})",
          "document": "设置当前脚本的日志级别",
          "definitionStr": "setLevel(i any)"
        },
        {
          "functionName": "info(${1:format /*type: string*/}, ${2:args...})",
          "document": "打印日志【信息】",
          "definitionStr": "info(format string, args ...any)  doc:Infof will print when logger's Level is info or debug."
        },
        {
          "functionName": "error(${1:format /*type: string*/}, ${2:args...})",
          "document": "打印日志错误信息",
          "definitionStr": "error(format string, args ...any)  doc:Errorf will print only when logger's Level is error, warn, info or debug."
        },
        {
          "functionName": "debug(${1:format /*type: string*/}, ${2:args...})",
          "document": "打印日志调试信息",
          "definitionStr": "debug(format string, args ...any)  doc:Debugf will print when logger's Level is debug."
        }
      ]
    },
    {
      "libName": "ldap",
      "prefix": "ldap.",
      "functions": [
        {
          "functionName": "username(${1:i /*type: string*/})",
          "document": "",
          "definitionStr": "username(i string) func(config *ldapClientConfig)"
        },
        {
          "functionName": "port(${1:i /*type: int*/})",
          "document": "",
          "definitionStr": "port(i int) func(config *ldapClientConfig)"
        },
        {
          "functionName": "password(${1:i /*type: string*/})",
          "document": "",
          "definitionStr": "password(i string) func(config *ldapClientConfig)"
        },
        {
          "functionName": "Login(${1:addr /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "Login(addr string, opts ...func(config *ldapClientConfig)) (*ldap.Conn, error)"
        }
      ]
    },
    {
      "libName": "jwt",
      "prefix": "jwt.",
      "functions": [
        {
          "functionName": "RemoveAlg(${1:token /*type: string*/})",
          "document": "把一个 JWT 的 Token 移除加密算法部分",
          "definitionStr": "RemoveAlg(token string) (string, error)"
        },
        {
          "functionName": "Parse(${1:tokenStr /*type: string*/}, ${2:keys...})",
          "document": "解析 JWT 的 Token，使用默认弱口令，如果需要自定义 secretKey，可以在 v2 不定长参数中设置",
          "definitionStr": "Parse(tokenStr string, keys ...string) (*jwt.Token, []byte, error)"
        },
        {
          "functionName": "JWTGenerateEx(${1:v1/*type: string*/}, ${2:v2/*type: any*/}, ${3:v3/*type: any*/}, ${4:v4/*type: bytes*/})",
          "document": "",
          "definitionStr": "func jwt.JWTGenerateEx(v1: string, v2: any, v3: any, v4: bytes) return (r0: string, r1: error)"
        },
        {
          "functionName": "JWTGenerate(${1:alg/*type: string*/}, ${2:params/*type: any*/}, ${3:secretKey/*type: bytes*/})",
          "document": "生成 JWT Token",
          "definitionStr": "JWTGenerate(string, any, []uint8) (string, error)"
        },
        {
          "functionName": "JWSGenerateEx(${1:v1/*type: string*/}, ${2:v2/*type: any*/}, ${3:v3/*type: any*/}, ${4:v4/*type: bytes*/})",
          "document": "",
          "definitionStr": "func jwt.JWSGenerateEx(v1: string, v2: any, v3: any, v4: bytes) return (r0: string, r1: error)"
        },
        {
          "functionName": "JWSGenerate(${1:algName/*type: string*/}, ${2:params/*type: any*/}, ${3:secretKey/*type: bytes*/})",
          "document": "生成一个 JWS 的 Token",
          "definitionStr": "JWSGenerate(string, any, []uint8) (string, error)"
        },
        {
          "functionName": "AllAlgs()",
          "document": "返回所有当前支持的 JWT 签名算法",
          "definitionStr": "AllAlgs() []string"
        },
        {
          "functionName": "ALG_RS512",
          "document": "jwt.ALG_RS512: string",
          "definitionStr": "jwt.ALG_RS512: string"
        },
        {
          "functionName": "ALG_RS384",
          "document": "jwt.ALG_RS384: string",
          "definitionStr": "jwt.ALG_RS384: string"
        },
        {
          "functionName": "ALG_RS256",
          "document": "jwt.ALG_RS256: string",
          "definitionStr": "jwt.ALG_RS256: string"
        },
        {
          "functionName": "ALG_PS512",
          "document": "jwt.ALG_PS512: string",
          "definitionStr": "jwt.ALG_PS512: string"
        },
        {
          "functionName": "ALG_PS384",
          "document": "jwt.ALG_PS384: string",
          "definitionStr": "jwt.ALG_PS384: string"
        },
        {
          "functionName": "ALG_PS256",
          "document": "jwt.ALG_PS256: string",
          "definitionStr": "jwt.ALG_PS256: string"
        },
        {
          "functionName": "ALG_NONE",
          "document": "jwt.ALG_NONE: string",
          "definitionStr": "jwt.ALG_NONE: string"
        },
        {
          "functionName": "ALG_HS512",
          "document": "jwt.ALG_HS512: string",
          "definitionStr": "jwt.ALG_HS512: string"
        },
        {
          "functionName": "ALG_HS384",
          "document": "jwt.ALG_HS384: string",
          "definitionStr": "jwt.ALG_HS384: string"
        },
        {
          "functionName": "ALG_HS256",
          "document": "jwt.ALG_HS256: string",
          "definitionStr": "jwt.ALG_HS256: string"
        },
        {
          "functionName": "ALG_ES512",
          "document": "jwt.ALG_ES512: string",
          "definitionStr": "jwt.ALG_ES512: string"
        },
        {
          "functionName": "ALG_ES384",
          "document": "jwt.ALG_ES384: string",
          "definitionStr": "jwt.ALG_ES384: string"
        },
        {
          "functionName": "ALG_ES256",
          "document": "jwt.ALG_ES256: string",
          "definitionStr": "jwt.ALG_ES256: string"
        }
      ]
    },
    {
      "libName": "judge",
      "prefix": "judge.",
      "functions": [
        {
          "functionName": "NewDiscriminator(${1:v1/*type: bytes*/})",
          "document": "",
          "definitionStr": "NewDiscriminator([]uint8) *comparer.Discriminator"
        },
        {
          "functionName": "CompareRaw(${1:rsp1 /*type: []byte*/}, ${2:rsp2 /*type: []byte*/})",
          "document": "",
          "definitionStr": "CompareRaw(rsp1 []byte, rsp2 []byte) float64"
        },
        {
          "functionName": "CompareHTTPResponse(${1:rsp1 /*type: *http.Response*/}, ${2:rsp2 /*type: *http.Response*/})",
          "document": "",
          "definitionStr": "CompareHTTPResponse(rsp1 *http.Response, rsp2 *http.Response) float64"
        }
      ]
    },
    {
      "libName": "json",
      "prefix": "json.",
      "functions": [
        {
          "functionName": "loads(${1:raw})",
          "document": "把一个JSON字符串解析成Yak对象，要注意参数支持 string 或 bytes",
          "definitionStr": "loads(raw any) any"
        },
        {
          "functionName": "dumps(${1:raw})",
          "document": "把一个任何Yak/Golang对象解析为 string",
          "definitionStr": "dumps(raw any) string"
        },
        {
          "functionName": "ReplaceAll(${1:j}, ${2:jpath /*type: string*/}, ${3:replaceValue})",
          "document": "",
          "definitionStr": "ReplaceAll(j any, jpath string, replaceValue any) map[string]any"
        },
        {
          "functionName": "New(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "New(any) (*yaklib.yakJson, error)"
        },
        {
          "functionName": "Marshal(${1:v})",
          "document": "",
          "definitionStr": "Marshal(v any) ([]byte, error)  doc:Marshal returns the JSON encoding of v.Marshal traverses the value v recursively.If an encountered value implements the Marshaler interfaceand is not a nil pointer, Marshal calls its MarshalJSON methodto produce JSON. If no MarshalJSON method is present but thevalue implements encoding.TextMarshaler instead, Marshal callsits MarshalText method and encodes the result as a JSON string.The nil pointer exception is not strictly necessarybut mimics a similar, necessary exception in the behavior ofUnmarshalJSON.Otherwise, Marshal uses the following type-dependent default encodings:Boolean values encode as JSON booleans.Floating point, integer, and Number values encode as JSON numbers.String values encode as JSON strings coerced to valid UTF-8,replacing invalid bytes with the Unicode replacement rune.So that the JSON will be safe to embed inside HTML \u003cscript\u003e tags,the string is encoded using HTMLEscape,which replaces \"\u003c\", \"\u003e\", \"\u0026\", U+2028, and U+2029 are escapedto \"\\u003c\",\"\\u003e\", \"\\u0026\", \"\\u2028\", and \"\\u2029\".This replacement can be disabled when using an Encoder,by calling SetEscapeHTML(false).Array and slice values encode as JSON arrays, except that[]byte encodes as a base64-encoded string, and a nil sliceencodes as the null JSON value.Struct values encode as JSON objects.Each exported struct field becomes a member of the object, using thefield name as the object key, unless the field is omitted for one of thereasons given below.The encoding of each struct field can be customized by the format stringstored under the \"json\" key in the struct field's tag.The format string gives the name of the field, possibly followed by acomma-separated list of options. The name may be empty in order tospecify options without overriding the default field name.The \"omitempty\" option specifies that the field should be omittedfrom the encoding if the field has an empty value, defined asfalse, 0, a nil pointer, a nil interface value, and any empty array,slice, map, or string.As a special case, if the field tag is \"-\", the field is always omitted.Note that a field with name \"-\" can still be generated using the tag \"-,\".Examples of struct field tags and their meanings:  // Field appears in JSON as key \"myName\".  Field int `json:\"myName\"`  // Field appears in JSON as key \"myName\" and  // the field is omitted from the object if its value is empty,  // as defined above.  Field int `json:\"myName,omitempty\"`  // Field appears in JSON as key \"Field\" (the default), but  // the field is skipped if empty.  // Note the leading comma.  Field int `json:\",omitempty\"`  // Field is ignored by this package.  Field int `json:\"-\"`  // Field appears in JSON as key \"-\".  Field int `json:\"-,\"`The \"string\" option signals that a field is stored as JSON inside aJSON-encoded string. It applies only to fields of string, floating point,integer, or boolean types. This extra level of encoding is sometimes usedwhen communicating with JavaScript programs:   Int64String int64 `json:\",string\"`The key name will be used if it's a non-empty string consisting ofonly Unicode letters, digits, and ASCII punctuation except quotationmarks, backslash, and comma.Anonymous struct fields are usually marshaled as if their inner exported fieldswere fields in the outer struct, subject to the usual Go visibility rules amendedas described in the next paragraph.An anonymous struct field with a name given in its JSON tag is treated ashaving that name, rather than being anonymous.An anonymous struct field of interface type is treated the same as havingthat type as its name, rather than being anonymous.The Go visibility rules for struct fields are amended for JSON whendeciding which field to marshal or unmarshal. If there aremultiple fields at the same level, and that level is the leastnested (and would therefore be the nesting level selected by theusual Go rules), the following extra rules apply:1) Of those fields, if any are JSON-tagged, only tagged fields are considered,even if there are multiple untagged fields that would otherwise conflict.2) If there is exactly one field (tagged or not according to the first rule), that is selected.3) Otherwise there are multiple fields, and all are ignored; no error occurs.Handling of anonymous struct fields is new in Go 1.1.Prior to Go 1.1, anonymous struct fields were ignored. To force ignoring ofan anonymous struct field in both current and earlier versions, give the fielda JSON tag of \"-\".Map values encode as JSON objects. The map's key type must either be astring, an integer type, or implement encoding.TextMarshaler. The map keysare sorted and used as JSON object keys by applying the following rules,subject to the UTF-8 coercion described for string values above:  - keys of any string type are used directly  - encoding.TextMarshalers are marshaled  - integer keys are converted to stringsPointer values encode as the value pointed to.A nil pointer encodes as the null JSON value.Interface values encode as the value contained in the interface.A nil interface value encodes as the null JSON value.Channel, complex, and function values cannot be encoded in JSON.Attempting to encode such a value causes Marshal to returnan UnsupportedTypeError.JSON cannot represent cyclic data structures and Marshal does nothandle them. Passing cyclic structures to Marshal will result inan error."
        },
        {
          "functionName": "FindPath(${1:j}, ${2:jpath /*type: string*/})",
          "document": "",
          "definitionStr": "FindPath(j any, jpath string) any"
        },
        {
          "functionName": "Find(${1:j}, ${2:jpath /*type: string*/})",
          "document": "",
          "definitionStr": "Find(j any, jpath string) any"
        },
        {
          "functionName": "ExtractJSONEx(${1:raw /*type: string*/})",
          "document": "",
          "definitionStr": "ExtractJSONEx(raw string) (results []string, rawStr []string)"
        },
        {
          "functionName": "ExtractJSON(${1:raw /*type: string*/})",
          "document": "",
          "definitionStr": "ExtractJSON(raw string) []string"
        }
      ]
    },
    {
      "libName": "js",
      "prefix": "js.",
      "functions": [
        {
          "functionName": "UndefinedValue()",
          "document": "",
          "definitionStr": "UndefinedValue() otto.Value"
        },
        {
          "functionName": "TrueValue()",
          "document": "",
          "definitionStr": "TrueValue() otto.Value"
        },
        {
          "functionName": "ToValue(${1:v1/*type: any*/})",
          "document": "把 Golang/Yak 对象转变为 otto.Value 对象",
          "definitionStr": "ToValue(any) (otto.Value, error)"
        },
        {
          "functionName": "Run(${1:src})",
          "document": "执行一段 JS 代码，返回上下文以及代码的执行结果",
          "definitionStr": "Run(src any) (*Otto, Value, error)  doc:Run will allocate a new JavaScript runtime, run the given sourceon the allocated runtime, and return the runtime, resulting value, anderror (if any).src may be a string, a byte slice, a bytes.Buffer, or an io.Reader, but it MUST always be in UTF-8.src may also be a Script.src may also be a Program, but if the AST has been modified, then runtime behavior is undefined."
        },
        {
          "functionName": "PoweredBy",
          "document": "js.PoweredBy: string",
          "definitionStr": "js.PoweredBy: string"
        },
        {
          "functionName": "Parse(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func js.Parse(v1: string) return (r0: *ast.Program, r1: error)"
        },
        {
          "functionName": "NullValue()",
          "document": "返回 JS 的 NULL 对象",
          "definitionStr": "NullValue() otto.Value"
        },
        {
          "functionName": "New()",
          "document": "新创建一个 JS 执行上下文",
          "definitionStr": "New() *otto.Otto  doc:create vm"
        },
        {
          "functionName": "NaNValue()",
          "document": "",
          "definitionStr": "NaNValue() otto.Value"
        },
        {
          "functionName": "GetSTType(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func js.GetSTType(v1: any) return (r0: string)"
        },
        {
          "functionName": "FalseValue()",
          "document": "返回 JS 的 False 对象",
          "definitionStr": "FalseValue() otto.Value"
        },
        {
          "functionName": "CallFunctionFromCode(${1:i}, ${2:funcName /*type: string*/}, ${3:params...})",
          "document": "从一段代码中调用某个函数",
          "definitionStr": "CallFunctionFromCode(i any, funcName string, params ...any) (otto.Value, error)"
        },
        {
          "functionName": "ASTWalk(${1:v1/*type: string*/})",
          "document": "遍历一个 JS 中的所有符号，字面量以及数据解析错误的地方",
          "definitionStr": "ASTWalk(string) (*javascript.ASTWalkerResult, error)"
        }
      ]
    },
    {
      "libName": "java",
      "prefix": "java.",
      "functions": [
        {
          "functionName": "ToJson(${1:i})",
          "document": "把 Java 对象转变为 JSON",
          "definitionStr": "ToJson(i any) ([]byte, error)"
        },
        {
          "functionName": "ParseJavaObjectStream(${1:raw/*type: bytes*/})",
          "document": "把 bytes 转变为 Java 对象",
          "definitionStr": "ParseJavaObjectStream([]uint8) ([]yserx.JavaSerializable, error)"
        },
        {
          "functionName": "ParseHexJavaObjectStream(${1:hexStream/*type: string*/})",
          "document": "把 HEX 流(aced0005...)转变为对象",
          "definitionStr": "ParseHexJavaObjectStream(string) ([]yserx.JavaSerializable, error)"
        },
        {
          "functionName": "NewJavaString(${1:data/*type: string*/})",
          "document": "创建一个 TC_STRING (4byte length)",
          "definitionStr": "NewJavaString(string) *yserx.JavaString"
        },
        {
          "functionName": "NewJavaReference(${1:handle/*type: uint64*/})",
          "document": "根据 Handle 创建一个 TC_REFERENCE",
          "definitionStr": "NewJavaReference(uint64) *yserx.JavaReference"
        },
        {
          "functionName": "NewJavaObject(${1:desc/*type: *yserx.JavaClassDesc*/}, ${2:classDataArr/*type ...*yserx.JavaClassData*/})",
          "document": "创建一个 Java TC_OBJECT",
          "definitionStr": "NewJavaObject(*yserx.JavaClassDesc, ...*yserx.JavaClassData) *yserx.JavaObject"
        },
        {
          "functionName": "NewJavaNull()",
          "document": "创建一个 TC_NULL",
          "definitionStr": "NewJavaNull() *yserx.JavaNull"
        },
        {
          "functionName": "NewJavaLongString(${1:data/*type: string*/})",
          "document": "创建一个 Long String(8byte length)",
          "definitionStr": "NewJavaLongString(string) *yserx.JavaString"
        },
        {
          "functionName": "NewJavaFieldValue(${1:typeFlag/*type: byte*/}, ${2:raw/*type: bytes*/})",
          "document": "根据类型，和 bytes 创建一个字段值",
          "definitionStr": "NewJavaFieldValue(uint8, []uint8) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldShortValue(${1:data/*type: int*/})",
          "document": "创建一个 short 作为字段值",
          "definitionStr": "NewJavaFieldShortValue(int) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldObjectValue(${1:obj/*type: yserx.JavaSerializable*/})",
          "document": "创建一个 TC_OBJECT 作为字段值",
          "definitionStr": "NewJavaFieldObjectValue(yserx.JavaSerializable) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldLongValue(${1:data/*type: uint64*/})",
          "document": "创建一个 Long 作为字段值(uint64)",
          "definitionStr": "NewJavaFieldLongValue(uint64) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldIntValue(${1:data/*type: uint64*/})",
          "document": "创建一个整数作为字段值",
          "definitionStr": "NewJavaFieldIntValue(uint64) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldFloatValue(${1:data/*type: float32*/})",
          "document": "创建一个 float32 作为字段值",
          "definitionStr": "NewJavaFieldFloatValue(float32) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldDoubleValue(${1:data/*type: float64*/})",
          "document": "创建一个 float64 作为字段值",
          "definitionStr": "NewJavaFieldDoubleValue(float64) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldCharValue(${1:data/*type: int*/})",
          "document": "创建一个 Char 作为字段值",
          "definitionStr": "NewJavaFieldCharValue(int) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldByteValue(${1:data/*type: byte*/})",
          "document": "创建一个 Byte 的字段值",
          "definitionStr": "NewJavaFieldByteValue(uint8) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldBoolValue(${1:result/*type: bool*/})",
          "document": "创建一个布尔值作为 Java 字段值",
          "definitionStr": "NewJavaFieldBoolValue(bool) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaFieldArrayValue(${1:element/*type: yserx.JavaSerializable*/})",
          "document": "创建一个 X_FIELDVALUE",
          "definitionStr": "NewJavaFieldArrayValue(yserx.JavaSerializable) *yserx.JavaFieldValue"
        },
        {
          "functionName": "NewJavaEnum(${1:desc/*type: *yserx.JavaClassDesc*/}, ${2:constantName/*type: *yserx.JavaString*/})",
          "document": "创建一个 TC_ENUM",
          "definitionStr": "NewJavaEnum(*yserx.JavaClassDesc, *yserx.JavaString) *yserx.JavaEnumDesc"
        },
        {
          "functionName": "NewJavaEndBlockData()",
          "document": "创建一个块数据结束符（TC_ENDBLOCKDATA）",
          "definitionStr": "NewJavaEndBlockData() *yserx.JavaEndBlockData"
        },
        {
          "functionName": "NewJavaClassFields(${1:fields/*type ...*yserx.JavaClassField*/})",
          "document": "创建参数组 X_CLASSFIELDS",
          "definitionStr": "NewJavaClassFields(...*yserx.JavaClassField) *yserx.JavaClassFields"
        },
        {
          "functionName": "NewJavaClassField(${1:fieldName/*type: string*/}, ${2:fieldType/*type: byte*/}, ${3:fieldObject/*type: yserx.JavaSerializable*/})",
          "document": "创建一个类参数结构 X_CLASSFIELD",
          "definitionStr": "NewJavaClassField(string, uint8, yserx.JavaSerializable) *yserx.JavaClassField"
        },
        {
          "functionName": "NewJavaClassDetails(${1:className/*type: string*/}, ${2:serialId/*type: bytes*/}, ${3:flag/*type: byte*/}, ${4:fields/*type: *yserx.JavaClassFields*/}, ${5:annotations/*type: []yserx.JavaSerializable*/}, ${6:superClass/*type: *yserx.JavaClassDetails*/})",
          "document": "创建一个 X_CLASSDETAILS",
          "definitionStr": "NewJavaClassDetails(string, []uint8, uint8, *yserx.JavaClassFields, []yserx.JavaSerializable, *yserx.JavaClassDetails) *yserx.JavaClassDetails"
        },
        {
          "functionName": "NewJavaClassDesc(${1:className/*type: string*/}, ${2:serialId/*type: bytes*/}, ${3:flag/*type: byte*/}, ${4:X_FIELDS/*type: *yserx.JavaClassFields*/}, ${5:annotations/*type: []yserx.JavaSerializable*/}, ${6:superClass/*type: *yserx.JavaClassDetails*/})",
          "document": "创建一个 TC_CLASSDESC",
          "definitionStr": "NewJavaClassDesc(string, []uint8, uint8, *yserx.JavaClassFields, []yserx.JavaSerializable, *yserx.JavaClassDetails) *yserx.JavaClassDesc"
        },
        {
          "functionName": "NewJavaClassData(${1:fields/*type: []yserx.JavaSerializable*/}, ${2:blockdatas/*type: []yserx.JavaSerializable*/})",
          "document": "创建一个 CLASSDATA 块",
          "definitionStr": "NewJavaClassData([]yserx.JavaSerializable, []yserx.JavaSerializable) *yserx.JavaClassData"
        },
        {
          "functionName": "NewJavaClass(${1:tcClassDesc/*type: *yserx.JavaClassDesc*/})",
          "document": "创建一个 JavaClass TC_CLASS",
          "definitionStr": "NewJavaClass(*yserx.JavaClassDesc) *yserx.JavaClass"
        },
        {
          "functionName": "NewJavaBlockDataBytes(${1:data/*type: bytes*/})",
          "document": "创建一个 Java TC_BLOCKDATA (bytes)",
          "definitionStr": "NewJavaBlockDataBytes([]uint8) *yserx.JavaBlockData"
        },
        {
          "functionName": "NewJavaArray(${1:classDesc/*type: *yserx.JavaClassDesc*/}, ${2:fields/*type ...*yserx.JavaFieldValue*/})",
          "document": "创建一个 JAVA TC_ARRAY",
          "definitionStr": "NewJavaArray(*yserx.JavaClassDesc, ...*yserx.JavaFieldValue) *yserx.JavaArray"
        },
        {
          "functionName": "MarshalJavaObjects(${1:res...})",
          "document": "序列化 Java 对象",
          "definitionStr": "MarshalJavaObjects(res ...JavaSerializable) []byte"
        },
        {
          "functionName": "FromJson(${1:bytes/*type: bytes*/})",
          "document": "把 JSON 转变为 Java 对象",
          "definitionStr": "FromJson([]uint8) ([]yserx.JavaSerializable, error)"
        }
      ]
    },
    {
      "libName": "ja3",
      "prefix": "ja3.",
      "functions": [
        {
          "functionName": "ParseJA3ToClientHelloSpec(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func ja3.ParseJA3ToClientHelloSpec(v1: string) return (r0: *tls.ClientHelloSpec, r1: error)"
        },
        {
          "functionName": "ParseJA3S(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func ja3.ParseJA3S(v1: string) return (r0: *ja3.JA3S, r1: error)"
        },
        {
          "functionName": "ParseJA3(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func ja3.ParseJA3(v1: string) return (r0: *ja3.JA3, r1: error)"
        },
        {
          "functionName": "GetTransportByClientHelloSpec(${1:v1/*type: *tls.ClientHelloSpec*/})",
          "document": "",
          "definitionStr": "func ja3.GetTransportByClientHelloSpec(v1: *tls.ClientHelloSpec) return (r0: *http.Transport)"
        }
      ]
    },
    {
      "libName": "io",
      "prefix": "io.",
      "functions": [
        {
          "functionName": "WriteString(${1:w /*type: Writer*/}, ${2:s /*type: string*/})",
          "document": "把一个 string 写到 writer 中",
          "definitionStr": "WriteString(w Writer, s string) (n int, err error)  doc:WriteString writes the contents of the string s to w, which accepts a slice of bytes.If w implements StringWriter, its WriteString method is invoked directly.Otherwise, w.Write is called exactly once."
        },
        {
          "functionName": "TeeReader(${1:srcReader/*type: io.Reader*/}, ${2:teeWriter/*type: io.Writer*/})",
          "document": "reader 分流，把 srcReader 读出来的内容会同步写到 teeWriter，通过返回值的 reader 来驱动",
          "definitionStr": "TeeReader(io.Reader, io.Writer) io.Reader"
        },
        {
          "functionName": "ReadStable(${1:v1/*type: net.Conn*/}, ${2:v2/*type: float64*/})",
          "document": "增加一个【稳定即可】的 Reader",
          "definitionStr": "ReadStable(net.Conn, float64) []uint8"
        },
        {
          "functionName": "ReadFile(${1:filename /*type: string*/})",
          "document": "把一个文件中的内容全部读出来",
          "definitionStr": "ReadFile(filename string) ([]byte, error)  doc:ReadFile reads the file named by filename and returns the contents.A successful call returns err == nil, not err == EOF. Because ReadFilereads the whole file, it does not treat an EOF from Read as an errorto be reported.As of Go 1.16, this function simply calls os.ReadFile."
        },
        {
          "functionName": "ReadEvery1s(${1:ctx/*type: context.Context*/}, ${2:reader/*type: io.Reader*/}, ${3:callback/*type: func (v1: bytes) return(bool) */})",
          "document": "使用一个 ctx 控制生命周期，每隔一秒钟读一次 Reader，每隔一秒钟执行一次回调函数，回调函数如果返回 false，则立即停止读取",
          "definitionStr": "ReadEvery1s(context.Context, io.Reader, func([]uint8) bool)"
        },
        {
          "functionName": "ReadAll(${1:r /*type: io.Reader*/})",
          "document": "把一个 reader 中的内容全部读出来",
          "definitionStr": "ReadAll(r io.Reader) ([]byte, error)  doc:ReadAll reads from r until an error or EOF and returns the data it read.A successful call returns err == nil, not err == EOF. Because ReadAll isdefined to read from src until EOF, it does not treat an EOF from Readas an error to be reported.As of Go 1.16, this function simply calls io.ReadAll."
        },
        {
          "functionName": "Pipe()",
          "document": "创建一个 io 管道",
          "definitionStr": "Pipe() (*PipeReader, *PipeWriter)  doc:Pipe creates a synchronous in-memory pipe.It can be used to connect code expecting an io.Readerwith code expecting an io.Writer.Reads and Writes on the pipe are matched one to oneexcept when multiple Reads are needed to consume a single Write.That is, each Write to the PipeWriter blocks until it has satisfiedone or more Reads from the PipeReader that fully consumethe written data.The data is copied directly from the Write to the correspondingRead (or Reads); there is no internal buffering.It is safe to call Read and Write in parallel with each other or with Close.Parallel calls to Read and parallel calls to Write are also safe:the individual calls will be gated sequentially."
        },
        {
          "functionName": "NopCloser(${1:r /*type: io.Reader*/})",
          "document": "把一个 io.Reader 包装成 io.ReadCloser，遇到 Nop/EOF 即关闭",
          "definitionStr": "NopCloser(r io.Reader) io.ReadCloser  doc:NopCloser returns a ReadCloser with a no-op Close method wrappingthe provided Reader r.As of Go 1.16, this function simply calls io.NopCloser."
        },
        {
          "functionName": "MultiReader(${1:readers/*type ...io.Reader*/})",
          "document": "把多个 Reader 合并成一个",
          "definitionStr": "MultiReader(...io.Reader) io.Reader"
        },
        {
          "functionName": "LimitReader(${1:srcReader/*type: io.Reader*/}, ${2:length/*type: int64*/})",
          "document": "创建一个新的 `io.Reader` 这个 Reader 只读固定长度",
          "definitionStr": "LimitReader(io.Reader, int64) io.Reader"
        },
        {
          "functionName": "EOF",
          "document": "io.EOF: *errors.errorString",
          "definitionStr": "io.EOF: *errors.errorString"
        },
        {
          "functionName": "Discard",
          "document": "io.Discard: io.discard",
          "definitionStr": "io.Discard: io.discard"
        },
        {
          "functionName": "CopyN(${1:dst /*type: Writer*/}, ${2:src /*type: Reader*/}, ${3:n /*type: int64*/})",
          "document": "从 srcReader 中复制固定长度的字节到 dstWriter",
          "definitionStr": "CopyN(dst Writer, src Reader, n int64) (written int64, err error)  doc:CopyN copies n bytes (or until an error) from src to dst.It returns the number of bytes copied and the earliesterror encountered while copying.On return, written == n if and only if err == nil.If dst implements the ReaderFrom interface,the copy is implemented using it."
        },
        {
          "functionName": "Copy(${1:dst /*type: Writer*/}, ${2:src /*type: Reader*/})",
          "document": "把一个 `io.Reader` 中的内容对接到 `io.Writer` 中",
          "definitionStr": "Copy(dst Writer, src Reader) (written int64, err error)  doc:Copy copies from src to dst until either EOF is reachedon src or an error occurs. It returns the number of bytescopied and the first error encountered while copying, if any.A successful Copy returns err == nil, not err == EOF.Because Copy is defined to read from src until EOF, it doesnot treat an EOF from Read as an error to be reported.If src implements the WriterTo interface,the copy is implemented by calling src.WriteTo(dst).Otherwise, if dst implements the ReaderFrom interface,the copy is implemented by calling dst.ReadFrom(src)."
        }
      ]
    },
    {
      "libName": "iiop",
      "prefix": "iiop.",
      "functions": [
        {
          "functionName": "SendPayload(${1:addr /*type: string*/}, ${2:sendPayload /*type: PayloadGeneraterFun*/})",
          "document": "",
          "definitionStr": "SendPayload(addr string, sendPayload PayloadGeneraterFun) error"
        },
        {
          "functionName": "RebindPayload(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "RebindPayload(string) iiop.PayloadGeneraterFun"
        },
        {
          "functionName": "InvokePayload(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "InvokePayload(string, string) iiop.PayloadGeneraterFun"
        },
        {
          "functionName": "BindPayload(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "BindPayload(string) iiop.PayloadGeneraterFun"
        }
      ]
    },
    {
      "libName": "httpserver",
      "prefix": "httpserver.",
      "functions": [
        {
          "functionName": "tlsCertAndKey(${1:cert/*type: any*/}, ${2:key/*type: any*/}, ${3:caCerts/*type ...any*/})",
          "document": "【参数】设置 TLS/SSL，启动一个 HTTPS 服务器",
          "definitionStr": "tlsCertAndKey(any, any, ...any) yaklib._httpServerConfigOpt"
        },
        {
          "functionName": "handler(${1:handler/*type: func (v1: http.ResponseWriter, v2: *http.Request) */})",
          "document": "",
          "definitionStr": "handler(func(http.ResponseWriter, *http.Request)) yaklib._httpServerConfigOpt"
        },
        {
          "functionName": "context(${1:ctx/*type: context.Context*/})",
          "document": "【参数】为 HTTP Server 增加上下文控制生命周期",
          "definitionStr": "context(context.Context) yaklib._httpServerConfigOpt"
        },
        {
          "functionName": "Serve(${1:host /*type: string*/}, ${2:port /*type: int*/}, ${3:opts...})",
          "document": "启动一个 HTTP 服务器",
          "definitionStr": "Serve(host string, port int, opts ..._httpServerConfigOpt) error"
        },
        {
          "functionName": "LocalFileSystemServe(${1:host /*type: string*/}, ${2:port /*type: int*/}, ${3:prefixlocalPath /*type: string*/}, ${4:opts...})",
          "document": "",
          "definitionStr": "LocalFileSystemServe(host string, port int, prefix, localPath string, opts ..._httpServerConfigOpt) error"
        }
      ]
    },
    {
      "libName": "httpool",
      "prefix": "httpool.",
      "functions": [
        {
          "functionName": "size(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "size(int) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "redirectTimes(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "redirectTimes(int) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "rawMode(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "rawMode(bool) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "proxy(...string) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "port(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "port(int) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "perRequestTimeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "perRequestTimeout(float64) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "noFixContentLength(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "noFixContentLength(bool) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "https(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "https(bool) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "host(${1:v1/*type: string*/}, ${2:v2/*type: bool*/})",
          "document": "",
          "definitionStr": "host(string, bool) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "fuzzParams(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "fuzzParams(any) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "fuzz(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "fuzz(bool) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "context(${1:v1/*type: context.Context*/})",
          "document": "",
          "definitionStr": "context(context.Context) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "Pool(${1:i}, ${2:opts...})",
          "document": "",
          "definitionStr": "Pool(i any, opts ...httpPoolConfigOption) (chan *_httpResult, error)"
        }
      ]
    },
    {
      "libName": "http",
      "prefix": "http.",
      "functions": [
        {
          "functionName": "useragent(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "useragent(any) yakhttp.HttpOption"
        },
        {
          "functionName": "uarand()",
          "document": "【参数】设置随机 UserAgent",
          "definitionStr": "uarand() string"
        },
        {
          "functionName": "ua(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "ua(any) yakhttp.HttpOption"
        },
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "timeout(float64) yakhttp.HttpOption"
        },
        {
          "functionName": "showhead(${1:reqOrRsp/*type: http.Request/Response*/})",
          "document": "调试函数，展示原始数据包内容，不包含 body",
          "definitionStr": "showhead(any)"
        },
        {
          "functionName": "show(${1:i})",
          "document": "调试函数，展示原始数据包内容",
          "definitionStr": "show(i any)"
        },
        {
          "functionName": "session(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "session(any) yakhttp.HttpOption"
        },
        {
          "functionName": "redirect(${1:v1/*type: func (v1: *http.Request, v2: []*http.Request) return(bool) */})",
          "document": "",
          "definitionStr": "redirect(func(*http.Request, []*http.Request) bool) yakhttp.HttpOption"
        },
        {
          "functionName": "proxy(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "proxy(...string) yakhttp.HttpOption"
        },
        {
          "functionName": "postparams(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "postparams(any) yakhttp.HttpOption"
        },
        {
          "functionName": "params(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "params(any) yakhttp.HttpOption"
        },
        {
          "functionName": "noredirect()",
          "document": "",
          "definitionStr": "noredirect() yakhttp.HttpOption"
        },
        {
          "functionName": "json(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "json(any) yakhttp.HttpOption"
        },
        {
          "functionName": "header(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "header(any, any) yakhttp.HttpOption"
        },
        {
          "functionName": "fakeua()",
          "document": "",
          "definitionStr": "fakeua() yakhttp.HttpOption"
        },
        {
          "functionName": "dumphead(${1:i})",
          "document": "工具函数，把 `http.Request/http.Response` 的数据包的头序列化程 `[]byte`",
          "definitionStr": "dumphead(i any) ([]byte, error)"
        },
        {
          "functionName": "dump(${1:i})",
          "document": "工具函数，把 `http.Request/http.Response` 变成完整的数据包 `[]byte`",
          "definitionStr": "dump(i any) ([]byte, error)"
        },
        {
          "functionName": "cookie(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "cookie(any) yakhttp.HttpOption"
        },
        {
          "functionName": "body(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "body(any) yakhttp.HttpOption"
        },
        {
          "functionName": "RequestToSha256(${1:url /*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 sha256",
          "definitionStr": "RequestToSha256(url string) (string, error)"
        },
        {
          "functionName": "RequestToSha1(${1:url /*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 sha1",
          "definitionStr": "RequestToSha1(url string) (string, error)"
        },
        {
          "functionName": "RequestToMMH3Hash128x64(${1:url /*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 hash128x64",
          "definitionStr": "RequestToMMH3Hash128x64(url string) (string, error)"
        },
        {
          "functionName": "RequestToMMH3Hash128(${1:url /*type: string*/})",
          "document": "把 GET url 的 body 变成 mmh3 的 hash128",
          "definitionStr": "RequestToMMH3Hash128(url string) (string, error)"
        },
        {
          "functionName": "RequestToMD5(${1:url /*type: string*/})",
          "document": "把对 url 的 GET 请求的内容直接编码成 md5",
          "definitionStr": "RequestToMD5(url string) (string, error)"
        },
        {
          "functionName": "RequestFaviconHash(${1:urlRaw /*type: string*/})",
          "document": "生成 favicon 的 hash(mmh3 32)",
          "definitionStr": "RequestFaviconHash(urlRaw string) (string, error)"
        },
        {
          "functionName": "Request(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yakhttp.HttpOption*/})",
          "document": "",
          "definitionStr": "Request(string, string, ...yakhttp.HttpOption) (*yakhttp.YakHttpResponse, error)"
        },
        {
          "functionName": "Raw(${1:req/*type: []byte|string|*http.Request|http.Request*/})",
          "document": "创建一个 Golang 原生的 `*http.Request`",
          "definitionStr": "Raw(any) (*http.Request, error)"
        },
        {
          "functionName": "Post(${1:v1/*type: string*/}, ${2:v2/*type ...yakhttp.HttpOption*/})",
          "document": "",
          "definitionStr": "Post(string, ...yakhttp.HttpOption) (*yakhttp.YakHttpResponse, error)"
        },
        {
          "functionName": "NewRequest(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yakhttp.HttpOption*/})",
          "document": "",
          "definitionStr": "NewRequest(string, string, ...yakhttp.HttpOption) (*yakhttp.YakHttpRequest, error)"
        },
        {
          "functionName": "GetAllBody(${1:raw})",
          "document": "",
          "definitionStr": "GetAllBody(raw any) []byte"
        },
        {
          "functionName": "Get(${1:v1/*type: string*/}, ${2:v2/*type ...yakhttp.HttpOption*/})",
          "document": "",
          "definitionStr": "Get(string, ...yakhttp.HttpOption) (*yakhttp.YakHttpResponse, error)"
        },
        {
          "functionName": "Do(${1:req /*type: *YakHttpRequest*/})",
          "document": "",
          "definitionStr": "Do(req *YakHttpRequest) (*http.Response, error)"
        }
      ]
    },
    {
      "libName": "hook",
      "prefix": "hook.",
      "functions": [
        {
          "functionName": "RemoveYakitPluginByName(${1:mng /*type: *YakToCallerManager*/}, ${2:scriptNames...})",
          "document": "移除已经加载的插件（通过插件名）",
          "definitionStr": "RemoveYakitPluginByName(mng *YakToCallerManager, scriptNames ...string)"
        },
        {
          "functionName": "NewMixPluginCaller()",
          "document": "新增用于配合插件资深联动的主程序",
          "definitionStr": "NewMixPluginCaller() (*yak.MixPluginCaller, error)"
        },
        {
          "functionName": "NewManager()",
          "document": "",
          "definitionStr": "NewManager() *yak.YakToCallerManager"
        },
        {
          "functionName": "LoadYakitPluginContext(${1:mng /*type: *YakToCallerManager*/}, ${2:ctx /*type: context.Context*/}, ${3:scriptType /*type: string*/}, ${4:hookNames...})",
          "document": "",
          "definitionStr": "LoadYakitPluginContext(mng *YakToCallerManager, ctx context.Context, scriptType string, hookNames ...string) error"
        },
        {
          "functionName": "LoadYakitPluginByName(${1:mng /*type: *YakToCallerManager*/}, ${2:scriptName /*type: string*/}, ${3:hookNames...})",
          "document": "通过插件名加载特定插件",
          "definitionStr": "LoadYakitPluginByName(mng *YakToCallerManager, scriptName string, hookNames ...string) error"
        },
        {
          "functionName": "LoadYakitPlugin(${1:mng /*type: *YakToCallerManager*/}, ${2:scriptType /*type: string*/}, ${3:hookNames...})",
          "document": "为 Manager 加载特定类型的 Yakit 插件",
          "definitionStr": "LoadYakitPlugin(mng *YakToCallerManager, scriptType string, hookNames ...string) error"
        },
        {
          "functionName": "CallYakitPluginFunc(${1:scriptName /*type: string*/}, ${2:hookName /*type: string*/})",
          "document": "导出插件特定函数",
          "definitionStr": "CallYakitPluginFunc(scriptName string, hookName string) (any, error)"
        }
      ]
    },
    {
      "libName": "hids",
      "prefix": "hids.",
      "functions": [
        {
          "functionName": "ShowMonitorInterval()",
          "document": "",
          "definitionStr": "`func hids.ShowMonitorInterval()`"
        },
        {
          "functionName": "SetMonitorInterval(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "`func hids.SetMonitorInterval(v1: float64)`"
        },
        {
          "functionName": "MemoryPercentCallback(${1:v1/*type: func (v1: float64) */})",
          "document": "",
          "definitionStr": "`func hids.MemoryPercentCallback(v1: func (v1: float64) )`"
        },
        {
          "functionName": "MemoryPercent()",
          "document": "",
          "definitionStr": "func hids.MemoryPercent() return (r0: float64)"
        },
        {
          "functionName": "Init()",
          "document": "",
          "definitionStr": "`func hids.Init()`"
        },
        {
          "functionName": "CPUPercentCallback(${1:v1/*type: func (v1: float64) */})",
          "document": "",
          "definitionStr": "`func hids.CPUPercentCallback(v1: func (v1: float64) )`"
        },
        {
          "functionName": "CPUPercent()",
          "document": "",
          "definitionStr": "func hids.CPUPercent() return (r0: float64)"
        },
        {
          "functionName": "CPUAverageCallback(${1:v1/*type: func (v1: float64) */})",
          "document": "",
          "definitionStr": "`func hids.CPUAverageCallback(v1: func (v1: float64) )`"
        }
      ]
    },
    {
      "libName": "gzip",
      "prefix": "gzip.",
      "functions": [
        {
          "functionName": "IsGzip(${1:raw /*type: []byte*/})",
          "document": "",
          "definitionStr": "IsGzip(raw []byte) bool"
        },
        {
          "functionName": "Decompress(${1:ret /*type: []byte*/})",
          "document": "解压缩",
          "definitionStr": "Decompress(ret []byte) ([]byte, error)"
        },
        {
          "functionName": "Compress(${1:i})",
          "document": "把一个数据进行 gzip 压缩",
          "definitionStr": "Compress(i any) ([]byte, error)"
        }
      ]
    },
    {
      "libName": "git",
      "prefix": "git.",
      "functions": [
        {
          "functionName": "verify(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.verify(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "remote(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func git.remote(v1: string) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.recursive(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "noFetchTags(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.noFetchTags(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "handleReference(${1:v1/*type: func (v1: *plumbing.Reference) return(error) */})",
          "document": "",
          "definitionStr": "func git.handleReference(v1: func (v1: *plumbing.Reference) return(error) ) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "handleCommit(${1:v1/*type: func (v1: *object.Commit) return(error) */})",
          "document": "",
          "definitionStr": "func git.handleCommit(v1: func (v1: *object.Commit) return(error) ) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "force(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.force(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "filterReference(${1:v1/*type: func (v1: *plumbing.Reference) return(bool) */})",
          "document": "",
          "definitionStr": "func git.filterReference(v1: func (v1: *plumbing.Reference) return(bool) ) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "filterCommit(${1:v1/*type: func (v1: *object.Commit) return(bool) */})",
          "document": "",
          "definitionStr": "func git.filterCommit(v1: func (v1: *object.Commit) return(bool) ) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "fetchAllTags(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.fetchAllTags(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "depth(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func git.depth(v1: int) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "context(${1:v1/*type: context.Context*/})",
          "document": "",
          "definitionStr": "func git.context(v1: context.Context) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "checkoutKeep(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.checkoutKeep(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "checkoutForce(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.checkoutForce(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "checkoutCreate(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func git.checkoutCreate(v1: bool) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "auth(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func git.auth(v1: string, v2: string) return (r0: func Option(v1: *yakgit.config) return(error) )"
        },
        {
          "functionName": "SetProxy(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "`func git.SetProxy(v1 ...string)`"
        },
        {
          "functionName": "Pull(${1:v1/*type: string*/}, ${2:v2/*type ...yakgit.Option*/})",
          "document": "",
          "definitionStr": "func git.Pull(v1: string, v2 ...yakgit.Option) return (r0: error)"
        },
        {
          "functionName": "IterateCommit(${1:v1/*type: string*/}, ${2:v2/*type ...yakgit.Option*/})",
          "document": "",
          "definitionStr": "func git.IterateCommit(v1: string, v2 ...yakgit.Option) return (r0: error)"
        },
        {
          "functionName": "Fetch(${1:v1/*type: string*/}, ${2:v2/*type ...yakgit.Option*/})",
          "document": "",
          "definitionStr": "func git.Fetch(v1: string, v2 ...yakgit.Option) return (r0: error)"
        },
        {
          "functionName": "Clone(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yakgit.Option*/})",
          "document": "",
          "definitionStr": "func git.Clone(v1: string, v2: string, v3 ...yakgit.Option) return (r0: error)"
        },
        {
          "functionName": "Checkout(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...yakgit.Option*/})",
          "document": "",
          "definitionStr": "func git.Checkout(v1: string, v2: string, v3 ...yakgit.Option) return (r0: error)"
        }
      ]
    },
    {
      "libName": "fuzz",
      "prefix": "fuzz.",
      "functions": [
        {
          "functionName": "https(${1:isHttps/*type: bool*/})",
          "document": "`http.HTTPRequest` 的 extraParams 中的额外选项之一",
          "definitionStr": "https(bool) mutate.BuildFuzzHTTPRequestOption"
        },
        {
          "functionName": "WithTimeOut(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "WithTimeOut(float64) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "WithNamingContext(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "WithNamingContext(string) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "WithDelay(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "WithDelay(float64) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "WithConcurrentLimit(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "WithConcurrentLimit(int) mutate.httpPoolConfigOption"
        },
        {
          "functionName": "UrlsToHTTPRequests(${1:urlTemplate/*type ...[]byte|string|[]string*/})",
          "document": "把多个 URL 变成可以批量 Fuzz 的请求组(Batch)",
          "definitionStr": "UrlsToHTTPRequests(...any) (*mutate.FuzzHTTPRequestBatch, error)"
        },
        {
          "functionName": "UrlToHTTPRequest(${1:method /*type: string*/}, ${2:i})",
          "document": "使用 URL 构造一个 Fuzz 请求包",
          "definitionStr": "UrlToHTTPRequest(method string, i any) (*mutate.FuzzHTTPRequest, error)"
        },
        {
          "functionName": "StringsWithParam(${1:i}, ${2:i2})",
          "document": "新增带参数的 fuzz",
          "definitionStr": "StringsWithParam(i any, i2 any) []string"
        },
        {
          "functionName": "StringsFunc(${1:i}, ${2:cb /*type: func(i *mutate.MutateResult)*/}, ${3:params...})",
          "document": "",
          "definitionStr": "StringsFunc(i any, cb func(i *mutate.MutateResult), params ...any) error"
        },
        {
          "functionName": "Strings(${1:i})",
          "document": "执行 Fuzz 模版，可以支持把一个模版字符串渲染多个字符串，参考 [web/http fuzz教程](/docs/buildinlibs/lib_fuzz)",
          "definitionStr": "Strings(i any) []string  doc:fuzz"
        },
        {
          "functionName": "ProtobufYAML(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "ProtobufYAML(any) *yaklib.ProtobufRecords"
        },
        {
          "functionName": "ProtobufJSON(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "ProtobufJSON(any) *yaklib.ProtobufRecords"
        },
        {
          "functionName": "ProtobufHex(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "ProtobufHex(any) *yaklib.ProtobufRecords"
        },
        {
          "functionName": "ProtobufBytes(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "ProtobufBytes(any) *yaklib.ProtobufRecords"
        },
        {
          "functionName": "MustHTTPRequest(${1:v1/*type: any*/}, ${2:v2/*type ...mutate.BuildFuzzHTTPRequestOption*/})",
          "document": "",
          "definitionStr": "MustHTTPRequest(any, ...mutate.BuildFuzzHTTPRequestOption) *mutate.FuzzHTTPRequest"
        },
        {
          "functionName": "HTTPRequest(${1:originRequest/*type: []byte|string|http.Request|*http.Request*/}, ${2:extraParams/*type ...fuzzHTTPRequestOpt*/})",
          "document": "HTTP模糊测试核心函数，构建一个模糊测试 HTTP 请求",
          "definitionStr": "HTTPRequest(any, ...mutate.BuildFuzzHTTPRequestOption) (*mutate.FuzzHTTPRequest, error)"
        },
        {
          "functionName": "FuzzCalcExpr()",
          "document": "",
          "definitionStr": "func fuzz.FuzzCalcExpr() return (r0: map[string]any)"
        }
      ]
    },
    {
      "libName": "finscan",
      "prefix": "finscan.",
      "functions": [
        {
          "functionName": "wait(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "wait(float64) tools.finScanOpt"
        },
        {
          "functionName": "rateLimit(${1:v1/*type: int*/}, ${2:v2/*type: int*/})",
          "document": "",
          "definitionStr": "rateLimit(int, int) tools.finScanOpt"
        },
        {
          "functionName": "outputPrefix(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "outputPrefix(string) tools.finScanOpt"
        },
        {
          "functionName": "outputFile(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "outputFile(string) tools.finScanOpt"
        },
        {
          "functionName": "initPortFilter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "initPortFilter(string) tools.finScanOpt"
        },
        {
          "functionName": "initHostFilter(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "initHostFilter(string) tools.finScanOpt"
        },
        {
          "functionName": "excludePorts(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "excludePorts(string) tools.finScanOpt"
        },
        {
          "functionName": "excludeHosts(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "excludeHosts(string) tools.finScanOpt"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "concurrent(int) tools.finScanOpt"
        },
        {
          "functionName": "Scan(${1:v1/*type: string*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...tools.finScanOpt*/})",
          "document": "",
          "definitionStr": "Scan(string, string, ...tools.finScanOpt) (chan *finscan.FinScanResult, error)"
        }
      ]
    },
    {
      "libName": "file",
      "prefix": "file.",
      "functions": [
        {
          "functionName": "TempFileName()",
          "document": "",
          "definitionStr": "TempFileName() (string, error)"
        },
        {
          "functionName": "TempFile(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "TempFile(...string) (*yaklib._yakFile, error)"
        },
        {
          "functionName": "TailF(${1:v1/*type: string*/}, ${2:v2/*type: func (v1: string) */})",
          "document": "",
          "definitionStr": "TailF(string, func(string))"
        },
        {
          "functionName": "Stat(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "Stat(string) (fs.FileInfo, error)"
        },
        {
          "functionName": "Split(${1:path /*type: string*/})",
          "document": "",
          "definitionStr": "Split(path string) (dir, file string)  doc:Split splits path immediately following the final Separator,separating it into a directory and file name component.If there is no Separator in path, Split returns an empty dirand file set to path.The returned values have the property that path = dir+file."
        },
        {
          "functionName": "SaveJson(${1:filePath/*type: string*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "SaveJson(string, any) error"
        },
        {
          "functionName": "Save(${1:fileName /*type: string*/}, ${2:i})",
          "document": "把 content 中的内容写入文件名为 fileName 中的文件，支持 bytes/string/[]string",
          "definitionStr": "Save(fileName string, i any) error"
        },
        {
          "functionName": "Rm(${1:path /*type: string*/})",
          "document": "同 `file.Remove` / Golang `os.RemoveAll`",
          "definitionStr": "Rm(path string) error  doc:RemoveAll removes path and any children it contains.It removes everything it can but returns the first errorit encounters. If the path does not exist, RemoveAllreturns nil (no error).If there is an error, it will be of type *PathError."
        },
        {
          "functionName": "Rename(${1:oldpathnewpath /*type: string*/})",
          "document": "把一个路径重命名",
          "definitionStr": "Rename(oldpath, newpath string) error  doc:Rename renames (moves) oldpath to newpath.If newpath already exists and is not a directory, Rename replaces it.OS-specific restrictions may apply when oldpath and newpath are in different directories.If there is an error, it will be of type *LinkError."
        },
        {
          "functionName": "Remove(${1:path /*type: string*/})",
          "document": "把一个文件移除，相当于 `os.RemoveAll`",
          "definitionStr": "Remove(path string) error  doc:RemoveAll removes path and any children it contains.It removes everything it can but returns the first errorit encounters. If the path does not exist, RemoveAllreturns nil (no error).If there is an error, it will be of type *PathError."
        },
        {
          "functionName": "ReadLines(${1:i})",
          "document": "",
          "definitionStr": "ReadLines(i any) []string"
        },
        {
          "functionName": "ReadFileInfoInDirectory(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "ReadFileInfoInDirectory(string) ([]*utils.FileInfo, error)"
        },
        {
          "functionName": "ReadFile(${1:filename /*type: string*/})",
          "document": "把一个文件内容读出来",
          "definitionStr": "ReadFile(filename string) ([]byte, error)  doc:ReadFile reads the file named by filename and returns the contents.A successful call returns err == nil, not err == EOF. Because ReadFilereads the whole file, it does not treat an EOF from Read as an errorto be reported.As of Go 1.16, this function simply calls os.ReadFile."
        },
        {
          "functionName": "ReadDirInfoInDirectory(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "ReadDirInfoInDirectory(string) ([]*utils.FileInfo, error)"
        },
        {
          "functionName": "ReadAll(${1:r /*type: io.Reader*/})",
          "document": "把一个 reader 的内容全部读出来",
          "definitionStr": "ReadAll(r io.Reader) ([]byte, error)  doc:ReadAll reads from r until an error or EOF and returns the data it read.A successful call returns err == nil, not err == EOF. Because ReadAll isdefined to read from src until EOF, it does not treat an EOF from Readas an error to be reported.As of Go 1.16, this function simply calls io.ReadAll."
        },
        {
          "functionName": "OpenFile(${1:v1/*type: string*/}, ${2:v2/*type: int*/}, ${3:v3/*type: fs.FileMode*/})",
          "document": "",
          "definitionStr": "OpenFile(string, int, fs.FileMode) (*yaklib._yakFile, error)"
        },
        {
          "functionName": "Open(${1:fileName/*type: string*/})",
          "document": "打开一个文件，如果没有就创建，使用最多权限",
          "definitionStr": "Open(string) (*yaklib._yakFile, error)"
        },
        {
          "functionName": "O_WRONLY",
          "document": "file.O_WRONLY: int = 0x1",
          "definitionStr": "file.O_WRONLY: int = 0x1"
        },
        {
          "functionName": "O_TRUNC",
          "document": "file.O_TRUNC: int = 0x400",
          "definitionStr": "file.O_TRUNC: int = 0x400"
        },
        {
          "functionName": "O_SYNC",
          "document": "file.O_SYNC: int = 0x80",
          "definitionStr": "file.O_SYNC: int = 0x80"
        },
        {
          "functionName": "O_RDWR",
          "document": "file.O_RDWR: int = 0x2",
          "definitionStr": "file.O_RDWR: int = 0x2"
        },
        {
          "functionName": "O_RDONLY",
          "document": "file.O_RDONLY: int = 0x0",
          "definitionStr": "file.O_RDONLY: int = 0x0"
        },
        {
          "functionName": "O_EXCL",
          "document": "file.O_EXCL: int = 0x800",
          "definitionStr": "file.O_EXCL: int = 0x800"
        },
        {
          "functionName": "O_CREATE",
          "document": "file.O_CREATE: int = 0x200",
          "definitionStr": "file.O_CREATE: int = 0x200"
        },
        {
          "functionName": "O_APPEND",
          "document": "file.O_APPEND: int = 0x8",
          "definitionStr": "file.O_APPEND: int = 0x8"
        },
        {
          "functionName": "NewMultiFileLineReader(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "NewMultiFileLineReader(...string) (*mfreader.MultiFileLineReader, error)"
        },
        {
          "functionName": "Mv(${1:oldpathnewpath /*type: string*/})",
          "document": "把一个文件 move 到另一个地方，本质上执行 `os.Rename`",
          "definitionStr": "Mv(oldpath, newpath string) error  doc:Rename renames (moves) oldpath to newpath.If newpath already exists and is not a directory, Rename replaces it.OS-specific restrictions may apply when oldpath and newpath are in different directories.If there is an error, it will be of type *LinkError."
        },
        {
          "functionName": "MkdirAll(${1:path/*type: string*/})",
          "document": "强制创建个文件夹，如果没有父路径，则会强制创建，相当于执行 `mkdir -p [path]`",
          "definitionStr": "MkdirAll(string) error"
        },
        {
          "functionName": "Mkdir(${1:path/*type: string*/})",
          "document": "创建一个文件夹，如果无法创建，基本等同于 `mkdir [path]`，则会失败",
          "definitionStr": "Mkdir(string) error"
        },
        {
          "functionName": "Lstat(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "Lstat(string) (fs.FileInfo, error)"
        },
        {
          "functionName": "Ls(${1:i /*type: string*/})",
          "document": "查看当前路径下是否有其他文件",
          "definitionStr": "Ls(i string) []*utils.FileInfo"
        },
        {
          "functionName": "Join(${1:elem...})",
          "document": "拼接路径",
          "definitionStr": "Join(elem ...string) string  doc:Join joins any number of path elements into a single path,separating them with an OS specific Separator. Empty elementsare ignored. The result is Cleaned. However, if the argumentlist is empty or all its elements are empty, Join returnsan empty string.On Windows, the result will only be a UNC path if the firstnon-empty element is a UNC path."
        },
        {
          "functionName": "IsLink(${1:file /*type: string*/})",
          "document": "判断一个路径是否是一个文件链接/快捷方式",
          "definitionStr": "IsLink(file string) bool"
        },
        {
          "functionName": "IsFile(${1:path/*type: string*/})",
          "document": "判断文件是否存在",
          "definitionStr": "IsFile(string) bool"
        },
        {
          "functionName": "IsExisted(${1:path/*type: string*/})",
          "document": "判断路径文件是否存在",
          "definitionStr": "IsExisted(string) bool"
        },
        {
          "functionName": "IsDir(${1:file /*type: string*/})",
          "document": "判断路径是否是一个文件夹",
          "definitionStr": "IsDir(file string) bool"
        },
        {
          "functionName": "IsAbs(${1:path /*type: string*/})",
          "document": "判断路径是否是绝对路径名",
          "definitionStr": "IsAbs(path string) bool  doc:IsAbs reports whether the path is absolute."
        },
        {
          "functionName": "GetDirPath(${1:path /*type: string*/})",
          "document": "",
          "definitionStr": "GetDirPath(path string) string  doc:Dir returns all but the last element of path, typically the path's directory.After dropping the final element, Dir calls Clean on the path and trailingslashes are removed.If the path is empty, Dir returns \".\".If the path consists entirely of separators, Dir returns a single separator.The returned path does not end in a separator unless it is the root directory."
        },
        {
          "functionName": "Dir(${1:i /*type: string*/})",
          "document": "同 `file.Ls`",
          "definitionStr": "Dir(i string) []*utils.FileInfo"
        },
        {
          "functionName": "Create(${1:fileName/*type: string*/})",
          "document": "创建一个文件，当前用户下读写执行权限均打开",
          "definitionStr": "Create(string) (*yaklib._yakFile, error)"
        },
        {
          "functionName": "Cp(${1:srcdst /*type: string*/})",
          "document": "复制文件",
          "definitionStr": "Cp(src, dst string) error  doc:Copy the src file to dst. Any existing file will be overwritten and will notcopy file attributes."
        },
        {
          "functionName": "Cat(${1:fileName/*type: string*/})",
          "document": "把文件内容 `cat`到显示屏",
          "definitionStr": "Cat(string)"
        },
        {
          "functionName": "Abs(${1:path/*type: string*/})",
          "document": "把相对路径变为绝对路径，如果出错，原样返回",
          "definitionStr": "Abs(string) string"
        }
      ]
    },
    {
      "libName": "facades",
      "prefix": "facades.",
      "functions": [
        {
          "functionName": "rmiResourceAddr(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "rmiResourceAddr(string, string) facades.FacadeServerConfig"
        },
        {
          "functionName": "objectClass(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "objectClass(string) facades.FacadeServerConfig"
        },
        {
          "functionName": "ldapResourceAddr(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "ldapResourceAddr(string, string) facades.FacadeServerConfig"
        },
        {
          "functionName": "javaFactory(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "javaFactory(string) facades.FacadeServerConfig"
        },
        {
          "functionName": "javaCodeBase(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "javaCodeBase(string) facades.FacadeServerConfig"
        },
        {
          "functionName": "javaClassName(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "javaClassName(string) facades.FacadeServerConfig"
        },
        {
          "functionName": "httpResource(${1:v1/*type: string*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "httpResource(string, []uint8) facades.FacadeServerConfig"
        },
        {
          "functionName": "evilClassResource(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "evilClassResource(string, string) facades.FacadeServerConfig"
        },
        {
          "functionName": "Serve(${1:host /*type: string*/}, ${2:port /*type: int*/}, ${3:configs...})",
          "document": "",
          "definitionStr": "Serve(host string, port int, configs ...FacadeServerConfig) error"
        },
        {
          "functionName": "NewFacadeServer(${1:v1/*type: string*/}, ${2:v2/*type: int*/}, ${3:v3/*type ...facades.FacadeServerConfig*/})",
          "document": "",
          "definitionStr": "NewFacadeServer(string, int, ...facades.FacadeServerConfig) *facades.FacadeServer"
        }
      ]
    },
    {
      "libName": "exec",
      "prefix": "exec.",
      "functions": [
        {
          "functionName": "timeout(${1:timeout/*type: float64*/})",
          "document": "设置 SystemBatch 批量执行的 timeout",
          "definitionStr": "timeout(float64) yaklib.poolOpt"
        },
        {
          "functionName": "concurrent(${1:poolSize/*type: int*/})",
          "document": "设置 SystemBatch 批量执行的并发量",
          "definitionStr": "concurrent(int) yaklib.poolOpt"
        },
        {
          "functionName": "callback(${1:callbackFunc/*type: func (v1: string, v2: bytes) */})",
          "document": "设置 SystemBatch 批量执行的回调函数，命令执行结束后会执行的函数",
          "definitionStr": "callback(func(string, []uint8)) yaklib.poolOpt"
        },
        {
          "functionName": "WatchStdout(${1:i /*type: string*/}, ${2:timeout /*type: float64*/}, ${3:f /*type: func(raw []byte) bool*/})",
          "document": "",
          "definitionStr": "WatchStdout(i string, timeout float64, f func(raw []byte) bool) error"
        },
        {
          "functionName": "WatchStderr(${1:i /*type: string*/}, ${2:timeout /*type: float64*/}, ${3:f /*type: func(raw []byte) bool*/})",
          "document": "使用方法同 `exec.WatchOutput` 只是监控的输出是标准错误流",
          "definitionStr": "WatchStderr(i string, timeout float64, f func(raw []byte) bool) error"
        },
        {
          "functionName": "WatchOutput(${1:i /*type: string*/}, ${2:timeout /*type: float64*/}, ${3:f /*type: func(raw []byte) bool*/})",
          "document": "监控一个命令执行的中间结果，一般用于检测这个命令是否得到了想要的结果，或者获取一个命令的中间结果。该函数监控命令执行的标准输出流+标准错误流结果",
          "definitionStr": "WatchOutput(i string, timeout float64, f func(raw []byte) bool) error"
        },
        {
          "functionName": "SystemContext(${1:ctx /*type: context.Context*/}, ${2:i /*type: string*/})",
          "document": "带 context 控制生命周期的 `exec.System`",
          "definitionStr": "SystemContext(ctx context.Context, i string) ([]byte, error)  doc:执行系统命令"
        },
        {
          "functionName": "SystemBatch(${1:i /*type: string*/}, ${2:opts...})",
          "document": "批量执行系统命令，cmd 会经过 `fuzz.Strings` 进行变异",
          "definitionStr": "SystemBatch(i string, opts ...poolOpt)"
        },
        {
          "functionName": "System(${1:cmd/*type: string*/})",
          "document": "直接执行一条系统命令，把结果标准输出和标准错误流一起输出出来，bytes 数据流作为结果",
          "definitionStr": "System(string) ([]uint8, error)"
        },
        {
          "functionName": "CommandContext(${1:ctx /*type: context.Context*/}, ${2:s /*type: string*/})",
          "document": "同 `exec.Command` 函数，但是增加了 context 的配置，可以使用 context.Context 来解决生命周期管理的问题",
          "definitionStr": "CommandContext(ctx context.Context, s string) (*exec.Cmd, error)"
        },
        {
          "functionName": "Command(${1:cmd/*type: string*/})",
          "document": "最基础的，创建一个 `*exec.Cmd` 对象，可以执行，这个功能就是 Golang 原生的 `exec.Command`",
          "definitionStr": "Command(string) (*exec.Cmd, error)"
        },
        {
          "functionName": "CheckCrash(${1:c /*type: *exec.Cmd*/})",
          "document": "检查这个进程是否崩溃",
          "definitionStr": "CheckCrash(c *exec.Cmd) (bool, error)"
        }
      ]
    },
    {
      "libName": "env",
      "prefix": "env.",
      "functions": [
        {
          "functionName": "Set(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "设置环境变量",
          "definitionStr": "Set(string, string)"
        },
        {
          "functionName": "Get(${1:v1/*type: string*/})",
          "document": "获取环境变量的内容",
          "definitionStr": "Get(string) string"
        }
      ]
    },
    {
      "libName": "dyn",
      "prefix": "dyn.",
      "functions": [
        {
          "functionName": "recursive(${1:v1/*type: bool*/})",
          "document": "用于 `dyn.LoadVarFromFile` 函数的额外参数，递归加载文件夹内容，会解析文件夹以及自文件下面所有的内容。",
          "definitionStr": "recursive(bool) yak.yakEvalConfigOpt"
        },
        {
          "functionName": "params(${1:v1/*type: map[string]any*/})",
          "document": "给导入的脚本额外增加一些变量",
          "definitionStr": "params(map[string]any) yak.yakEvalConfigOpt"
        },
        {
          "functionName": "LoadVarFromFile(${1:fromModules/*type: string*/}, ${2:varName/*type: string*/}, ${3:params/*type ...dyn.param*/})",
          "document": "从一个文件/文件夹/模块中，批量导入一个对象，通常用于 exp/poc 编写的时候，需要批量导入一些模块的函数",
          "definitionStr": "LoadVarFromFile(string, string, ...yak.yakEvalConfigOpt) ([]*yak.yakVariable, error)"
        },
        {
          "functionName": "IsYakFunc(${1:i})",
          "document": "判断一个对象是不是可供 yak 调用的函数，类似 python 的 `callable`",
          "definitionStr": "IsYakFunc(i any) bool"
        },
        {
          "functionName": "Import(${1:file /*type: string*/}, ${2:exportsName /*type: string*/})",
          "document": "",
          "definitionStr": "Import(file string, exportsName string) (any, error)"
        },
        {
          "functionName": "Eval(${1:i})",
          "document": "独立上下文执行一段新的 yak 代码",
          "definitionStr": "Eval(i any) error"
        }
      ]
    },
    {
      "libName": "dns",
      "prefix": "dns.",
      "functions": [
        {
          "functionName": "timeout(${1:v1/*type: float64*/})",
          "document": "设置 timeout",
          "definitionStr": "timeout(float64) yaklib._dnsConfigOpt"
        },
        {
          "functionName": "dnsServers(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "dnsServers(...string) yaklib._dnsConfigOpt"
        },
        {
          "functionName": "QueryTXT(${1:target /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "QueryTXT(target string, opts ..._dnsConfigOpt) []string"
        },
        {
          "functionName": "QueryNS(${1:target /*type: string*/}, ${2:opts...})",
          "document": "查询 NameServers",
          "definitionStr": "QueryNS(target string, opts ..._dnsConfigOpt) []string"
        },
        {
          "functionName": "QueryIPAll(${1:target /*type: string*/}, ${2:opts...})",
          "document": "查询一个域名的所有 IP",
          "definitionStr": "QueryIPAll(target string, opts ..._dnsConfigOpt) []string"
        },
        {
          "functionName": "QueryIP(${1:target /*type: string*/}, ${2:opts...})",
          "document": "新增查询域名 IP 的接口",
          "definitionStr": "QueryIP(target string, opts ..._dnsConfigOpt) string"
        },
        {
          "functionName": "QuertAxfr(${1:target /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "QuertAxfr(target string, opts ..._dnsConfigOpt) []string"
        }
      ]
    },
    {
      "libName": "dictutil",
      "prefix": "dictutil.",
      "functions": [
        {
          "functionName": "Mix(${1:raw...})",
          "document": "混合多个 list，进行笛卡尔乘（直积）一般用于字典的混合",
          "definitionStr": "Mix(raw ...any) (chan []string, error)"
        }
      ]
    },
    {
      "libName": "db",
      "prefix": "db.",
      "functions": [
        {
          "functionName": "YieldYakScriptAll()",
          "document": "",
          "definitionStr": "YieldYakScriptAll() chan *yakit.YakScript"
        },
        {
          "functionName": "YAKIT_PLUGIN_TYPE_YAK",
          "document": "db.YAKIT_PLUGIN_TYPE_YAK: string",
          "definitionStr": "db.YAKIT_PLUGIN_TYPE_YAK: string"
        },
        {
          "functionName": "YAKIT_PLUGIN_TYPE_PORTSCAN",
          "document": "db.YAKIT_PLUGIN_TYPE_PORTSCAN: string",
          "definitionStr": "db.YAKIT_PLUGIN_TYPE_PORTSCAN: string"
        },
        {
          "functionName": "YAKIT_PLUGIN_TYPE_PACKET_HACK",
          "document": "db.YAKIT_PLUGIN_TYPE_PACKET_HACK: string",
          "definitionStr": "db.YAKIT_PLUGIN_TYPE_PACKET_HACK: string"
        },
        {
          "functionName": "YAKIT_PLUGIN_TYPE_NUCLEI",
          "document": "db.YAKIT_PLUGIN_TYPE_NUCLEI: string",
          "definitionStr": "db.YAKIT_PLUGIN_TYPE_NUCLEI: string"
        },
        {
          "functionName": "YAKIT_PLUGIN_TYPE_MITM",
          "document": "db.YAKIT_PLUGIN_TYPE_MITM: string",
          "definitionStr": "db.YAKIT_PLUGIN_TYPE_MITM: string"
        },
        {
          "functionName": "YAKIT_PLUGIN_TYPE_CODEC",
          "document": "db.YAKIT_PLUGIN_TYPE_CODEC: string",
          "definitionStr": "db.YAKIT_PLUGIN_TYPE_CODEC: string"
        },
        {
          "functionName": "SetProjectKey(${1:v1/*type: any*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func db.SetProjectKey(v1: any, v2: any) return (r0: error)"
        },
        {
          "functionName": "SetKey(${1:key/*type: any*/}, ${2:value/*type: any*/})",
          "document": "设置持久化 Key",
          "definitionStr": "SetKey(any, any) error"
        },
        {
          "functionName": "SaveYakitPlugin(${1:scriptName /*type: string*/}, ${2:typeStr /*type: string*/}, ${3:content})",
          "document": "",
          "definitionStr": "SaveYakitPlugin(scriptName string, typeStr string, content any) error"
        },
        {
          "functionName": "SaveYakitMenuItemByBatchExecuteConfig(${1:raw})",
          "document": "",
          "definitionStr": "SaveYakitMenuItemByBatchExecuteConfig(raw any) error"
        },
        {
          "functionName": "SavePortFromResult(${1:t})",
          "document": "",
          "definitionStr": "SavePortFromResult(t any) error"
        },
        {
          "functionName": "SavePayloadByFile(${1:group /*type: string*/}, ${2:fileName /*type: string*/})",
          "document": "保存 Payload 到文件",
          "definitionStr": "SavePayloadByFile(group string, fileName string) error"
        },
        {
          "functionName": "SavePayload(${1:group /*type: string*/}, ${2:payloads /*type: []string*/})",
          "document": "保存 Payload 到一个组",
          "definitionStr": "SavePayload(group string, payloads []string) error"
        },
        {
          "functionName": "SaveHTTPFlowFromNativeWithType(${1:url /*type: string*/}, ${2:req /*type: *http.Request*/}, ${3:rsp /*type: *http.Response*/}, ${4:typeStr /*type: string*/})",
          "document": "",
          "definitionStr": "SaveHTTPFlowFromNativeWithType(url string, req *http.Request, rsp *http.Response, typeStr string) error"
        },
        {
          "functionName": "SaveHTTPFlowFromNative(${1:url /*type: string*/}, ${2:req /*type: *http.Request*/}, ${3:rsp /*type: *http.Response*/})",
          "document": "从原始对象中保存 HTTP 资产",
          "definitionStr": "SaveHTTPFlowFromNative(url string, req *http.Request, rsp *http.Response) error"
        },
        {
          "functionName": "SaveDomain(${1:domain /*type: string*/}, ${2:ip...})",
          "document": "保存域名",
          "definitionStr": "SaveDomain(domain string, ip ...string) error"
        },
        {
          "functionName": "QueryUrlsByKeyword(${1:k /*type: string*/})",
          "document": "根据关键字查询 URL",
          "definitionStr": "QueryUrlsByKeyword(k string) chan string"
        },
        {
          "functionName": "QueryUrlsAll()",
          "document": "查询所有可用 URL",
          "definitionStr": "QueryUrlsAll() chan string"
        },
        {
          "functionName": "QueryPortsByUpdatedAt(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "func db.QueryPortsByUpdatedAt(v1: int64) return (r0: chan *yakit.Port, r1: error)"
        },
        {
          "functionName": "QueryPortsByTaskName(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func db.QueryPortsByTaskName(v1: string) return (r0: chan *yakit.Port, r1: error)"
        },
        {
          "functionName": "QueryPayloadGroups(${1:group /*type: string*/})",
          "document": "",
          "definitionStr": "QueryPayloadGroups(group string) []string"
        },
        {
          "functionName": "QueryIPForIPS(${1:ip /*type: string*/})",
          "document": "根据 IP 查询运营商",
          "definitionStr": "QueryIPForIPS(ip string) (*geo.ISP, error)"
        },
        {
          "functionName": "QueryIPCity(${1:ip /*type: string*/})",
          "document": "查询 IP 对应的城市位置",
          "definitionStr": "QueryIPCity(ip string) (*geo.City, error)"
        },
        {
          "functionName": "QueryHostsByDomain(${1:keyword /*type: string*/})",
          "document": "根据域名查询 Hosts 资产",
          "definitionStr": "QueryHostsByDomain(keyword string) (chan *yakit.Host, error)"
        },
        {
          "functionName": "QueryHostPortByNetwork(${1:network /*type: string*/})",
          "document": "根据网络查询 Host:Port",
          "definitionStr": "QueryHostPortByNetwork(network string) chan string"
        },
        {
          "functionName": "QueryHostPortByKeyword(${1:network /*type: string*/})",
          "document": "通过关键字查询 HostPort",
          "definitionStr": "QueryHostPortByKeyword(network string) (chan *yakit.Host, error)"
        },
        {
          "functionName": "QueryHTTPFlowsByKeyword(${1:k /*type: string*/})",
          "document": "根据关键字插件 HTTP 流对象",
          "definitionStr": "QueryHTTPFlowsByKeyword(k string) chan *yakit.HTTPFlow"
        },
        {
          "functionName": "QueryHTTPFlowsByID(${1:id...})",
          "document": "",
          "definitionStr": "QueryHTTPFlowsByID(id ...int64) chan *yakit.HTTPFlow"
        },
        {
          "functionName": "QueryHTTPFlowsAll()",
          "document": "查询所有的 HTTP 流",
          "definitionStr": "QueryHTTPFlowsAll() chan *yakit.HTTPFlow"
        },
        {
          "functionName": "QueryDomainsByTitle(${1:title /*type: string*/})",
          "document": "根据网站名查询域名",
          "definitionStr": "QueryDomainsByTitle(title string) (chan *yakit.Domain, error)"
        },
        {
          "functionName": "QueryDomainsByNetwork(${1:network /*type: string*/})",
          "document": "根据解析到的网段查询域名资产",
          "definitionStr": "QueryDomainsByNetwork(network string) (chan *yakit.Domain, error)"
        },
        {
          "functionName": "QueryDomainsByDomainKeyword(${1:keyword /*type: string*/})",
          "document": "根据关键字查询域名资产",
          "definitionStr": "QueryDomainsByDomainKeyword(keyword string) (chan *yakit.Domain, error)"
        },
        {
          "functionName": "GetYakitPluginByName(${1:name /*type: string*/})",
          "document": "",
          "definitionStr": "GetYakitPluginByName(name string) (*yakit.YakScript, error)"
        },
        {
          "functionName": "GetProjectKey(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func db.GetProjectKey(v1: any) return (r0: string)"
        },
        {
          "functionName": "GetKey(${1:key/*type: any*/})",
          "document": "获取持久化 Key",
          "definitionStr": "GetKey(any) string"
        },
        {
          "functionName": "DownloadGeoIP()",
          "document": "下载并自动解压 GeoIP",
          "definitionStr": "DownloadGeoIP() error"
        },
        {
          "functionName": "DeleteYakitMenuItemAll()",
          "document": "",
          "definitionStr": "DeleteYakitMenuItemAll() error"
        },
        {
          "functionName": "DeleteYakScriptByName(${1:i /*type: string*/})",
          "document": "",
          "definitionStr": "DeleteYakScriptByName(i string) error"
        },
        {
          "functionName": "DeletePayloadByGroup(${1:group /*type: string*/})",
          "document": "删除 Payload",
          "definitionStr": "DeletePayloadByGroup(group string) error"
        },
        {
          "functionName": "DelKey(${1:v1/*type: any*/})",
          "document": "删除 Key 对应的值(数据库中)",
          "definitionStr": "DelKey(any)"
        },
        {
          "functionName": "CreateTemporaryYakScript(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "func db.CreateTemporaryYakScript(v1: string, v2: string) return (r0: string, r1: error)"
        }
      ]
    },
    {
      "libName": "cwe",
      "prefix": "cwe.",
      "functions": [
        {
          "functionName": "Get(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func cwe.Get(v1: any) return (r0: *cveresources.CWE)"
        }
      ]
    },
    {
      "libName": "cve",
      "prefix": "cve.",
      "functions": [
        {
          "functionName": "vendor(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "vendor(string) cveAction.CVEOption"
        },
        {
          "functionName": "severity(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "severity(string) cveAction.CVEOption"
        },
        {
          "functionName": "score(${1:v1/*type: float64*/})",
          "document": "",
          "definitionStr": "score(float64) cveAction.CVEOption"
        },
        {
          "functionName": "product(${1:v1/*type: string*/}, ${2:v2/*type ...string*/})",
          "document": "",
          "definitionStr": "product(string, ...string) cveAction.CVEOption"
        },
        {
          "functionName": "parseToCpe(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func cve.parseToCpe(v1: string) return (r0: *webfingerprint.CPE, r1: error)"
        },
        {
          "functionName": "cwe(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "cwe(string) cveAction.CVEOption"
        },
        {
          "functionName": "cve(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "cve(string) cveAction.CVEOption"
        },
        {
          "functionName": "cpe(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "cpe(string) cveAction.CVEOption"
        },
        {
          "functionName": "before(${1:v1/*type: int*/}, ${2:v2/*type ...int*/})",
          "document": "",
          "definitionStr": "before(int, ...int) cveAction.CVEOption"
        },
        {
          "functionName": "after(${1:v1/*type: int*/}, ${2:v2/*type ...int*/})",
          "document": "",
          "definitionStr": "after(int, ...int) cveAction.CVEOption"
        },
        {
          "functionName": "QueryEx(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "func cve.QueryEx(v1 ...any) return (r0: chan *cveresources.CVE)"
        },
        {
          "functionName": "Query(${1:DbPath /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "Query(DbPath string, opts ...CVEOption) ([]cmd.CVERes, int)  doc:Query 查询CVE"
        },
        {
          "functionName": "NewStatistics(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func cve.NewStatistics(v1: string) return (r0: *cve.Statistics)"
        },
        {
          "functionName": "LoadCVE(${1:fileDirDbPath /*type: string*/})",
          "document": "",
          "definitionStr": "LoadCVE(fileDir, DbPath string)  doc:LoadCVE 从本地的CVE json数据加载构造数据库"
        },
        {
          "functionName": "GetCVE(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func cve.GetCVE(v1: string) return (r0: *cveresources.CVE)"
        },
        {
          "functionName": "Download(${1:dir /*type: string*/})",
          "document": "",
          "definitionStr": "Download(dir string)  doc:DownLoad 从NVD下载CVE json数据到本地"
        }
      ]
    },
    {
      "libName": "csrf",
      "prefix": "csrf.",
      "functions": [
        {
          "functionName": "multipartDefaultValue(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "multipartDefaultValue(bool) yaklib.csrfConfig"
        },
        {
          "functionName": "https(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func csrf.https(v1: bool) return (r0: func csrfConfig(v1: *yaklib._csrfConfig) )"
        },
        {
          "functionName": "Generate(${1:raw}, ${2:opts...})",
          "document": "",
          "definitionStr": "Generate(raw any, opts ...csrfConfig) (string, error)"
        }
      ]
    },
    {
      "libName": "crawlerx",
      "prefix": "crawlerx.",
      "functions": [
        {
          "functionName": "whitelist(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func crawlerx.whitelist(v1 ...string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "stealth(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "func crawlerx.stealth(v1: bool) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "sensitiveWords(${1:v1/*type: []string*/})",
          "document": "",
          "definitionStr": "func crawlerx.sensitiveWords(v1: []string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "scanRepeatLevel(${1:v1/*type: crawlerx.repeatLevel*/})",
          "document": "",
          "definitionStr": "func crawlerx.scanRepeatLevel(v1: crawlerx.repeatLevel) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "scanRangeLevel(${1:v1/*type: crawlerx.scanRangeLevel*/})",
          "document": "",
          "definitionStr": "func crawlerx.scanRangeLevel(v1: crawlerx.scanRangeLevel) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "rawHeaders(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func crawlerx.rawHeaders(v1: string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "rawCookie(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func crawlerx.rawCookie(v1: string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "pageTimeout(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func crawlerx.pageTimeout(v1: int) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "maxUrl(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "maxUrl(int) core.ConfigOpt"
        },
        {
          "functionName": "maxDepth(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "maxDepth(int) core.ConfigOpt"
        },
        {
          "functionName": "localStorage(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "func crawlerx.localStorage(v1: map[string]string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "leakless(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func crawlerx.leakless(v1: string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "invalidSuffix(${1:v1/*type: []string*/})",
          "document": "",
          "definitionStr": "func crawlerx.invalidSuffix(v1: []string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "ignoreQueryName(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func crawlerx.ignoreQueryName(v1 ...string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "headers(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "headers(map[string]string) core.ConfigOpt"
        },
        {
          "functionName": "fullTimeout(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "fullTimeout(int) core.ConfigOpt"
        },
        {
          "functionName": "formFill(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "formFill(string, string) core.ConfigOpt"
        },
        {
          "functionName": "fileInput(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "func crawlerx.fileInput(v1: map[string]string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "extraWaitLoadTime(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "func crawlerx.extraWaitLoadTime(v1: int) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "cookies(${1:v1/*type: map[string]string*/})",
          "document": "",
          "definitionStr": "cookies(string, map[string]string) core.ConfigOpt"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "concurrent(int) core.ConfigOpt"
        },
        {
          "functionName": "browserInfo(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func crawlerx.browserInfo(v1: string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "blacklist(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func crawlerx.blacklist(v1 ...string) return (r0: func ConfigOpt(v1: *crawlerx.Config) )"
        },
        {
          "functionName": "UnLimitRepeat",
          "document": "crawlerx.UnLimitRepeat: crawlerx.repeatLevel",
          "definitionStr": "crawlerx.UnLimitRepeat: crawlerx.repeatLevel"
        },
        {
          "functionName": "SubMenuScan",
          "document": "crawlerx.SubMenuScan: crawlerx.scanRangeLevel",
          "definitionStr": "crawlerx.SubMenuScan: crawlerx.scanRangeLevel"
        },
        {
          "functionName": "StartCrawler(${1:url /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "StartCrawler(url string, opts ...core.ConfigOpt) (chan core.ReqInfo, error)"
        },
        {
          "functionName": "MediumRepeatLevel",
          "document": "crawlerx.MediumRepeatLevel: crawlerx.repeatLevel",
          "definitionStr": "crawlerx.MediumRepeatLevel: crawlerx.repeatLevel"
        },
        {
          "functionName": "LowRepeatLevel",
          "document": "crawlerx.LowRepeatLevel: crawlerx.repeatLevel",
          "definitionStr": "crawlerx.LowRepeatLevel: crawlerx.repeatLevel"
        },
        {
          "functionName": "HighRepeatLevel",
          "document": "crawlerx.HighRepeatLevel: crawlerx.repeatLevel",
          "definitionStr": "crawlerx.HighRepeatLevel: crawlerx.repeatLevel"
        },
        {
          "functionName": "ExtremeRepeatLevel",
          "document": "crawlerx.ExtremeRepeatLevel: crawlerx.repeatLevel",
          "definitionStr": "crawlerx.ExtremeRepeatLevel: crawlerx.repeatLevel"
        },
        {
          "functionName": "AllDomainScan",
          "document": "crawlerx.AllDomainScan: crawlerx.scanRangeLevel",
          "definitionStr": "crawlerx.AllDomainScan: crawlerx.scanRangeLevel"
        }
      ]
    },
    {
      "libName": "crawler",
      "prefix": "crawler.",
      "functions": [
        {
          "functionName": "userAgent(${1:userAgent/*type: string*/})",
          "document": "设置 useragent",
          "definitionStr": "userAgent(string) crawler.configOpt"
        },
        {
          "functionName": "urlRegexpInclude(${1:urlRegexp/*type: string*/})",
          "document": "想要爬 url 的白名单，用于定向爬虫",
          "definitionStr": "urlRegexpInclude(string) crawler.configOpt"
        },
        {
          "functionName": "urlRegexpExclude(${1:urlRegexp/*type: string*/})",
          "document": "禁止爬取的 url 正则，用于排除一些 login delete 等状况",
          "definitionStr": "urlRegexpExclude(string) crawler.configOpt"
        },
        {
          "functionName": "urlExtractor(${1:v1/*type: func (v1: *crawler.Req) return([]any) */})",
          "document": "",
          "definitionStr": "urlExtractor(func(*crawler.Req) []any) crawler.configOpt"
        },
        {
          "functionName": "ua(${1:userAgent/*type: string*/})",
          "document": "设置 useragent",
          "definitionStr": "ua(string) crawler.configOpt"
        },
        {
          "functionName": "timeout(${1:timeout/*type: float64*/})",
          "document": "等效于 `crawler.connectTimeout`",
          "definitionStr": "timeout(float64) crawler.configOpt"
        },
        {
          "functionName": "responseTimeout(${1:seconds/*type: float64*/})",
          "document": "响应超时时间",
          "definitionStr": "responseTimeout(float64) crawler.configOpt"
        },
        {
          "functionName": "proxy(${1:proxyUrl/*type ...string*/})",
          "document": "为爬虫设置代理，如果代理失效，爬虫则请求失败",
          "definitionStr": "proxy(...string) crawler.configOpt"
        },
        {
          "functionName": "maxUrls(${1:limit/*type: int*/})",
          "document": "最多获取到多少个 URL 就停止爬虫",
          "definitionStr": "maxUrls(int) crawler.configOpt"
        },
        {
          "functionName": "maxRetry(${1:limit/*type: int*/})",
          "document": "最大重试次数（如果失败了就会重试）",
          "definitionStr": "maxRetry(int) crawler.configOpt"
        },
        {
          "functionName": "maxRequest(${1:limit/*type: int*/})",
          "document": "设置爬虫最大发出的请求数量，默认为 1000",
          "definitionStr": "maxRequest(int) crawler.configOpt"
        },
        {
          "functionName": "maxRedirect(${1:limit/*type: int*/})",
          "document": "设置最大重定向次数，默认为5",
          "definitionStr": "maxRedirect(int) crawler.configOpt"
        },
        {
          "functionName": "maxDepth(${1:depth/*type: int*/})",
          "document": "设置爬虫的最大深度，默认为5",
          "definitionStr": "maxDepth(int) crawler.configOpt"
        },
        {
          "functionName": "header(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置爬虫的自定义 Header",
          "definitionStr": "header(string, string) crawler.configOpt"
        },
        {
          "functionName": "forbiddenFromParent(${1:allow/*type: bool*/})",
          "document": "禁止扫描 url 的父路径",
          "definitionStr": "forbiddenFromParent(bool) crawler.configOpt"
        },
        {
          "functionName": "domainInclude(${1:includedDomain/*type: string*/})",
          "document": "想要扫描的域名，域名白名单，支持 glob 语法",
          "definitionStr": "domainInclude(string) crawler.configOpt"
        },
        {
          "functionName": "domainExclude(${1:excludedDomain/*type: string*/})",
          "document": "不扫描的域名，使用 glob 语法",
          "definitionStr": "domainExclude(string) crawler.configOpt"
        },
        {
          "functionName": "disallowSuffix(${1:v1/*type: []string*/})",
          "document": "",
          "definitionStr": "disallowSuffix([]string) crawler.configOpt"
        },
        {
          "functionName": "cookie(${1:key/*type: string*/}, ${2:value/*type: string*/})",
          "document": "设置 Cookie",
          "definitionStr": "cookie(string, string) crawler.configOpt"
        },
        {
          "functionName": "connectTimeout(${1:seconds/*type: float64*/})",
          "document": "每一次进行 HTTP 连接的超时时间",
          "definitionStr": "connectTimeout(float64) crawler.configOpt"
        },
        {
          "functionName": "concurrent(${1:maxConcurrent/*type: int*/})",
          "document": "设置爬虫并发请求数",
          "definitionStr": "concurrent(int) crawler.configOpt"
        },
        {
          "functionName": "bodySize(${1:size/*type: int*/})",
          "document": "想要设置每一个 body 最大获取多少页面大小，bytes 的大小，默认为 1024 * 1024 * 10",
          "definitionStr": "bodySize(int) crawler.configOpt"
        },
        {
          "functionName": "basicAuth(${1:username/*type: string*/}, ${2:password/*type: string*/})",
          "document": "设置爬虫的基础认证",
          "definitionStr": "basicAuth(string, string) crawler.configOpt"
        },
        {
          "functionName": "autoLogin(${1:username/*type: string*/}, ${2:password/*type: string*/}, ${3:v3/*type ...string*/})",
          "document": "自动登录功能，支持 DVWA 的标准登陆功能",
          "definitionStr": "autoLogin(string, string, ...string) crawler.configOpt"
        },
        {
          "functionName": "Start(${1:v1/*type: string*/}, ${2:v2/*type ...crawler.configOpt*/})",
          "document": "",
          "definitionStr": "Start(string, ...crawler.configOpt) (chan *crawler.Req, error)"
        },
        {
          "functionName": "RequestsFromFlow(${1:isHttps /*type: bool*/}, ${2:reqBytesrspBytes /*type: []byte*/})",
          "document": "从一个请求中提取可能可以用于扫描的额外请求",
          "definitionStr": "RequestsFromFlow(isHttps bool, reqBytes, rspBytes []byte) ([][]byte, error)"
        }
      ]
    },
    {
      "libName": "context",
      "prefix": "context.",
      "functions": [
        {
          "functionName": "WithValue(${1:ctx/*type: context.Context*/}, ${2:key/*type: any*/}, ${3:value/*type: any*/})",
          "document": "为上下文绑定一个 kv 对",
          "definitionStr": "WithValue(context.Context, any, any) context.Context"
        },
        {
          "functionName": "WithTimeout(${1:parent /*type: Context*/}, ${2:timeout /*type: time.Duration*/})",
          "document": "给 context 带一个超时间隔，如果超时就自动取消",
          "definitionStr": "WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)  doc:WithTimeout returns WithDeadline(parent, time.Now().Add(timeout)).Canceling this context releases resources associated with it, so code shouldcall cancel as soon as the operations running in this Context complete:\tfunc slowOperationWithTimeout(ctx context.Context) (Result, error) {\t\tctx, cancel := context.WithTimeout(ctx, 100*time.Millisecond)\t\tdefer cancel()  // releases resources if slowOperation completes before timeout elapses\t\treturn slowOperation(ctx)\t}"
        },
        {
          "functionName": "WithDeadline(${1:parent /*type: Context*/}, ${2:d /*type: time.Time*/})",
          "document": "给上下文增加一个 ddl",
          "definitionStr": "WithDeadline(parent Context, d time.Time) (Context, CancelFunc)  doc:WithDeadline returns a copy of the parent context with the deadline adjustedto be no later than d. If the parent's deadline is already earlier than d,WithDeadline(parent, d) is semantically equivalent to parent. The returnedcontext's Done channel is closed when the deadline expires, when the returnedcancel function is called, or when the parent context's Done channel isclosed, whichever happens first.Canceling this context releases resources associated with it, so code shouldcall cancel as soon as the operations running in this Context complete."
        },
        {
          "functionName": "WithCancel(${1:parent /*type: Context*/})",
          "document": "给 context 增加一个 cancel 手动按钮",
          "definitionStr": "WithCancel(parent Context) (ctx Context, cancel CancelFunc)  doc:WithCancel returns a copy of parent with a new Done channel. The returnedcontext's Done channel is closed when the returned cancel function is calledor when the parent context's Done channel is closed, whichever happens first.Canceling this context releases resources associated with it, so code shouldcall cancel as soon as the operations running in this Context complete."
        },
        {
          "functionName": "Seconds(${1:d /*type: float64*/})",
          "document": "生成一个几秒结束的 context",
          "definitionStr": "Seconds(d float64) context.Context"
        },
        {
          "functionName": "New()",
          "document": "同 `context.Background()`",
          "definitionStr": "New() context.Context"
        },
        {
          "functionName": "Background()",
          "document": "创建一个基础的 `context.Context`",
          "definitionStr": "Background() context.Context"
        }
      ]
    },
    {
      "libName": "codec",
      "prefix": "codec.",
      "functions": [
        {
          "functionName": "ZeroUnPadding(${1:originData /*type: []byte*/})",
          "document": "移除 0 填充的末尾",
          "definitionStr": "ZeroUnPadding(originData []byte) []byte"
        },
        {
          "functionName": "ZeroPadding(${1:origin /*type: []byte*/}, ${2:blockSize /*type: int*/})",
          "document": "零填充",
          "definitionStr": "ZeroPadding(origin []byte, blockSize int) []byte"
        },
        {
          "functionName": "UnicodeEncode(${1:i /*type: string*/})",
          "document": "",
          "definitionStr": "UnicodeEncode(i string) string"
        },
        {
          "functionName": "UnicodeDecode(${1:i /*type: string*/})",
          "document": "",
          "definitionStr": "UnicodeDecode(i string) string"
        },
        {
          "functionName": "UnescapeQueryUrl(${1:s /*type: string*/})",
          "document": "作为 url.Query 进行 URL 解码",
          "definitionStr": "UnescapeQueryUrl(s string) (string, error)  doc:QueryUnescape does the inverse transformation of QueryEscape,converting each 3-byte encoded substring of the form \"%AB\" into thehex-decoded byte 0xAB.It returns an error if any % is not followed by two hexadecimaldigits."
        },
        {
          "functionName": "UnescapePathUrl(${1:s /*type: string*/})",
          "document": "作为 url.Path 进行 URL 解码",
          "definitionStr": "UnescapePathUrl(s string) (string, error)  doc:PathUnescape does the inverse transformation of PathEscape,converting each 3-byte encoded substring of the form \"%AB\" into thehex-decoded byte 0xAB. It returns an error if any % is not followedby two hexadecimal digits.PathUnescape is identical to QueryUnescape except that it does notunescape '+' to ' ' (space)."
        },
        {
          "functionName": "UTF8ToHZGB2312(${1:s /*type: []byte*/})",
          "document": "",
          "definitionStr": "UTF8ToHZGB2312(s []byte) ([]byte, error)"
        },
        {
          "functionName": "UTF8ToGBK(${1:s /*type: []byte*/})",
          "document": "",
          "definitionStr": "UTF8ToGBK(s []byte) ([]byte, error)"
        },
        {
          "functionName": "UTF8ToGB18030(${1:s /*type: []byte*/})",
          "document": "",
          "definitionStr": "UTF8ToGB18030(s []byte) ([]byte, error)"
        },
        {
          "functionName": "TripleDESEncrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.TripleDESEncrypt(v1: bytes, v2: bytes, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "TripleDESECBEncrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.TripleDESECBEncrypt(v1: bytes, v2: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "TripleDESECBDecrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.TripleDESECBDecrypt(v1: bytes, v2: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "TripleDESDecrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.TripleDESDecrypt(v1: bytes, v2: bytes, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "TripleDESCBCEncrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.TripleDESCBCEncrypt(v1: bytes, v2: bytes, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "TripleDESCBCDecrypt(${1:v1/*type: bytes*/}, ${2:v2/*type: bytes*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.TripleDESCBCDecrypt(v1: bytes, v2: bytes, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "StrconvUnquote(${1:s /*type: string*/})",
          "document": "",
          "definitionStr": "StrconvUnquote(s string) (string, error)  doc:Unquote interprets s as a single-quoted, double-quoted,or backquoted Go string literal, returning the string valuethat s quotes.  (If s is single-quoted, it would be a Gocharacter literal; Unquote returns the correspondingone-character string.)"
        },
        {
          "functionName": "StrconvQuote(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "StrconvQuote(string) string"
        },
        {
          "functionName": "Sm4OFBEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "SM4 OBF 加密",
          "definitionStr": "Sm4OFBEncrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4OFBDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "SM4 OFB 解密",
          "definitionStr": "Sm4OFBDecrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4GCMEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "SM4 GCM 加密",
          "definitionStr": "Sm4GCMEncrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4GCMDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 gcm 解密",
          "definitionStr": "Sm4GCMDecrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4ECBEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm4ECBEncrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4ECBDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm4ECBDecrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4EBCEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 EBC 加密",
          "definitionStr": "Sm4EBCEncrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4EBCDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 EBC 解密",
          "definitionStr": "Sm4EBCDecrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4CFBEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 cfb 加密",
          "definitionStr": "Sm4CFBEncrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4CFBDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 CFB 解密",
          "definitionStr": "Sm4CFBDecrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4CBCEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 cbc 加密",
          "definitionStr": "Sm4CBCEncrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm4CBCDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:iv /*type: []byte*/})",
          "document": "国密4 CBC 解密",
          "definitionStr": "Sm4CBCDecrypt(key []byte, data any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm3(${1:raw})",
          "document": "SM3 计算 Hash",
          "definitionStr": "Sm3(raw any) []byte"
        },
        {
          "functionName": "Sm2GeneratePemKeyPair()",
          "document": "",
          "definitionStr": "Sm2GeneratePemKeyPair() ([]byte, []byte, error)"
        },
        {
          "functionName": "Sm2GenerateHexKeyPair()",
          "document": "",
          "definitionStr": "Sm2GenerateHexKeyPair() ([]byte, []byte, error)"
        },
        {
          "functionName": "Sm2EncryptC1C3C2(${1:pubKey /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2EncryptC1C3C2(pubKey []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2EncryptC1C2C3(${1:pubKey /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2EncryptC1C2C3(pubKey []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2EncryptAsn1(${1:pubKey /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2EncryptAsn1(pubKey []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2DecryptC1C3C2WithPassword(${1:priKey /*type: []byte*/}, ${2:data /*type: []byte*/}, ${3:password /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2DecryptC1C3C2WithPassword(priKey []byte, data []byte, password []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2DecryptC1C3C2(${1:priKey /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2DecryptC1C3C2(priKey []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2DecryptC1C2C3WithPassword(${1:priKey /*type: []byte*/}, ${2:data /*type: []byte*/}, ${3:password /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2DecryptC1C2C3WithPassword(priKey []byte, data []byte, password []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2DecryptC1C2C3(${1:priKey /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2DecryptC1C2C3(priKey []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2DecryptAsn1WithPassword(${1:priKey /*type: []byte*/}, ${2:data /*type: []byte*/}, ${3:password /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2DecryptAsn1WithPassword(priKey []byte, data []byte, password []byte) ([]byte, error)"
        },
        {
          "functionName": "Sm2DecryptAsn1(${1:priKey /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "Sm2DecryptAsn1(priKey []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "Sha512(${1:i})",
          "document": "",
          "definitionStr": "Sha512(i any) string"
        },
        {
          "functionName": "Sha384(${1:i})",
          "document": "",
          "definitionStr": "Sha384(i any) string"
        },
        {
          "functionName": "Sha256(${1:i})",
          "document": "",
          "definitionStr": "Sha256(i any) string"
        },
        {
          "functionName": "Sha224(${1:i})",
          "document": "",
          "definitionStr": "Sha224(i any) string"
        },
        {
          "functionName": "Sha1(${1:i})",
          "document": "计算 sha1 hash",
          "definitionStr": "Sha1(i any) string"
        },
        {
          "functionName": "RSAEncryptWithPKCS1v15(${1:pemBytes /*type: []byte*/}, ${2:data})",
          "document": "",
          "definitionStr": "RSAEncryptWithPKCS1v15(pemBytes []byte, data any) ([]byte, error)"
        },
        {
          "functionName": "RSAEncryptWithOAEP(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.RSAEncryptWithOAEP(v1: bytes, v2: any) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "RSADecryptWithPKCS1v15(${1:pemPriBytes /*type: []byte*/}, ${2:data})",
          "document": "",
          "definitionStr": "RSADecryptWithPKCS1v15(pemPriBytes []byte, data any) ([]byte, error)"
        },
        {
          "functionName": "RSADecryptWithOAEP(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.RSADecryptWithOAEP(v1: bytes, v2: any) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "RC4Encrypt(${1:cipherKey /*type: []byte*/}, ${2:plainText /*type: []byte*/})",
          "document": "",
          "definitionStr": "RC4Encrypt(cipherKey []byte, plainText []byte) ([]byte, error)"
        },
        {
          "functionName": "RC4Decrypt(${1:cipherKey /*type: []byte*/}, ${2:cipherText /*type: []byte*/})",
          "document": "",
          "definitionStr": "RC4Decrypt(cipherKey []byte, cipherText []byte) ([]byte, error)"
        },
        {
          "functionName": "PKCS7UnPadding(${1:src /*type: []byte*/})",
          "document": "pkcs7 解码",
          "definitionStr": "PKCS7UnPadding(src []byte) []byte"
        },
        {
          "functionName": "PKCS7Padding(${1:src /*type: []byte*/})",
          "document": "pkcs7 编码",
          "definitionStr": "PKCS7Padding(src []byte) []byte"
        },
        {
          "functionName": "PKCS5UnPadding(${1:origData /*type: []byte*/})",
          "document": "pkcs5 解码",
          "definitionStr": "PKCS5UnPadding(origData []byte) (result []byte)"
        },
        {
          "functionName": "PKCS5Padding(${1:ciphertext /*type: []byte*/}, ${2:blockSize...})",
          "document": "pkcs5 填充",
          "definitionStr": "PKCS5Padding(ciphertext []byte, blockSize ...int) []byte"
        },
        {
          "functionName": "Md5(${1:i})",
          "document": "计算 md5 hash",
          "definitionStr": "Md5(i any) string"
        },
        {
          "functionName": "MMH3Hash32(${1:i})",
          "document": "",
          "definitionStr": "MMH3Hash32(i any) int64"
        },
        {
          "functionName": "MMH3Hash128x64(${1:i})",
          "document": "计算一个对象的 mmh3 hash128x64",
          "definitionStr": "MMH3Hash128x64(i any) string"
        },
        {
          "functionName": "MMH3Hash128(${1:i})",
          "document": "计算一个对象的 mmh3 hash128",
          "definitionStr": "MMH3Hash128(i any) string"
        },
        {
          "functionName": "HmacSha512(${1:keydata})",
          "document": "",
          "definitionStr": "HmacSha512(key, data any) []byte"
        },
        {
          "functionName": "HmacSha256(${1:keydata})",
          "document": "",
          "definitionStr": "HmacSha256(key, data any) []byte"
        },
        {
          "functionName": "HmacSha1(${1:keydata})",
          "document": "",
          "definitionStr": "HmacSha1(key, data any) []byte"
        },
        {
          "functionName": "HmacSM3(${1:keydata})",
          "document": "",
          "definitionStr": "HmacSM3(key, data any) []byte"
        },
        {
          "functionName": "HmacMD5(${1:keydata})",
          "document": "",
          "definitionStr": "HmacMD5(key, data any) []byte"
        },
        {
          "functionName": "HZGB2312ToUTF8(${1:s /*type: []byte*/})",
          "document": "",
          "definitionStr": "HZGB2312ToUTF8(s []byte) ([]byte, error)"
        },
        {
          "functionName": "HTMLChardetBest(${1:raw})",
          "document": "检测 HTML 的字符集，只展示最有可能的结果",
          "definitionStr": "HTMLChardetBest(raw any) (*chardet.Result, error)"
        },
        {
          "functionName": "HTMLChardet(${1:raw})",
          "document": "检测 HTML 的字符集",
          "definitionStr": "HTMLChardet(raw any) ([]chardet.Result, error)"
        },
        {
          "functionName": "GBKToUTF8(${1:s /*type: []byte*/})",
          "document": "",
          "definitionStr": "GBKToUTF8(s []byte) ([]byte, error)"
        },
        {
          "functionName": "GBKSafe(${1:s /*type: []byte*/})",
          "document": "尝试修复 GBK",
          "definitionStr": "GBKSafe(s []byte) (string, error)"
        },
        {
          "functionName": "GB18030ToUTF8(${1:s /*type: []byte*/})",
          "document": "",
          "definitionStr": "GB18030ToUTF8(s []byte) ([]byte, error)"
        },
        {
          "functionName": "FixUTF8(${1:s /*type: []byte*/})",
          "document": "修复 Bytes 到 UTF8，会把不合理的 UTF8 字符转义",
          "definitionStr": "FixUTF8(s []byte) string"
        },
        {
          "functionName": "EscapeQueryUrl(${1:s /*type: string*/})",
          "document": "URL 编码：作为 url.Query 进行编码",
          "definitionStr": "EscapeQueryUrl(s string) string  doc:QueryEscape escapes the string so it can be safely placedinside a URL query."
        },
        {
          "functionName": "EscapePathUrl(${1:s /*type: string*/})",
          "document": "URL 编码：（作为 url.Path 进行编码）",
          "definitionStr": "EscapePathUrl(s string) string  doc:PathEscape escapes the string so it can be safely placed inside a URL path segment,replacing special characters (including /) with %XX sequences as needed."
        },
        {
          "functionName": "EscapeHtml(${1:s /*type: string*/})",
          "document": "同 `codec.DecodeHtml`",
          "definitionStr": "EscapeHtml(s string) string  doc:EscapeString escapes special characters like \"\u003c\" to become \"\u0026lt;\". Itescapes only five such characters: \u003c, \u003e, \u0026, ' and \".UnescapeString(EscapeString(s)) == s always holds, but the converse isn'talways true."
        },
        {
          "functionName": "EncodeUrl(${1:i})",
          "document": "把一个对象进行 URL 编码",
          "definitionStr": "EncodeUrl(i any) string"
        },
        {
          "functionName": "EncodeToPrintable(${1:v1/*type: string*/})",
          "document": "等价于 `codec.EncodeASCII`",
          "definitionStr": "EncodeToPrintable(string) string"
        },
        {
          "functionName": "EncodeToHex(${1:i})",
          "document": "把一个对象编码成 hex 字符串，注意：不以 `0x` 开头",
          "definitionStr": "EncodeToHex(i any) string"
        },
        {
          "functionName": "EncodeHtmlHex(${1:i})",
          "document": "把一个字符串编码成 HTML 实体编码，如果输入了一个对象，会序列化后再对 bytes 进行编码，注意这个函数会把参数所有内容都进行编码，编码成 `\u0026#xNN;` 这种形式",
          "definitionStr": "EncodeHtmlHex(i any) string"
        },
        {
          "functionName": "EncodeHtml(${1:i})",
          "document": "把一个字符串编码成 HTML 实体编码，如果输入了一个对象，会 json 序列化后再编码，注意这个函数会把所有内容都进行编码",
          "definitionStr": "EncodeHtml(i any) string"
        },
        {
          "functionName": "EncodeChunked(${1:raw /*type: []byte*/})",
          "document": "增加 chunked 编码",
          "definitionStr": "EncodeChunked(raw []byte) []byte"
        },
        {
          "functionName": "EncodeBase64Url(${1:i})",
          "document": "",
          "definitionStr": "EncodeBase64Url(i any) string"
        },
        {
          "functionName": "EncodeBase64(${1:i})",
          "document": "把一个对象编码成 base64 字符串",
          "definitionStr": "EncodeBase64(i any) string"
        },
        {
          "functionName": "EncodeBase32(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "func codec.EncodeBase32(v1: any) return (r0: string)"
        },
        {
          "functionName": "EncodeASCII(${1:v1/*type: string*/})",
          "document": "通常用于把不可见字符串变成可见字符串，把一个字符串变成双引号`\"`包裹的字符串，字符串中的不可见字符会变成 `\\xAA\\x0A` 这类被转义的内容",
          "definitionStr": "EncodeASCII(string) string"
        },
        {
          "functionName": "DoubleEncodeUrl(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "DoubleEncodeUrl(any) string"
        },
        {
          "functionName": "DoubleDecodeUrl(${1:v1/*type: string*/})",
          "document": "双重 URL 解码，例如 `%2564%2567` 会解析成 `dg`",
          "definitionStr": "DoubleDecodeUrl(string) (string, error)"
        },
        {
          "functionName": "DecodeUrl(${1:s /*type: string*/})",
          "document": "把 `%21%63%57asdf` 这类的字符串中的 URL 编码解析成正常字符",
          "definitionStr": "DecodeUrl(s string) (string, error)  doc:QueryUnescape does the inverse transformation of QueryEscape,converting each 3-byte encoded substring of the form \"%AB\" into thehex-decoded byte 0xAB.It returns an error if any % is not followed by two hexadecimaldigits."
        },
        {
          "functionName": "DecodeHtml(${1:s /*type: string*/})",
          "document": "把 HTML 实体编码后的文字进行解析，例如 `\u0026#x0a;` 或 `\u0026#amp;` 等，如果包含正常字符串，则会保留原字符串",
          "definitionStr": "DecodeHtml(s string) string  doc:UnescapeString unescapes entities like \"\u0026lt;\" to become \"\u003c\". It unescapes alarger range of entities than EscapeString escapes. For example, \"\u0026aacute;\"unescapes to \"á\", as does \"\u0026#225;\" and \"\u0026#xE1;\".UnescapeString(EscapeString(s)) == s always holds, but the converse isn'talways true."
        },
        {
          "functionName": "DecodeHex(${1:i /*type: string*/})",
          "document": "把 Hex 字符串解析成 bytes",
          "definitionStr": "DecodeHex(i string) ([]byte, error)"
        },
        {
          "functionName": "DecodeChunked(${1:raw /*type: []byte*/})",
          "document": "http chunked 解码",
          "definitionStr": "DecodeChunked(raw []byte) ([]byte, error)"
        },
        {
          "functionName": "DecodeBase64Url(${1:i})",
          "document": "",
          "definitionStr": "DecodeBase64Url(i any) ([]byte, error)"
        },
        {
          "functionName": "DecodeBase64(${1:i /*type: string*/})",
          "document": "把 base64 解析成 bytes",
          "definitionStr": "DecodeBase64(i string) ([]byte, error)"
        },
        {
          "functionName": "DecodeBase32(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func codec.DecodeBase32(v1: string) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "DecodeASCII(${1:s /*type: string*/})",
          "document": "等价于 `strconv.Unquote`，把一个被 `\"` 包裹的字符串解析成字符串内容，同时解析 `\"\\x0a\"` 解析成对应的字符串。",
          "definitionStr": "DecodeASCII(s string) (string, error)  doc:Unquote interprets s as a single-quoted, double-quoted,or backquoted Go string literal, returning the string valuethat s quotes.  (If s is single-quoted, it would be a Gocharacter literal; Unquote returns the correspondingone-character string.)"
        },
        {
          "functionName": "DESEncrypt(${1:key /*type: []byte*/}, ${2:data /*type: []byte*/}, ${3:iv /*type: []byte*/})",
          "document": "DES 加密，默认 CBC 模式",
          "definitionStr": "DESEncrypt(key []byte, data []byte, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "DESECBEncrypt(${1:key /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "DESECBEncrypt(key []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "DESECBDecrypt(${1:key /*type: []byte*/}, ${2:data /*type: []byte*/})",
          "document": "",
          "definitionStr": "DESECBDecrypt(key []byte, data []byte) ([]byte, error)"
        },
        {
          "functionName": "DESDecrypt(${1:keydataiv /*type: []byte*/})",
          "document": "DES 解密（默认CBC）",
          "definitionStr": "DESDecrypt(key, data, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "DESCBCEncrypt(${1:key /*type: []byte*/}, ${2:data /*type: []byte*/}, ${3:iv /*type: []byte*/})",
          "document": "",
          "definitionStr": "DESCBCEncrypt(key []byte, data []byte, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "DESCBCDecrypt(${1:keydataiv /*type: []byte*/})",
          "document": "",
          "definitionStr": "DESCBCDecrypt(key, data, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "AutoDecode(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "AutoDecode(any) []*codec.AutoDecodeResult"
        },
        {
          "functionName": "AESGCMEncryptWithNonceSize16(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESGCMEncryptWithNonceSize16(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESGCMEncryptWithNonceSize12(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESGCMEncryptWithNonceSize12(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESGCMEncrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:_ /*type: []byte*/})",
          "document": "aes gcm 加密",
          "definitionStr": "AESGCMEncrypt(key []byte, data any, _ []byte) ([]byte, error)  doc://AES GCM 加密后的payload shiro 1.4.2版本更换为了AES-GCM加密方式func AES_GCM_Encrypt(key []byte, Content []byte) string {\tblock, _ := aes.NewCipher(key)\tnonce := make([]byte, 16)\tio.ReadFull(rand.Reader, nonce)\taesgcm, _ := cipher.NewGCMWithNonceSize(block, 16)\tciphertext := aesgcm.Seal(nil, nonce, Content, nil)\treturn base64.StdEncoding.EncodeToString(append(nonce, ciphertext...))}"
        },
        {
          "functionName": "AESGCMDecryptWithNonceSize16(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESGCMDecryptWithNonceSize16(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESGCMDecryptWithNonceSize12(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESGCMDecryptWithNonceSize12(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESGCMDecrypt(${1:key /*type: []byte*/}, ${2:data}, ${3:_ /*type: []byte*/})",
          "document": "aes gcm 解密",
          "definitionStr": "AESGCMDecrypt(key []byte, data any, _ []byte) ([]byte, error)"
        },
        {
          "functionName": "AESEncrypt(${1:key /*type: []byte*/}, ${2:i}, ${3:iv /*type: []byte*/})",
          "document": "aes cbc 加密",
          "definitionStr": "AESEncrypt(key []byte, i any, iv []byte) (data []byte, _ error)"
        },
        {
          "functionName": "AESECBEncryptWithZeroPadding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESECBEncryptWithZeroPadding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESECBEncryptWithPKCS7Padding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESECBEncryptWithPKCS7Padding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESECBEncrypt(${1:key /*type: []byte*/}, ${2:i}, ${3:iv /*type: []byte*/})",
          "document": "",
          "definitionStr": "AESECBEncrypt(key []byte, i any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "AESECBDecryptWithZeroPadding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESECBDecryptWithZeroPadding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESECBDecryptWithPKCS7Padding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESECBDecryptWithPKCS7Padding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESECBDecrypt(${1:key /*type: []byte*/}, ${2:i}, ${3:iv /*type: []byte*/})",
          "document": "",
          "definitionStr": "AESECBDecrypt(key []byte, i any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "AESDecrypt(${1:key /*type: []byte*/}, ${2:i}, ${3:iv /*type: []byte*/})",
          "document": "aes 解密",
          "definitionStr": "AESDecrypt(key []byte, i any, iv []byte) ([]byte, error)"
        },
        {
          "functionName": "AESCBCEncryptWithZeroPadding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESCBCEncryptWithZeroPadding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESCBCEncryptWithPKCS7Padding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESCBCEncryptWithPKCS7Padding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESCBCEncrypt(${1:key /*type: []byte*/}, ${2:i}, ${3:iv /*type: []byte*/})",
          "document": "aes cbc 加密",
          "definitionStr": "AESCBCEncrypt(key []byte, i any, iv []byte) (data []byte, _ error)"
        },
        {
          "functionName": "AESCBCDecryptWithZeroPadding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESCBCDecryptWithZeroPadding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESCBCDecryptWithPKCS7Padding(${1:v1/*type: bytes*/}, ${2:v2/*type: any*/}, ${3:v3/*type: bytes*/})",
          "document": "",
          "definitionStr": "func codec.AESCBCDecryptWithPKCS7Padding(v1: bytes, v2: any, v3: bytes) return (r0: bytes, r1: error)"
        },
        {
          "functionName": "AESCBCDecrypt(${1:key /*type: []byte*/}, ${2:i}, ${3:iv /*type: []byte*/})",
          "document": "aes cbc 解密",
          "definitionStr": "AESCBCDecrypt(key []byte, i any, iv []byte) ([]byte, error)"
        }
      ]
    },
    {
      "libName": "cli",
      "prefix": "cli.",
      "functions": [
        {
          "functionName": "setRequired(${1:required/*type: bool*/})",
          "document": "设置参数是必须的，如果设置了，参数在没有设置默认值的情况下，并且找不到用户输入，会影响 cli.check 的判断结果",
          "definitionStr": "setRequired(bool) yaklib.setCliExtraParam"
        },
        {
          "functionName": "setHelp(${1:helpText/*type: str*/})",
          "document": "使用方法同 `cli.setDefault` 使用，如果某个参数的值为空的话，并且没有默认值，将会展示缺少的参数。",
          "definitionStr": "setHelp(string) yaklib.setCliExtraParam"
        },
        {
          "functionName": "setDefault(${1:default/*type: any*/})",
          "document": "为命令行设置默认值，默认值会被强行类型断言为目标类型，不要传错类型就可以！",
          "definitionStr": "setDefault(any) yaklib.setCliExtraParam"
        },
        {
          "functionName": "help(${1:w...})",
          "document": "",
          "definitionStr": "help(w ...io.Writer)"
        },
        {
          "functionName": "check()",
          "document": "检查当前设置的所有参数，如果有不合理的参数（无法确定值），则停止执行，打印出帮助信息",
          "definitionStr": "check()"
        },
        {
          "functionName": "YakitPlugin()",
          "document": "",
          "definitionStr": "YakitPlugin() []string"
        },
        {
          "functionName": "Urls(${1:name /*type: string*/}, ${2:opts...})",
          "document": "",
          "definitionStr": "Urls(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "Url(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把参数对应的值解析成 url，如果无法精确对应一个 url，将会自动补充 `https://`, `http://`, `www` 等，如果本身参数就是个 url，则会保留原样",
          "definitionStr": "Url(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "StringSlice(${1:name /*type: string*/})",
          "document": "",
          "definitionStr": "StringSlice(name string) []string"
        },
        {
          "functionName": "String(${1:name /*type: string*/}, ${2:opts...})",
          "document": "最基础的命令行获取接口，把参数的值解析成字符串",
          "definitionStr": "String(name string, opts ...setCliExtraParam) string"
        },
        {
          "functionName": "SetDoc(${1:document /*type: string*/})",
          "document": "",
          "definitionStr": "SetDoc(document string)"
        },
        {
          "functionName": "SetCliName(${1:name /*type: string*/})",
          "document": "",
          "definitionStr": "SetCliName(name string)"
        },
        {
          "functionName": "Ports(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Port`",
          "definitionStr": "Ports(name string, opts ...setCliExtraParam) []int"
        },
        {
          "functionName": "Port(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把 ports 对应的命令行参数值解析成端口组，或者整数范围",
          "definitionStr": "Port(name string, opts ...setCliExtraParam) []int"
        },
        {
          "functionName": "Network(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Host`",
          "definitionStr": "Network(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "Net(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Host`",
          "definitionStr": "Net(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "LineDict(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把一个字典按行解析",
          "definitionStr": "LineDict(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "Integer(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Int`",
          "definitionStr": "Integer(name string, opts ...setCliExtraParam) int"
        },
        {
          "functionName": "Int(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把命令行参数值解析成整数",
          "definitionStr": "Int(name string, opts ...setCliExtraParam) int"
        },
        {
          "functionName": "Hosts(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Host`",
          "definitionStr": "Hosts(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "Host(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把 v1 对应的命令行参数解析成扫描目标，支持 `192.168.1.1/24,8.8.8.8,baidu.com` 等 IP，IP 段，域名等多种格式",
          "definitionStr": "Host(name string, opts ...setCliExtraParam) []string"
        },
        {
          "functionName": "Have(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Bool`，检测参数是否存在在命令行中",
          "definitionStr": "Have(name string, opts ...setCliExtraParam) bool"
        },
        {
          "functionName": "Float(${1:name /*type: string*/}, ${2:opts...})",
          "document": "同 `cli.Double`，把参数内容解析成 float64",
          "definitionStr": "Float(name string, opts ...setCliExtraParam) float64"
        },
        {
          "functionName": "FileOrContent(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把 v1 作为文件名来解析，如果解析失败，则把输入的内容直接变成内容返回",
          "definitionStr": "FileOrContent(name string, opts ...setCliExtraParam) []byte"
        },
        {
          "functionName": "File(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把输入的参数当成文件名来解析",
          "definitionStr": "File(name string, opts ...setCliExtraParam) []byte"
        },
        {
          "functionName": "Double(${1:name /*type: string*/}, ${2:opts...})",
          "document": "把函数解析成 `float64` 等价于 `cli.Float64`",
          "definitionStr": "Double(name string, opts ...setCliExtraParam) float64"
        },
        {
          "functionName": "Bool(${1:name /*type: string*/}, ${2:opts...})",
          "document": "判断命令行参数是否存在 v1 参数对应的选项？如果 v1 是 `option`，则会检测 `--option` 或者 `-option` 是否存在。要注意，不同于 `cli.String` 等接口，`cli.Bool` 不会判断参数的值，只会检测参数标记是不是存在。",
          "definitionStr": "Bool(name string, opts ...setCliExtraParam) bool"
        },
        {
          "functionName": "Args()",
          "document": "获取全部的命令行参数，返回结果等同于 `os.Args`\"",
          "definitionStr": "Args() []string"
        }
      ]
    },
    {
      "libName": "bufio",
      "prefix": "bufio.",
      "functions": [
        {
          "functionName": "NewWriterSize(${1:i}, ${2:size /*type: int*/})",
          "document": "",
          "definitionStr": "NewWriterSize(i any, size int) (*bufio.Writer, error)"
        },
        {
          "functionName": "NewWriter(${1:i})",
          "document": "",
          "definitionStr": "NewWriter(i any) (*bufio.Writer, error)"
        },
        {
          "functionName": "NewScanner(${1:i})",
          "document": "",
          "definitionStr": "NewScanner(i any) (*bufio.Scanner, error)"
        },
        {
          "functionName": "NewReaderSize(${1:i}, ${2:size /*type: int*/})",
          "document": "",
          "definitionStr": "NewReaderSize(i any, size int) (*bufio.Reader, error)"
        },
        {
          "functionName": "NewReader(${1:i})",
          "document": "",
          "definitionStr": "NewReader(i any) (*bufio.Reader, error)"
        },
        {
          "functionName": "NewReadWriter(${1:ii2})",
          "document": "",
          "definitionStr": "NewReadWriter(i, i2 any) (*bufio.ReadWriter, error)"
        }
      ]
    },
    {
      "libName": "brute",
      "prefix": "brute.",
      "functions": [
        {
          "functionName": "userList(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "userList(...string) tools.yakBruteOpt"
        },
        {
          "functionName": "passList(${1:v1/*type ...string*/})",
          "document": "设置密码列表",
          "definitionStr": "passList(...string) tools.yakBruteOpt"
        },
        {
          "functionName": "okToStop(${1:v1/*type: bool*/})",
          "document": "如果爆破出结果就停止",
          "definitionStr": "okToStop(bool) tools.yakBruteOpt"
        },
        {
          "functionName": "minDelay(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "minDelay(int) tools.yakBruteOpt"
        },
        {
          "functionName": "maxDelay(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "maxDelay(int) tools.yakBruteOpt"
        },
        {
          "functionName": "finishingThreshold(${1:v1/*type: int*/})",
          "document": "停止爆破的阈值",
          "definitionStr": "finishingThreshold(int) tools.yakBruteOpt"
        },
        {
          "functionName": "debug(${1:v1/*type: bool*/})",
          "document": "",
          "definitionStr": "debug(bool) tools.yakBruteOpt"
        },
        {
          "functionName": "concurrentTarget(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "concurrentTarget(int) tools.yakBruteOpt"
        },
        {
          "functionName": "concurrent(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "concurrent(int) tools.yakBruteOpt"
        },
        {
          "functionName": "bruteHandler(${1:v1/*type: func (v1: *bruteutils.BruteItem) return(*bruteutils.BruteItemResult) */})",
          "document": "",
          "definitionStr": "bruteHandler(func(*bruteutils.BruteItem) *bruteutils.BruteItemResult) tools.yakBruteOpt"
        },
        {
          "functionName": "autoDict()",
          "document": "",
          "definitionStr": "func brute.autoDict() return (r0: func yakBruteOpt(v1: *tools.yakBruter) )"
        },
        {
          "functionName": "New(${1:bruteType/*type: string*/}, ${2:bruteParams/*type ...yakBruteOpt*/})",
          "document": "新建一个爆破执行期",
          "definitionStr": "New(string, ...tools.yakBruteOpt) (*tools.yakBruter, error)"
        },
        {
          "functionName": "GetUsernameListFromBruteType(${1:t /*type: string*/})",
          "document": "根据服务获取服务对应的用户列表",
          "definitionStr": "GetUsernameListFromBruteType(t string) []string"
        },
        {
          "functionName": "GetPasswordListFromBruteType(${1:t /*type: string*/})",
          "document": "根据服务获取服务对应的密码列表",
          "definitionStr": "GetPasswordListFromBruteType(t string) []string"
        },
        {
          "functionName": "GetAvailableBruteTypes()",
          "document": "获取当前模块支持的所有的爆破类型",
          "definitionStr": "GetAvailableBruteTypes() []string"
        }
      ]
    },
    {
      "libName": "bot",
      "prefix": "bot.",
      "functions": [
        {
          "functionName": "workwx(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "workwx(string) bot.ConfigOpt"
        },
        {
          "functionName": "webhookWithSecret(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "webhookWithSecret(string, string) bot.ConfigOpt"
        },
        {
          "functionName": "webhook(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "webhook(string) bot.ConfigOpt"
        },
        {
          "functionName": "ding(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "ding(string, string) bot.ConfigOpt"
        },
        {
          "functionName": "New(${1:v1/*type ...bot.ConfigOpt*/})",
          "document": "",
          "definitionStr": "New(...bot.ConfigOpt) *bot.Client"
        },
        {
          "functionName": "FromEnv()",
          "document": "",
          "definitionStr": "FromEnv() *bot.Client"
        }
      ]
    },
    {
      "libName": "__global__",
      "prefix": "__global__.",
      "functions": [
        {
          "functionName": "yakit_status(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "`func yakit_status(v1 ...any)`"
        },
        {
          "functionName": "yakit_save(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "`func yakit_save(v1 ...any)`"
        },
        {
          "functionName": "yakit_output(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "`func yakit_output(v1 ...any)`"
        },
        {
          "functionName": "yakfmtWithError(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yakfmtWithError(v1: string) return (r0: string, r1: error)"
        },
        {
          "functionName": "yakfmt(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "func yakfmt(v1: string) return (r0: string)"
        },
        {
          "functionName": "wait(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "wait(any)"
        },
        {
          "functionName": "var",
          "document": "var: builtin.tyVar",
          "definitionStr": "var: builtin.tyVar"
        },
        {
          "functionName": "uuid()",
          "document": "",
          "definitionStr": "uuid() string"
        },
        {
          "functionName": "undefined",
          "document": "undefined: *spec.undefinedType",
          "definitionStr": "undefined: *spec.undefinedType"
        },
        {
          "functionName": "uint8",
          "document": "uint8: builtin.tyUint8",
          "definitionStr": "uint8: builtin.tyUint8"
        },
        {
          "functionName": "uint64",
          "document": "uint64: builtin.tyUint64",
          "definitionStr": "uint64: builtin.tyUint64"
        },
        {
          "functionName": "uint32",
          "document": "uint32: builtin.tyUint32",
          "definitionStr": "uint32: builtin.tyUint32"
        },
        {
          "functionName": "uint16",
          "document": "uint16: builtin.tyUint16",
          "definitionStr": "uint16: builtin.tyUint16"
        },
        {
          "functionName": "uint",
          "document": "uint: builtin.tyUint",
          "definitionStr": "uint: builtin.tyUint"
        },
        {
          "functionName": "typeof(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "typeof(any) reflect.Type"
        },
        {
          "functionName": "type",
          "document": "type: builtin.goTypeOf",
          "definitionStr": "type: builtin.goTypeOf"
        },
        {
          "functionName": "timestampToTime(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "timestampToTime(int64) time.Time"
        },
        {
          "functionName": "timestampToDatetime(${1:v1/*type: int64*/})",
          "document": "",
          "definitionStr": "timestampToDatetime(int64) string"
        },
        {
          "functionName": "timestamp()",
          "document": "",
          "definitionStr": "timestamp() int64"
        },
        {
          "functionName": "tick1s(${1:f /*type: func() bool*/})",
          "document": "",
          "definitionStr": "tick1s(f func() bool)"
        },
        {
          "functionName": "sub(${1:aij})",
          "document": "",
          "definitionStr": "sub(a, i, j any) any  doc:SubSlice returns a[i:j]. if i == nil it returns a[:j]. if j == nil it returns a[i:]."
        },
        {
          "functionName": "string",
          "document": "string: builtin.tyString",
          "definitionStr": "string: builtin.tyString"
        },
        {
          "functionName": "sprintln(${1:a...})",
          "document": "",
          "definitionStr": "sprintln(a ...any) string  doc:Sprintln formats using the default formats for its operands and returns the resulting string.Spaces are always added between operands and a newline is appended."
        },
        {
          "functionName": "sprintf(${1:format /*type: string*/}, ${2:a...})",
          "document": "",
          "definitionStr": "sprintf(format string, a ...any) string  doc:Sprintf formats according to a format specifier and returns the resulting string."
        },
        {
          "functionName": "sprint(${1:a...})",
          "document": "",
          "definitionStr": "sprint(a ...any) string  doc:Sprint formats using the default formats for its operands and returns the resulting string.Spaces are added between operands when neither is a string."
        },
        {
          "functionName": "sliceOf(${1:typ})",
          "document": "",
          "definitionStr": "sliceOf(typ any) any  doc:SliceOf makes a slice type."
        },
        {
          "functionName": "sliceFrom",
          "document": "sliceFrom: builtin.goSliceFrom",
          "definitionStr": "sliceFrom: builtin.goSliceFrom"
        },
        {
          "functionName": "slice(${1:typ}, ${2:args...})",
          "document": "",
          "definitionStr": "slice(typ any, args ...any) any  doc:Mkslice returns a new slice."
        },
        {
          "functionName": "sleep(${1:i /*type: float64*/})",
          "document": "",
          "definitionStr": "sleep(i float64)"
        },
        {
          "functionName": "set(${1:m}, ${2:args...})",
          "document": "",
          "definitionStr": "set(m any, args ...any)  doc:Set sets (index, value) pairs to an object. object can be a slice, an array, a map or a user-defined class."
        },
        {
          "functionName": "sdump(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "sdump(...any) string"
        },
        {
          "functionName": "randstr(${1:v1/*type: int*/})",
          "document": "",
          "definitionStr": "randstr(int) string"
        },
        {
          "functionName": "randn(${1:v1/*type: int*/}, ${2:v2/*type: int*/})",
          "document": "",
          "definitionStr": "randn(int, int) int"
        },
        {
          "functionName": "println(${1:a...})",
          "document": "",
          "definitionStr": "println(a ...any) (n int, err error)  doc:Println formats using the default formats for its operands and writes to standard output.Spaces are always added between operands and a newline is appended.It returns the number of bytes written and any write error encountered."
        },
        {
          "functionName": "printf(${1:format /*type: string*/}, ${2:a...})",
          "document": "",
          "definitionStr": "printf(format string, a ...any) (n int, err error)  doc:Printf formats according to a format specifier and writes to standard output.It returns the number of bytes written and any write error encountered."
        },
        {
          "functionName": "print(${1:a...})",
          "document": "",
          "definitionStr": "print(a ...any) (n int, err error)  doc:Print formats using the default formats for its operands and writes to standard output.Spaces are added between operands when neither is a string.It returns the number of bytes written and any write error encountered."
        },
        {
          "functionName": "parseTime(${1:v1/*type: string*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "parseTime(string, string) (time.Time, error)"
        },
        {
          "functionName": "parseString(${1:i})",
          "document": "",
          "definitionStr": "parseString(i any) string"
        },
        {
          "functionName": "parseStr(${1:i})",
          "document": "",
          "definitionStr": "parseStr(i any) string"
        },
        {
          "functionName": "parseInt(${1:s /*type: string*/})",
          "document": "",
          "definitionStr": "parseInt(s string) int"
        },
        {
          "functionName": "parseFloat(${1:s /*type: string*/})",
          "document": "",
          "definitionStr": "parseFloat(s string) float64"
        },
        {
          "functionName": "parseBoolean(${1:i})",
          "document": "",
          "definitionStr": "parseBoolean(i any) bool"
        },
        {
          "functionName": "parseBool(${1:i})",
          "document": "",
          "definitionStr": "parseBool(i any) bool"
        },
        {
          "functionName": "panicf(${1:format /*type: string*/}, ${2:args...})",
          "document": "",
          "definitionStr": "panicf(format string, args ...any)  doc:Panicf panics with sprintf(format, args...)."
        },
        {
          "functionName": "panic(${1:v})",
          "document": "",
          "definitionStr": "panic(v any)  doc:Panic panics with v."
        },
        {
          "functionName": "ord(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "ord(any) int"
        },
        {
          "functionName": "now()",
          "document": "",
          "definitionStr": "now() time.Time"
        },
        {
          "functionName": "nanotimestamp()",
          "document": "",
          "definitionStr": "nanotimestamp() int64"
        },
        {
          "functionName": "mkslice(${1:typ}, ${2:args...})",
          "document": "",
          "definitionStr": "mkslice(typ any, args ...any) any  doc:Mkslice returns a new slice."
        },
        {
          "functionName": "mkmap(${1:typ}, ${2:n...})",
          "document": "",
          "definitionStr": "mkmap(typ any, n ...int) any  doc:Mkmap makes a new map object."
        },
        {
          "functionName": "min(${1:args...})",
          "document": "",
          "definitionStr": "min(args ...any) (min any)  doc:Min returns min(a1, a2, ...)"
        },
        {
          "functionName": "max(${1:args...})",
          "document": "",
          "definitionStr": "max(args ...any) (max any)  doc:Max returns max(a1, a2, ...)"
        },
        {
          "functionName": "mapOf(${1:keyval})",
          "document": "",
          "definitionStr": "mapOf(key, val any) any  doc:MapOf makes a map type."
        },
        {
          "functionName": "mapFrom(${1:args...})",
          "document": "",
          "definitionStr": "mapFrom(args ...any) any  doc:MapFrom creates a map from args."
        },
        {
          "functionName": "make(${1:typ /*type: yaksepc.GoTyper*/}, ${2:args...})",
          "document": "",
          "definitionStr": "make(typ yaksepc.GoTyper, args ...int) any  doc:Make creates a instance of yaksepc builtin type (slice, map and chan)"
        },
        {
          "functionName": "logrecover()",
          "document": "",
          "definitionStr": "logrecover()"
        },
        {
          "functionName": "logquiet()",
          "document": "",
          "definitionStr": "logquiet()"
        },
        {
          "functionName": "loglevel(${1:i})",
          "document": "",
          "definitionStr": "loglevel(i any)"
        },
        {
          "functionName": "logdiscard()",
          "document": "",
          "definitionStr": "logdiscard()"
        },
        {
          "functionName": "len(${1:a})",
          "document": "",
          "definitionStr": "len(a any) int  doc:Len returns length of a collection object. object can be a slice, an array, a map, a string or a chan."
        },
        {
          "functionName": "isEmpty(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "isEmpty(any) bool"
        },
        {
          "functionName": "int8",
          "document": "int8: builtin.tyInt8",
          "definitionStr": "int8: builtin.tyInt8"
        },
        {
          "functionName": "int64",
          "document": "int64: builtin.tyInt64",
          "definitionStr": "int64: builtin.tyInt64"
        },
        {
          "functionName": "int32",
          "document": "int32: builtin.tyInt32",
          "definitionStr": "int32: builtin.tyInt32"
        },
        {
          "functionName": "int16",
          "document": "int16: builtin.tyInt16",
          "definitionStr": "int16: builtin.tyInt16"
        },
        {
          "functionName": "int",
          "document": "int: builtin.tyInt",
          "definitionStr": "int: builtin.tyInt"
        },
        {
          "functionName": "input(${1:v1/*type ...string*/})",
          "document": "",
          "definitionStr": "func input(v1 ...string) return (r0: string)"
        },
        {
          "functionName": "import(${1:file /*type: string*/}, ${2:exportsName /*type: string*/})",
          "document": "",
          "definitionStr": "import(file string, exportsName string) (any, error)"
        },
        {
          "functionName": "getScopeInspects()",
          "document": "",
          "definitionStr": "func getScopeInspects() return (r0: []*antlr4yak.ScopeValue, r1: error)"
        },
        {
          "functionName": "get(${1:m}, ${2:key}, ${3:defaultValues...})",
          "document": "",
          "definitionStr": "get(m any, key any, defaultValues ...any) (result any)  doc:Get gets a value from an object. object can be a slice, an array, a map or a user-defined class."
        },
        {
          "functionName": "fprintln(${1:w /*type: io.Writer*/}, ${2:a...})",
          "document": "",
          "definitionStr": "fprintln(w io.Writer, a ...any) (n int, err error)  doc:Fprintln formats using the default formats for its operands and writes to w.Spaces are always added between operands and a newline is appended.It returns the number of bytes written and any write error encountered."
        },
        {
          "functionName": "float64",
          "document": "float64: builtin.tyFloat64",
          "definitionStr": "float64: builtin.tyFloat64"
        },
        {
          "functionName": "float32",
          "document": "float32: builtin.tyFloat32",
          "definitionStr": "float32: builtin.tyFloat32"
        },
        {
          "functionName": "float",
          "document": "float: builtin.tyFloat64",
          "definitionStr": "float: builtin.tyFloat64"
        },
        {
          "functionName": "fail(${1:msg...})",
          "document": "",
          "definitionStr": "fail(msg ...any)"
        },
        {
          "functionName": "eval(${1:v1/*type: context.Context*/}, ${2:v2/*type: string*/})",
          "document": "",
          "definitionStr": "`func eval(v1: context.Context, v2: string)`"
        },
        {
          "functionName": "dump(${1:v1/*type ...any*/})",
          "document": "",
          "definitionStr": "dump(...any)"
        },
        {
          "functionName": "die(${1:err})",
          "document": "",
          "definitionStr": "die(err any)"
        },
        {
          "functionName": "descStr(${1:i})",
          "document": "",
          "definitionStr": "descStr(i any) string"
        },
        {
          "functionName": "desc(${1:i})",
          "document": "",
          "definitionStr": "desc(i any)"
        },
        {
          "functionName": "delete(${1:m}, ${2:key})",
          "document": "",
          "definitionStr": "delete(m any, key any)  doc:Delete deletes a key from map object."
        },
        {
          "functionName": "datetimeToTimestamp(${1:v1/*type: string*/})",
          "document": "",
          "definitionStr": "datetimeToTimestamp(string) (int64, error)"
        },
        {
          "functionName": "datetime()",
          "document": "",
          "definitionStr": "datetime() string"
        },
        {
          "functionName": "date()",
          "document": "",
          "definitionStr": "date() string"
        },
        {
          "functionName": "copy(${1:ab})",
          "document": "",
          "definitionStr": "copy(a, b any) int  doc:Copy does copy(a, b)."
        },
        {
          "functionName": "close(${1:v})",
          "document": "",
          "definitionStr": "close(v any)  doc:close channel"
        },
        {
          "functionName": "chr(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "chr(any) string"
        },
        {
          "functionName": "cap(${1:a})",
          "document": "",
          "definitionStr": "cap(a any) int  doc:Cap returns capacity of a collection object. object can be a slice, an array or a chan."
        },
        {
          "functionName": "byte",
          "document": "byte: builtin.tyUint8",
          "definitionStr": "byte: builtin.tyUint8"
        },
        {
          "functionName": "bool",
          "document": "bool: builtin.tyBool",
          "definitionStr": "bool: builtin.tyBool"
        },
        {
          "functionName": "atoi(${1:s /*type: string*/})",
          "document": "",
          "definitionStr": "atoi(s string) (int, error)  doc:Atoi is equivalent to ParseInt(s, 10, 0), converted to type int."
        },
        {
          "functionName": "assertf(${1:v1/*type: bool*/}, ${2:v2/*type: string*/}, ${3:v3/*type ...any*/})",
          "document": "",
          "definitionStr": "assertf(bool, string, ...any)"
        },
        {
          "functionName": "assertTrue(${1:b /*type: bool*/}, ${2:reason...})",
          "document": "",
          "definitionStr": "assertTrue(b bool, reason ...any)"
        },
        {
          "functionName": "assertEmpty(${1:v1/*type: any*/})",
          "document": "",
          "definitionStr": "assertEmpty(any)"
        },
        {
          "functionName": "assert(${1:b /*type: bool*/}, ${2:reason...})",
          "document": "",
          "definitionStr": "assert(b bool, reason ...any)"
        },
        {
          "functionName": "append(${1:a}, ${2:vals...})",
          "document": "",
          "definitionStr": "append(a any, vals ...any) (ret any)  doc:Append does append(a, vals...)"
        }
      ]
    }
  ],
  "fieldsCompletions": null,
  "libToFieldCompletions": {
    "__global__": [
      {
        "isMethod": false,
        "fieldName": "Id",
        "fieldTypeVerbose": "int",
        "libName": "__global__",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "__global__",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "__global__",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ValueVerbose",
        "fieldTypeVerbose": "string",
        "libName": "__global__",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.ScopeValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Location",
        "structNameShort": "Location",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Add(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "Add(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddDate",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "AddDate(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: int*/})",
        "methodsCompletionVerbose": "AddDate(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "After",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "After(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "After(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AppendFormat",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "AppendFormat(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "AppendFormat(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Before",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Before(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "Before(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Clock",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Clock()",
        "methodsCompletionVerbose": "Clock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Compare",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Compare(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "Compare(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Date",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Date()",
        "methodsCompletionVerbose": "Date()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Day",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Day()",
        "methodsCompletionVerbose": "Day()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Equal",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Equal(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "Equal(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Format",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Format(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Format(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GoString",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "GoString()",
        "methodsCompletionVerbose": "GoString()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GobEncode",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "GobEncode()",
        "methodsCompletionVerbose": "GobEncode()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Hour",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Hour()",
        "methodsCompletionVerbose": "Hour()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ISOWeek",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "ISOWeek()",
        "methodsCompletionVerbose": "ISOWeek()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "In",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "In(${1:v2 /*type: *time.Location*/})",
        "methodsCompletionVerbose": "In(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsDST",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "IsDST()",
        "methodsCompletionVerbose": "IsDST()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsZero",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "IsZero()",
        "methodsCompletionVerbose": "IsZero()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Local",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Local()",
        "methodsCompletionVerbose": "Local()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Location",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Location()",
        "methodsCompletionVerbose": "Location()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalBinary",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "MarshalBinary()",
        "methodsCompletionVerbose": "MarshalBinary()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalJSON",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "MarshalJSON()",
        "methodsCompletionVerbose": "MarshalJSON()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalText",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "MarshalText()",
        "methodsCompletionVerbose": "MarshalText()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Minute",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Minute()",
        "methodsCompletionVerbose": "Minute()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Month",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Month()",
        "methodsCompletionVerbose": "Month()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Nanosecond",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Nanosecond()",
        "methodsCompletionVerbose": "Nanosecond()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Round",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Round(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "Round(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Second",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Second()",
        "methodsCompletionVerbose": "Second()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Sub",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Sub(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "Sub(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Truncate",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Truncate(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "Truncate(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UTC",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "UTC()",
        "methodsCompletionVerbose": "UTC()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Unix",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Unix()",
        "methodsCompletionVerbose": "Unix()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnixMicro",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "UnixMicro()",
        "methodsCompletionVerbose": "UnixMicro()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnixMilli",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "UnixMilli()",
        "methodsCompletionVerbose": "UnixMilli()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnixNano",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "UnixNano()",
        "methodsCompletionVerbose": "UnixNano()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Weekday",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Weekday()",
        "methodsCompletionVerbose": "Weekday()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Year",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Year()",
        "methodsCompletionVerbose": "Year()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "YearDay",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "YearDay()",
        "methodsCompletionVerbose": "YearDay()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Zone",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "Zone()",
        "methodsCompletionVerbose": "Zone()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ZoneBounds",
        "fieldTypeVerbose": "",
        "libName": "__global__",
        "structName": "time.Time",
        "structNameShort": "Time",
        "methodsCompletion": "ZoneBounds()",
        "methodsCompletionVerbose": "ZoneBounds()",
        "isGolangBuildOrigin": true
      }
    ],
    "bot": [
      {
        "isMethod": true,
        "fieldName": "Configs",
        "fieldTypeVerbose": "",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Client",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Client",
        "methodsCompletion": "Configs()",
        "methodsCompletionVerbose": "Configs()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SendMarkdown",
        "fieldTypeVerbose": "",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Client",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Client",
        "methodsCompletion": "SendMarkdown(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SendMarkdown(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SendText",
        "fieldTypeVerbose": "",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Client",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Client",
        "methodsCompletion": "SendText(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "SendText(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BotType",
        "fieldTypeVerbose": "string",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Config",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Secret",
        "fieldTypeVerbose": "string",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Config",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Webhook",
        "fieldTypeVerbose": "string",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Config",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SendMarkdown",
        "fieldTypeVerbose": "",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Config",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Config",
        "methodsCompletion": "SendMarkdown(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SendMarkdown(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SendText",
        "fieldTypeVerbose": "",
        "libName": "bot",
        "structName": "github.com/yaklang/yaklang/common/utils/bot.Config",
        "structNameShort": "com/yaklang/yaklang/common/utils/bot.Config",
        "methodsCompletion": "SendText(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "SendText(v2, v3)",
        "isGolangBuildOrigin": false
      }
    ],
    "brute": [
      {
        "isMethod": false,
        "fieldName": "ExtraInfo",
        "fieldTypeVerbose": "bytes",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Finished",
        "fieldTypeVerbose": "bool",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ok",
        "fieldTypeVerbose": "bool",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlyNeedPassword",
        "fieldTypeVerbose": "bool",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Password",
        "fieldTypeVerbose": "string",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Target",
        "fieldTypeVerbose": "string",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UserEliminated",
        "fieldTypeVerbose": "bool",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Username",
        "fieldTypeVerbose": "string",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItemResult",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Start",
        "fieldTypeVerbose": "",
        "libName": "brute",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.yakBruter",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.yakBruter",
        "methodsCompletion": "Start(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "Start(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "bufio": [
      {
        "isMethod": false,
        "fieldName": "Reader",
        "fieldTypeVerbose": "*bufio.Reader",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Writer",
        "fieldTypeVerbose": "*bufio.Writer",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Available",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Available()",
        "methodsCompletionVerbose": "Available()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Available",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Available()",
        "methodsCompletionVerbose": "Available()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AvailableBuffer",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "AvailableBuffer()",
        "methodsCompletionVerbose": "AvailableBuffer()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AvailableBuffer",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "AvailableBuffer()",
        "methodsCompletionVerbose": "AvailableBuffer()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Discard",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Discard(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Discard(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Discard",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Discard(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Discard(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Flush",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Flush()",
        "methodsCompletionVerbose": "Flush()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Flush",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Flush()",
        "methodsCompletionVerbose": "Flush()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Peek",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Peek(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Peek(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Peek",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Peek(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Peek(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadByte()",
        "methodsCompletionVerbose": "ReadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadByte()",
        "methodsCompletionVerbose": "ReadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadBytes",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadBytes(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadBytes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadBytes",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadBytes(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadBytes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadLine",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadLine()",
        "methodsCompletionVerbose": "ReadLine()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadLine",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadLine()",
        "methodsCompletionVerbose": "ReadLine()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadRune()",
        "methodsCompletionVerbose": "ReadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadRune()",
        "methodsCompletionVerbose": "ReadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadSlice",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadSlice(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadSlice(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadSlice",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadSlice(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadSlice(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadString",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadString(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadString",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "ReadString(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "UnreadByte()",
        "methodsCompletionVerbose": "UnreadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "UnreadByte()",
        "methodsCompletionVerbose": "UnreadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "UnreadRune()",
        "methodsCompletionVerbose": "UnreadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "UnreadRune()",
        "methodsCompletionVerbose": "UnreadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteByte(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "WriteByte(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteByte(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "WriteByte(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteRune(${1:v2 /*type: int32*/})",
        "methodsCompletionVerbose": "WriteRune(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteRune(${1:v2 /*type: int32*/})",
        "methodsCompletionVerbose": "WriteRune(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteString",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "WriteString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteString",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "WriteString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteTo(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteTo(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.ReadWriter",
        "structNameShort": "ReadWriter",
        "methodsCompletion": "WriteTo(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteTo(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Buffered",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Buffered()",
        "methodsCompletionVerbose": "Buffered()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Discard",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Discard(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Discard(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Peek",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Peek(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Peek(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadByte()",
        "methodsCompletionVerbose": "ReadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadBytes",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadBytes(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadBytes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadLine",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadLine()",
        "methodsCompletionVerbose": "ReadLine()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadRune()",
        "methodsCompletionVerbose": "ReadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadSlice",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadSlice(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadSlice(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadString",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadString(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "ReadString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Reset(${1:v2 /*type: io.Reader*/})",
        "methodsCompletionVerbose": "Reset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Size",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Size()",
        "methodsCompletionVerbose": "Size()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "UnreadByte()",
        "methodsCompletionVerbose": "UnreadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "UnreadRune()",
        "methodsCompletionVerbose": "UnreadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "WriteTo(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteTo(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Buffer",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Scanner",
        "structNameShort": "Scanner",
        "methodsCompletion": "Buffer(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Buffer(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Scanner",
        "structNameShort": "Scanner",
        "methodsCompletion": "Bytes()",
        "methodsCompletionVerbose": "Bytes()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Err",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Scanner",
        "structNameShort": "Scanner",
        "methodsCompletion": "Err()",
        "methodsCompletionVerbose": "Err()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Scan",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Scanner",
        "structNameShort": "Scanner",
        "methodsCompletion": "Scan()",
        "methodsCompletionVerbose": "Scan()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Split",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Scanner",
        "structNameShort": "Scanner",
        "methodsCompletion": "Split(${1:v2 /*type: func SplitFunc(v1: bytes, v2: bool) return(int, bytes, error) */})",
        "methodsCompletionVerbose": "Split(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Text",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Scanner",
        "structNameShort": "Scanner",
        "methodsCompletion": "Text()",
        "methodsCompletionVerbose": "Text()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Available",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "Available()",
        "methodsCompletionVerbose": "Available()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AvailableBuffer",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "AvailableBuffer()",
        "methodsCompletionVerbose": "AvailableBuffer()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Buffered",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "Buffered()",
        "methodsCompletionVerbose": "Buffered()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Flush",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "Flush()",
        "methodsCompletionVerbose": "Flush()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "Reset(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Reset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Size",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "Size()",
        "methodsCompletionVerbose": "Size()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteByte",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "WriteByte(${1:v2 /*type: byte*/})",
        "methodsCompletionVerbose": "WriteByte(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteRune",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "WriteRune(${1:v2 /*type: int32*/})",
        "methodsCompletionVerbose": "WriteRune(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteString",
        "fieldTypeVerbose": "",
        "libName": "bufio",
        "structName": "bufio.Writer",
        "structNameShort": "Writer",
        "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "WriteString(v2)",
        "isGolangBuildOrigin": true
      }
    ],
    "codec": [
      {
        "isMethod": false,
        "fieldName": "Charset",
        "fieldTypeVerbose": "string",
        "libName": "codec",
        "structName": "github.com/saintfish/chardet.Result",
        "structNameShort": "com/saintfish/chardet.Result",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Confidence",
        "fieldTypeVerbose": "int",
        "libName": "codec",
        "structName": "github.com/saintfish/chardet.Result",
        "structNameShort": "com/saintfish/chardet.Result",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Language",
        "fieldTypeVerbose": "string",
        "libName": "codec",
        "structName": "github.com/saintfish/chardet.Result",
        "structNameShort": "com/saintfish/chardet.Result",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Origin",
        "fieldTypeVerbose": "string",
        "libName": "codec",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Result",
        "fieldTypeVerbose": "string",
        "libName": "codec",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "codec",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "codec",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/codec.AutoDecodeResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "crawler": [
      {
        "isMethod": false,
        "fieldName": "CipherSuite",
        "fieldTypeVerbose": "uint16",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DidResume",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "HandshakeComplete",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NegotiatedProtocol",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NegotiatedProtocolIsMutual",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OCSPResponse",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PeerCertificates",
        "fieldTypeVerbose": "[]*x509.Certificate",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ServerName",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SignedCertificateTimestamps",
        "fieldTypeVerbose": "[]bytes",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLSUnique",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "VerifiedChains",
        "fieldTypeVerbose": "[][]*x509.Certificate",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "uint16",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExportKeyingMaterial",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/tls.ConnectionState",
        "structNameShort": "ConnectionState",
        "methodsCompletion": "ExportKeyingMaterial(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: int*/})",
        "methodsCompletionVerbose": "ExportKeyingMaterial(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddCert",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.CertPool",
        "structNameShort": "CertPool",
        "methodsCompletion": "AddCert(${1:v2 /*type: *x509.Certificate*/})",
        "methodsCompletionVerbose": "AddCert(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AppendCertsFromPEM",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.CertPool",
        "structNameShort": "CertPool",
        "methodsCompletion": "AppendCertsFromPEM(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "AppendCertsFromPEM(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Clone",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.CertPool",
        "structNameShort": "CertPool",
        "methodsCompletion": "Clone()",
        "methodsCompletionVerbose": "Clone()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Equal",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.CertPool",
        "structNameShort": "CertPool",
        "methodsCompletion": "Equal(${1:v2 /*type: *x509.CertPool*/})",
        "methodsCompletionVerbose": "Equal(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Subjects",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.CertPool",
        "structNameShort": "CertPool",
        "methodsCompletion": "Subjects()",
        "methodsCompletionVerbose": "Subjects()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "AuthorityKeyId",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "BasicConstraintsValid",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CRLDistributionPoints",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DNSNames",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "EmailAddresses",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExcludedDNSDomains",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExcludedEmailAddresses",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExcludedIPRanges",
        "fieldTypeVerbose": "[]*net.IPNet",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExcludedURIDomains",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExtKeyUsage",
        "fieldTypeVerbose": "[]x509.ExtKeyUsage",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Extensions",
        "fieldTypeVerbose": "[]pkix.Extension",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExtraExtensions",
        "fieldTypeVerbose": "[]pkix.Extension",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IPAddresses",
        "fieldTypeVerbose": "[]net.IP",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsCA",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Issuer",
        "fieldTypeVerbose": "pkix.Name",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IssuingCertificateURL",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "KeyUsage",
        "fieldTypeVerbose": "x509.KeyUsage",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxPathLen",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxPathLenZero",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NotAfter",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NotBefore",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OCSPServer",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PermittedDNSDomains",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PermittedDNSDomainsCritical",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PermittedEmailAddresses",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PermittedIPRanges",
        "fieldTypeVerbose": "[]*net.IPNet",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PermittedURIDomains",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PolicyIdentifiers",
        "fieldTypeVerbose": "[]asn1.ObjectIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PublicKey",
        "fieldTypeVerbose": "any",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PublicKeyAlgorithm",
        "fieldTypeVerbose": "x509.PublicKeyAlgorithm",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawIssuer",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawSubject",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawSubjectPublicKeyInfo",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawTBSCertificate",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SerialNumber",
        "fieldTypeVerbose": "*big.Int",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Signature",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SignatureAlgorithm",
        "fieldTypeVerbose": "x509.SignatureAlgorithm",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Subject",
        "fieldTypeVerbose": "pkix.Name",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SubjectKeyId",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "URIs",
        "fieldTypeVerbose": "[]*url.URL",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "UnhandledCriticalExtensions",
        "fieldTypeVerbose": "[]asn1.ObjectIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "UnknownExtKeyUsage",
        "fieldTypeVerbose": "[]asn1.ObjectIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CheckCRLSignature",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "CheckCRLSignature(${1:v2 /*type: *pkix.CertificateList*/})",
        "methodsCompletionVerbose": "CheckCRLSignature(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CheckSignature",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "CheckSignature(${1:v2 /*type: x509.SignatureAlgorithm*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/})",
        "methodsCompletionVerbose": "CheckSignature(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CheckSignatureFrom",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "CheckSignatureFrom(${1:v2 /*type: *x509.Certificate*/})",
        "methodsCompletionVerbose": "CheckSignatureFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CreateCRL",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "CreateCRL(${1:v2 /*type: io.Reader*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: []pkix.RevokedCertificate*/}, ${4:v5 /*type: time.Time*/}, ${5:v6 /*type: time.Time*/})",
        "methodsCompletionVerbose": "CreateCRL(v2, v3, v4, v5, v6)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Equal",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "Equal(${1:v2 /*type: *x509.Certificate*/})",
        "methodsCompletionVerbose": "Equal(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Verify",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "Verify(${1:v2 /*type: x509.VerifyOptions*/})",
        "methodsCompletionVerbose": "Verify(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "VerifyHostname",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "VerifyHostname(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "VerifyHostname(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CurrentTime",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "crypto/x509.VerifyOptions",
        "structNameShort": "VerifyOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DNSName",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "crypto/x509.VerifyOptions",
        "structNameShort": "VerifyOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Intermediates",
        "fieldTypeVerbose": "*x509.CertPool",
        "libName": "crawler",
        "structName": "crypto/x509.VerifyOptions",
        "structNameShort": "VerifyOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "KeyUsages",
        "fieldTypeVerbose": "[]x509.ExtKeyUsage",
        "libName": "crawler",
        "structName": "crypto/x509.VerifyOptions",
        "structNameShort": "VerifyOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxConstraintComparisions",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "crypto/x509.VerifyOptions",
        "structNameShort": "VerifyOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Roots",
        "fieldTypeVerbose": "*x509.CertPool",
        "libName": "crawler",
        "structName": "crypto/x509.VerifyOptions",
        "structNameShort": "VerifyOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Algorithm",
        "fieldTypeVerbose": "asn1.ObjectIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.AlgorithmIdentifier",
        "structNameShort": "AlgorithmIdentifier",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Parameters",
        "fieldTypeVerbose": "asn1.RawValue",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.AlgorithmIdentifier",
        "structNameShort": "AlgorithmIdentifier",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "asn1.ObjectIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.AttributeTypeAndValue",
        "structNameShort": "AttributeTypeAndValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.AttributeTypeAndValue",
        "structNameShort": "AttributeTypeAndValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SignatureAlgorithm",
        "fieldTypeVerbose": "pkix.AlgorithmIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.CertificateList",
        "structNameShort": "CertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SignatureValue",
        "fieldTypeVerbose": "asn1.BitString",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.CertificateList",
        "structNameShort": "CertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TBSCertList",
        "fieldTypeVerbose": "pkix.TBSCertificateList",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.CertificateList",
        "structNameShort": "CertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "HasExpired",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.CertificateList",
        "structNameShort": "CertificateList",
        "methodsCompletion": "HasExpired(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "HasExpired(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Critical",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Extension",
        "structNameShort": "Extension",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Id",
        "fieldTypeVerbose": "asn1.ObjectIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Extension",
        "structNameShort": "Extension",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Extension",
        "structNameShort": "Extension",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CommonName",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Country",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExtraNames",
        "fieldTypeVerbose": "[]pkix.AttributeTypeAndValue",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Locality",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Names",
        "fieldTypeVerbose": "[]pkix.AttributeTypeAndValue",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Organization",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OrganizationalUnit",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PostalCode",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Province",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SerialNumber",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StreetAddress",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ToRDNSequence",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.Name",
        "structNameShort": "Name",
        "methodsCompletion": "ToRDNSequence()",
        "methodsCompletionVerbose": "ToRDNSequence()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Extensions",
        "fieldTypeVerbose": "[]pkix.Extension",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.RevokedCertificate",
        "structNameShort": "RevokedCertificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RevocationTime",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.RevokedCertificate",
        "structNameShort": "RevokedCertificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SerialNumber",
        "fieldTypeVerbose": "*big.Int",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.RevokedCertificate",
        "structNameShort": "RevokedCertificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Extensions",
        "fieldTypeVerbose": "[]pkix.Extension",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Issuer",
        "fieldTypeVerbose": "pkix.RDNSequence",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NextUpdate",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "asn1.RawContent",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RevokedCertificates",
        "fieldTypeVerbose": "[]pkix.RevokedCertificate",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Signature",
        "fieldTypeVerbose": "pkix.AlgorithmIdentifier",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ThisUpdate",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "crypto/x509/pkix.TBSCertificateList",
        "structNameShort": "TBSCertificateList",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "BitLength",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "encoding/asn1.BitString",
        "structNameShort": "BitString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "encoding/asn1.BitString",
        "structNameShort": "BitString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "At",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "encoding/asn1.BitString",
        "structNameShort": "BitString",
        "methodsCompletion": "At(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "At(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RightAlign",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "encoding/asn1.BitString",
        "structNameShort": "BitString",
        "methodsCompletion": "RightAlign()",
        "methodsCompletionVerbose": "RightAlign()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "encoding/asn1.RawValue",
        "structNameShort": "RawValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Class",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "encoding/asn1.RawValue",
        "structNameShort": "RawValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "FullBytes",
        "fieldTypeVerbose": "bytes",
        "libName": "crawler",
        "structName": "encoding/asn1.RawValue",
        "structNameShort": "RawValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsCompound",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "encoding/asn1.RawValue",
        "structNameShort": "RawValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Tag",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "encoding/asn1.RawValue",
        "structNameShort": "RawValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AbsoluteURL",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "AbsoluteURL(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "AbsoluteURL(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Hash",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "Hash()",
        "methodsCompletionVerbose": "Hash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsForm",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "IsForm()",
        "methodsCompletionVerbose": "IsForm()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsHttps",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "IsHttps()",
        "methodsCompletionVerbose": "IsHttps()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsLoginForm",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "IsLoginForm()",
        "methodsCompletionVerbose": "IsLoginForm()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsUploadForm",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "IsUploadForm()",
        "methodsCompletionVerbose": "IsUploadForm()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Request",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "Request()",
        "methodsCompletionVerbose": "Request()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RequestRaw",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "RequestRaw()",
        "methodsCompletionVerbose": "RequestRaw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Response",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "Response()",
        "methodsCompletionVerbose": "Response()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ResponseBody",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "ResponseBody()",
        "methodsCompletionVerbose": "ResponseBody()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ResponseRaw",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "ResponseRaw()",
        "methodsCompletionVerbose": "ResponseRaw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SameWildcardOrigin",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "SameWildcardOrigin(${1:v2 /*type: *crawler.Req*/})",
        "methodsCompletionVerbose": "SameWildcardOrigin(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Url",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "github.com/yaklang/yaklang/common/crawler.Req",
        "structNameShort": "com/yaklang/yaklang/common/crawler.Req",
        "methodsCompletion": "Url()",
        "methodsCompletionVerbose": "Url()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Abs",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Abs(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Abs(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Add(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Add(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "And",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "And(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "And(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AndNot",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "AndNot(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "AndNot(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Append",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Append(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Append(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Binomial",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Binomial(${1:v2 /*type: int64*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "Binomial(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bit",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Bit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Bit(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "BitLen",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "BitLen()",
        "methodsCompletionVerbose": "BitLen()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bits",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Bits()",
        "methodsCompletionVerbose": "Bits()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Bytes()",
        "methodsCompletionVerbose": "Bytes()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Cmp",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Cmp(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Cmp(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CmpAbs",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "CmpAbs(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "CmpAbs(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Div",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Div(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Div(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DivMod",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "DivMod(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "DivMod(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Exp",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Exp(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Exp(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FillBytes",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "FillBytes(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "FillBytes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Format",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Format(${1:v2 /*type: fmt.State*/}, ${2:v3 /*type: int32*/})",
        "methodsCompletionVerbose": "Format(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GCD",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "GCD(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/}, ${4:v5 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "GCD(v2, v3, v4, v5)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GobDecode",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "GobDecode(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "GobDecode(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GobEncode",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "GobEncode()",
        "methodsCompletionVerbose": "GobEncode()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Int64()",
        "methodsCompletionVerbose": "Int64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsInt64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "IsInt64()",
        "methodsCompletionVerbose": "IsInt64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsUint64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "IsUint64()",
        "methodsCompletionVerbose": "IsUint64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Lsh",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Lsh(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: uint*/})",
        "methodsCompletionVerbose": "Lsh(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalJSON",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "MarshalJSON()",
        "methodsCompletionVerbose": "MarshalJSON()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalText",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "MarshalText()",
        "methodsCompletionVerbose": "MarshalText()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Mod",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Mod(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Mod(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ModInverse",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "ModInverse(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "ModInverse(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ModSqrt",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "ModSqrt(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "ModSqrt(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Mul",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Mul(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Mul(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MulRange",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "MulRange(${1:v2 /*type: int64*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "MulRange(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Neg",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Neg(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Neg(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Not",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Not(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Not(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Or",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Or(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Or(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ProbablyPrime",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "ProbablyPrime(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "ProbablyPrime(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Quo",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Quo(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Quo(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QuoRem",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "QuoRem(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/}, ${3:v4 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "QuoRem(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Rand",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Rand(${1:v2 /*type: *rand.Rand*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Rand(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Rem",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Rem(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Rem(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Rsh",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Rsh(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: uint*/})",
        "methodsCompletionVerbose": "Rsh(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Scan",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Scan(${1:v2 /*type: fmt.ScanState*/}, ${2:v3 /*type: int32*/})",
        "methodsCompletionVerbose": "Scan(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Set(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Set(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetBit",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "SetBit(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: uint*/})",
        "methodsCompletionVerbose": "SetBit(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetBits",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "SetBits(${1:v2 /*type: []big.Word*/})",
        "methodsCompletionVerbose": "SetBits(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetBytes",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "SetBytes(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "SetBytes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetInt64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "SetInt64(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "SetInt64(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetString",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "SetString(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "SetString(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetUint64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "SetUint64(${1:v2 /*type: uint64*/})",
        "methodsCompletionVerbose": "SetUint64(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Sign",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Sign()",
        "methodsCompletionVerbose": "Sign()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Sqrt",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Sqrt(${1:v2 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Sqrt(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Sub",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Sub(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Sub(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Text",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Text(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Text(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TrailingZeroBits",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "TrailingZeroBits()",
        "methodsCompletionVerbose": "TrailingZeroBits()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Uint64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Uint64()",
        "methodsCompletionVerbose": "Uint64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalJSON",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "UnmarshalJSON(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "UnmarshalJSON(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalText",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "UnmarshalText(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "UnmarshalText(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Xor",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/big.Int",
        "structNameShort": "Int",
        "methodsCompletion": "Xor(${1:v2 /*type: *big.Int*/}, ${2:v3 /*type: *big.Int*/})",
        "methodsCompletionVerbose": "Xor(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExpFloat64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "ExpFloat64()",
        "methodsCompletionVerbose": "ExpFloat64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Float32",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Float32()",
        "methodsCompletionVerbose": "Float32()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Float64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Float64()",
        "methodsCompletionVerbose": "Float64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Int()",
        "methodsCompletionVerbose": "Int()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int31",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Int31()",
        "methodsCompletionVerbose": "Int31()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int31n",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Int31n(${1:v2 /*type: int32*/})",
        "methodsCompletionVerbose": "Int31n(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int63",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Int63()",
        "methodsCompletionVerbose": "Int63()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int63n",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Int63n(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "Int63n(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Intn",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Intn(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Intn(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NormFloat64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "NormFloat64()",
        "methodsCompletionVerbose": "NormFloat64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Perm",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Perm(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Perm(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Seed",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Seed(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "Seed(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Shuffle",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Shuffle(${1:v2 /*type: int*/}, ${2:v3 /*type: func (v1: int, v2: int) */})",
        "methodsCompletionVerbose": "Shuffle(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Uint32",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Uint32()",
        "methodsCompletionVerbose": "Uint32()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Uint64",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "math/rand.Rand",
        "structNameShort": "Rand",
        "methodsCompletion": "Uint64()",
        "methodsCompletionVerbose": "Uint64()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "net.IP",
        "libName": "crawler",
        "structName": "net.IPNet",
        "structNameShort": "IPNet",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Mask",
        "fieldTypeVerbose": "net.IPMask",
        "libName": "crawler",
        "structName": "net.IPNet",
        "structNameShort": "IPNet",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Contains",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net.IPNet",
        "structNameShort": "IPNet",
        "methodsCompletion": "Contains(${1:v2 /*type: net.IP*/})",
        "methodsCompletionVerbose": "Contains(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Network",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net.IPNet",
        "structNameShort": "IPNet",
        "methodsCompletion": "Network()",
        "methodsCompletionVerbose": "Network()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net.IPNet",
        "structNameShort": "IPNet",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Domain",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Expires",
        "fieldTypeVerbose": "time.Time",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "HttpOnly",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxAge",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Path",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawExpires",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SameSite",
        "fieldTypeVerbose": "http.SameSite",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Secure",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Unparsed",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Valid",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Cookie",
        "structNameShort": "Cookie",
        "methodsCompletion": "Valid()",
        "methodsCompletionVerbose": "Valid()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Body",
        "fieldTypeVerbose": "io.ReadCloser",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Cancel",
        "fieldTypeVerbose": "\u003c-chan struct {}",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Close",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ContentLength",
        "fieldTypeVerbose": "int64",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Form",
        "fieldTypeVerbose": "url.Values",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GetBody",
        "fieldTypeVerbose": "func () return(io.ReadCloser, error) ",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Header",
        "fieldTypeVerbose": "http.Header",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Method",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MultipartForm",
        "fieldTypeVerbose": "*multipart.Form",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PostForm",
        "fieldTypeVerbose": "url.Values",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Proto",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProtoMajor",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProtoMinor",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RequestURI",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Response",
        "fieldTypeVerbose": "*http.Response",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLS",
        "fieldTypeVerbose": "*tls.ConnectionState",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Trailer",
        "fieldTypeVerbose": "http.Header",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TransferEncoding",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "URL",
        "fieldTypeVerbose": "*url.URL",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddCookie",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
        "methodsCompletionVerbose": "AddCookie(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "BasicAuth",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "BasicAuth()",
        "methodsCompletionVerbose": "BasicAuth()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Clone",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "Clone(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Context",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "Context()",
        "methodsCompletionVerbose": "Context()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Cookie",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Cookie(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Cookies",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "Cookies()",
        "methodsCompletionVerbose": "Cookies()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FormFile",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormFile(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FormValue",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormValue(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MultipartReader",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "MultipartReader()",
        "methodsCompletionVerbose": "MultipartReader()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ParseForm",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "ParseForm()",
        "methodsCompletionVerbose": "ParseForm()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ParseMultipartForm",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "ParseMultipartForm(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PostFormValue",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "PostFormValue(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ProtoAtLeast",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "ProtoAtLeast(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Referer",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "Referer()",
        "methodsCompletionVerbose": "Referer()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetBasicAuth",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SetBasicAuth(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UserAgent",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "UserAgent()",
        "methodsCompletionVerbose": "UserAgent()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WithContext",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "WithContext(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteProxy",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Request",
        "structNameShort": "Request",
        "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteProxy(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Body",
        "fieldTypeVerbose": "io.ReadCloser",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Close",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ContentLength",
        "fieldTypeVerbose": "int64",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Header",
        "fieldTypeVerbose": "http.Header",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Proto",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProtoMajor",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProtoMinor",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Request",
        "fieldTypeVerbose": "*http.Request",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Status",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StatusCode",
        "fieldTypeVerbose": "int",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLS",
        "fieldTypeVerbose": "*tls.ConnectionState",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Trailer",
        "fieldTypeVerbose": "http.Header",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TransferEncoding",
        "fieldTypeVerbose": "[]string",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Uncompressed",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Cookies",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "Cookies()",
        "methodsCompletionVerbose": "Cookies()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Location",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "Location()",
        "methodsCompletionVerbose": "Location()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ProtoAtLeast",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "ProtoAtLeast(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/http.Response",
        "structNameShort": "Response",
        "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ForceQuery",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Fragment",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OmitHost",
        "fieldTypeVerbose": "bool",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Opaque",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Path",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawFragment",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawPath",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RawQuery",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Scheme",
        "fieldTypeVerbose": "string",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "User",
        "fieldTypeVerbose": "*url.Userinfo",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "EscapedFragment",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "EscapedFragment()",
        "methodsCompletionVerbose": "EscapedFragment()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "EscapedPath",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "EscapedPath()",
        "methodsCompletionVerbose": "EscapedPath()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Hostname",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "Hostname()",
        "methodsCompletionVerbose": "Hostname()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsAbs",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "IsAbs()",
        "methodsCompletionVerbose": "IsAbs()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "JoinPath",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "JoinPath(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "JoinPath(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalBinary",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "MarshalBinary()",
        "methodsCompletionVerbose": "MarshalBinary()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Parse",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "Parse(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Parse(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Port",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "Port()",
        "methodsCompletionVerbose": "Port()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Query",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "Query()",
        "methodsCompletionVerbose": "Query()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Redacted",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "Redacted()",
        "methodsCompletionVerbose": "Redacted()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RequestURI",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "RequestURI()",
        "methodsCompletionVerbose": "RequestURI()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ResolveReference",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "ResolveReference(${1:v2 /*type: *url.URL*/})",
        "methodsCompletionVerbose": "ResolveReference(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalBinary",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.URL",
        "structNameShort": "URL",
        "methodsCompletion": "UnmarshalBinary(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "UnmarshalBinary(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Password",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.Userinfo",
        "structNameShort": "Userinfo",
        "methodsCompletion": "Password()",
        "methodsCompletionVerbose": "Password()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.Userinfo",
        "structNameShort": "Userinfo",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Username",
        "fieldTypeVerbose": "",
        "libName": "crawler",
        "structName": "net/url.Userinfo",
        "structNameShort": "Userinfo",
        "methodsCompletion": "Username()",
        "methodsCompletionVerbose": "Username()",
        "isGolangBuildOrigin": true
      }
    ],
    "cve": [
      {
        "isMethod": true,
        "fieldName": "DatabaseTypeName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.ColumnType",
        "structNameShort": "ColumnType",
        "methodsCompletion": "DatabaseTypeName()",
        "methodsCompletionVerbose": "DatabaseTypeName()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DecimalSize",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.ColumnType",
        "structNameShort": "ColumnType",
        "methodsCompletion": "DecimalSize()",
        "methodsCompletionVerbose": "DecimalSize()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Length",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.ColumnType",
        "structNameShort": "ColumnType",
        "methodsCompletion": "Length()",
        "methodsCompletionVerbose": "Length()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Name",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.ColumnType",
        "structNameShort": "ColumnType",
        "methodsCompletion": "Name()",
        "methodsCompletionVerbose": "Name()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Nullable",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.ColumnType",
        "structNameShort": "ColumnType",
        "methodsCompletion": "Nullable()",
        "methodsCompletionVerbose": "Nullable()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ScanType",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.ColumnType",
        "structNameShort": "ColumnType",
        "methodsCompletion": "ScanType()",
        "methodsCompletionVerbose": "ScanType()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "BeginTx",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "BeginTx(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: *sql.TxOptions*/})",
        "methodsCompletionVerbose": "BeginTx(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExecContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "ExecContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "ExecContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PingContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "PingContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "PingContext(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrepareContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "PrepareContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "PrepareContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "QueryContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRowContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "QueryRowContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRowContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Raw",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Conn",
        "structNameShort": "Conn",
        "methodsCompletion": "Raw(${1:v2 /*type: func (v1: any) return(error) */})",
        "methodsCompletionVerbose": "Raw(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Begin",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Begin()",
        "methodsCompletionVerbose": "Begin()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "BeginTx",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "BeginTx(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: *sql.TxOptions*/})",
        "methodsCompletionVerbose": "BeginTx(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Conn",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Conn(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "Conn(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Driver",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Driver()",
        "methodsCompletionVerbose": "Driver()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Exec(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Exec(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExecContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "ExecContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "ExecContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Ping",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Ping()",
        "methodsCompletionVerbose": "Ping()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PingContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "PingContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "PingContext(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Prepare",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Prepare(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Prepare(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrepareContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "PrepareContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "PrepareContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Query",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Query(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Query(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "QueryContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRow",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "QueryRow(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRow(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRowContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "QueryRowContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRowContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetConnMaxIdleTime",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "SetConnMaxIdleTime(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "SetConnMaxIdleTime(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetConnMaxLifetime",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "SetConnMaxLifetime(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "SetConnMaxLifetime(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetMaxIdleConns",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "SetMaxIdleConns(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetMaxIdleConns(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetMaxOpenConns",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "SetMaxOpenConns(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetMaxOpenConns(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Stats",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.DB",
        "structNameShort": "DB",
        "methodsCompletion": "Stats()",
        "methodsCompletionVerbose": "Stats()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Idle",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "InUse",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxIdleClosed",
        "fieldTypeVerbose": "int64",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxIdleTimeClosed",
        "fieldTypeVerbose": "int64",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxLifetimeClosed",
        "fieldTypeVerbose": "int64",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxOpenConnections",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OpenConnections",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "WaitCount",
        "fieldTypeVerbose": "int64",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "WaitDuration",
        "fieldTypeVerbose": "time.Duration",
        "libName": "cve",
        "structName": "database/sql.DBStats",
        "structNameShort": "DBStats",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Err",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Row",
        "structNameShort": "Row",
        "methodsCompletion": "Err()",
        "methodsCompletionVerbose": "Err()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Scan",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Row",
        "structNameShort": "Row",
        "methodsCompletion": "Scan(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Scan(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ColumnTypes",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "ColumnTypes()",
        "methodsCompletionVerbose": "ColumnTypes()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Columns",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "Columns()",
        "methodsCompletionVerbose": "Columns()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Err",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "Err()",
        "methodsCompletionVerbose": "Err()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Next",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "Next()",
        "methodsCompletionVerbose": "Next()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NextResultSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "NextResultSet()",
        "methodsCompletionVerbose": "NextResultSet()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Scan",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Rows",
        "structNameShort": "Rows",
        "methodsCompletion": "Scan(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Scan(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "Exec(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Exec(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExecContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "ExecContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "ExecContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Query",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "Query(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Query(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "QueryContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRow",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "QueryRow(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRow(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRowContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Stmt",
        "structNameShort": "Stmt",
        "methodsCompletion": "QueryRowContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRowContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Commit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "Commit()",
        "methodsCompletionVerbose": "Commit()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "Exec(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Exec(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExecContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "ExecContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "ExecContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Prepare",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "Prepare(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Prepare(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrepareContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "PrepareContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "PrepareContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Query",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "Query(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Query(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "QueryContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRow",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "QueryRow(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRow(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryRowContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "QueryRowContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "QueryRowContext(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Rollback",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "Rollback()",
        "methodsCompletionVerbose": "Rollback()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Stmt",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "Stmt(${1:v2 /*type: *sql.Stmt*/})",
        "methodsCompletionVerbose": "Stmt(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "StmtContext",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "database/sql.Tx",
        "structNameShort": "Tx",
        "methodsCompletion": "StmtContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: *sql.Stmt*/})",
        "methodsCompletionVerbose": "StmtContext(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Isolation",
        "fieldTypeVerbose": "sql.IsolationLevel",
        "libName": "cve",
        "structName": "database/sql.TxOptions",
        "structNameShort": "TxOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ReadOnly",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "database/sql.TxOptions",
        "structNameShort": "TxOptions",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Error",
        "fieldTypeVerbose": "error",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Append",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "Append(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Append(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Clear",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "Clear()",
        "methodsCompletionVerbose": "Clear()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Count",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "Count()",
        "methodsCompletionVerbose": "Count()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Delete",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "Delete(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Delete(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Find",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "Find(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Find(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Replace",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Association",
        "structNameShort": "com/jinzhu/gorm.Association",
        "methodsCompletion": "Replace(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Replace(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Create",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Callback",
        "structNameShort": "com/jinzhu/gorm.Callback",
        "methodsCompletion": "Create()",
        "methodsCompletionVerbose": "Create()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Delete",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Callback",
        "structNameShort": "com/jinzhu/gorm.Callback",
        "methodsCompletion": "Delete()",
        "methodsCompletionVerbose": "Delete()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Query",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Callback",
        "structNameShort": "com/jinzhu/gorm.Callback",
        "methodsCompletion": "Query()",
        "methodsCompletionVerbose": "Query()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RowQuery",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Callback",
        "structNameShort": "com/jinzhu/gorm.Callback",
        "methodsCompletion": "RowQuery()",
        "methodsCompletionVerbose": "RowQuery()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Update",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Callback",
        "structNameShort": "com/jinzhu/gorm.Callback",
        "methodsCompletion": "Update()",
        "methodsCompletionVerbose": "Update()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "After",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.CallbackProcessor",
        "structNameShort": "com/jinzhu/gorm.CallbackProcessor",
        "methodsCompletion": "After(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "After(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Before",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.CallbackProcessor",
        "structNameShort": "com/jinzhu/gorm.CallbackProcessor",
        "methodsCompletion": "Before(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Before(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.CallbackProcessor",
        "structNameShort": "com/jinzhu/gorm.CallbackProcessor",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Register",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.CallbackProcessor",
        "structNameShort": "com/jinzhu/gorm.CallbackProcessor",
        "methodsCompletion": "Register(${1:v2 /*type: string*/}, ${2:v3 /*type: func (v1: *gorm.Scope) */})",
        "methodsCompletionVerbose": "Register(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Remove",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.CallbackProcessor",
        "structNameShort": "com/jinzhu/gorm.CallbackProcessor",
        "methodsCompletion": "Remove(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Remove(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Replace",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.CallbackProcessor",
        "structNameShort": "com/jinzhu/gorm.CallbackProcessor",
        "methodsCompletion": "Replace(${1:v2 /*type: string*/}, ${2:v3 /*type: func (v1: *gorm.Scope) */})",
        "methodsCompletionVerbose": "Replace(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Error",
        "fieldTypeVerbose": "error",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RowsAffected",
        "fieldTypeVerbose": "int64",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddError",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "AddError(${1:v2 /*type: error*/})",
        "methodsCompletionVerbose": "AddError(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddForeignKey",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "AddForeignKey(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: string*/})",
        "methodsCompletionVerbose": "AddForeignKey(v2, v3, v4, v5)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddIndex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "AddIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: ...string*/})",
        "methodsCompletionVerbose": "AddIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddUniqueIndex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "AddUniqueIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: ...string*/})",
        "methodsCompletionVerbose": "AddUniqueIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Assign",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Assign(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Assign(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Association",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Association(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Association(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Attrs",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Attrs(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Attrs(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AutoMigrate",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "AutoMigrate(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "AutoMigrate(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Begin",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Begin()",
        "methodsCompletionVerbose": "Begin()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "BlockGlobalUpdate",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "BlockGlobalUpdate(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "BlockGlobalUpdate(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Callback",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Callback()",
        "methodsCompletionVerbose": "Callback()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Commit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Commit()",
        "methodsCompletionVerbose": "Commit()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CommonDB",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "CommonDB()",
        "methodsCompletionVerbose": "CommonDB()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Count",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Count(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Count(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Create",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Create(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Create(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CreateTable",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "CreateTable(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "CreateTable(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DB",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "DB()",
        "methodsCompletionVerbose": "DB()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Debug",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Debug()",
        "methodsCompletionVerbose": "Debug()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Delete",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Delete(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Delete(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Dialect",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Dialect()",
        "methodsCompletionVerbose": "Dialect()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DropColumn",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "DropColumn(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "DropColumn(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DropTable",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "DropTable(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "DropTable(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DropTableIfExists",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "DropTableIfExists(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "DropTableIfExists(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Exec(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Exec(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Find",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Find(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Find(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "First",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "First(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "First(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FirstOrCreate",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "FirstOrCreate(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "FirstOrCreate(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FirstOrInit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "FirstOrInit(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "FirstOrInit(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetErrors",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "GetErrors()",
        "methodsCompletionVerbose": "GetErrors()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Group",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Group(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Group(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "HasBlockGlobalUpdate",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "HasBlockGlobalUpdate()",
        "methodsCompletionVerbose": "HasBlockGlobalUpdate()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "HasTable",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "HasTable(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "HasTable(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Having",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Having(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Having(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "InstantSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "InstantSet(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "InstantSet(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Joins",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Joins(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Joins(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Last",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Last(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Last(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Limit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Limit(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Limit(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LogMode",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "LogMode(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "LogMode(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Model",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Model(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Model(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ModifyColumn",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "ModifyColumn(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "ModifyColumn(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "New",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "New()",
        "methodsCompletionVerbose": "New()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewRecord",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "NewRecord(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "NewRecord(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewScope",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "NewScope(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "NewScope(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Not",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Not(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Not(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Offset",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Offset(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Offset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Omit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Omit(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "Omit(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Or",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Or(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Or(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Order",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Order(${1:v2 /*type: any*/}, ${2:v3 /*type: ...bool*/})",
        "methodsCompletionVerbose": "Order(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Pluck",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Pluck(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Pluck(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Preload",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Preload(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Preload(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Preloads",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Preloads(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Preloads(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QueryExpr",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "QueryExpr()",
        "methodsCompletionVerbose": "QueryExpr()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Raw",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Raw(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Raw(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RecordNotFound",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "RecordNotFound()",
        "methodsCompletionVerbose": "RecordNotFound()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Related",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Related(${1:v2 /*type: any*/}, ${2:v3 /*type: ...string*/})",
        "methodsCompletionVerbose": "Related(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RemoveForeignKey",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "RemoveForeignKey(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "RemoveForeignKey(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RemoveIndex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "RemoveIndex(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "RemoveIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Rollback",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Rollback()",
        "methodsCompletionVerbose": "Rollback()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Row",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Row()",
        "methodsCompletionVerbose": "Row()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Rows",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Rows()",
        "methodsCompletionVerbose": "Rows()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Save",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Save(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Save(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Scan",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Scan(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Scan(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ScanRows",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "ScanRows(${1:v2 /*type: *sql.Rows*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "ScanRows(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Scopes",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Scopes(${1:v2 /*type: ...func(*gorm.DB) *gorm.DB*/})",
        "methodsCompletionVerbose": "Scopes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Select",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Select(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Select(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetJoinTableHandler",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "SetJoinTableHandler(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: gorm.JoinTableHandlerInterface*/})",
        "methodsCompletionVerbose": "SetJoinTableHandler(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetLogger",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "SetLogger(${1:v2 /*type: gorm.logger*/})",
        "methodsCompletionVerbose": "SetLogger(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SingularTable",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "SingularTable(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SingularTable(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SubQuery",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "SubQuery()",
        "methodsCompletionVerbose": "SubQuery()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Table",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Table(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Table(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Take",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Take(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Take(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Unscoped",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Unscoped()",
        "methodsCompletionVerbose": "Unscoped()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Update",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Update(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Update(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UpdateColumn",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "UpdateColumn(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "UpdateColumn(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UpdateColumns",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "UpdateColumns(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "UpdateColumns(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Updates",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Updates(${1:v2 /*type: any*/}, ${2:v3 /*type: ...bool*/})",
        "methodsCompletionVerbose": "Updates(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Where",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.DB",
        "structNameShort": "com/jinzhu/gorm.DB",
        "methodsCompletion": "Where(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Where(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Field",
        "fieldTypeVerbose": "reflect.Value",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsBlank",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StructField",
        "fieldTypeVerbose": "*gorm.StructField",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "Set(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsDelete",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "TagSettingsDelete(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsDelete(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsDelete",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "TagSettingsDelete(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsDelete(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsGet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "TagSettingsGet(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsGet(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsGet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "TagSettingsGet(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsGet(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "TagSettingsSet(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsSet(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Field",
        "structNameShort": "com/jinzhu/gorm.Field",
        "methodsCompletion": "TagSettingsSet(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsSet(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CreatedAt",
        "fieldTypeVerbose": "time.Time",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Model",
        "structNameShort": "com/jinzhu/gorm.Model",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DeletedAt",
        "fieldTypeVerbose": "*time.Time",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Model",
        "structNameShort": "com/jinzhu/gorm.Model",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ID",
        "fieldTypeVerbose": "uint",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Model",
        "structNameShort": "com/jinzhu/gorm.Model",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "UpdatedAt",
        "fieldTypeVerbose": "time.Time",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Model",
        "structNameShort": "com/jinzhu/gorm.Model",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ModelType",
        "fieldTypeVerbose": "reflect.Type",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.ModelStruct",
        "structNameShort": "com/jinzhu/gorm.ModelStruct",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PrimaryFields",
        "fieldTypeVerbose": "[]*gorm.StructField",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.ModelStruct",
        "structNameShort": "com/jinzhu/gorm.ModelStruct",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StructFields",
        "fieldTypeVerbose": "[]*gorm.StructField",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.ModelStruct",
        "structNameShort": "com/jinzhu/gorm.ModelStruct",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TableName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.ModelStruct",
        "structNameShort": "com/jinzhu/gorm.ModelStruct",
        "methodsCompletion": "TableName(${1:v2 /*type: *gorm.DB*/})",
        "methodsCompletionVerbose": "TableName(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "AssociationForeignDBNames",
        "fieldTypeVerbose": "[]string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "AssociationForeignFieldNames",
        "fieldTypeVerbose": "[]string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ForeignDBNames",
        "fieldTypeVerbose": "[]string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ForeignFieldNames",
        "fieldTypeVerbose": "[]string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "JoinTableHandler",
        "fieldTypeVerbose": "gorm.JoinTableHandlerInterface",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Kind",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PolymorphicDBName",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PolymorphicType",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PolymorphicValue",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Relationship",
        "structNameShort": "com/jinzhu/gorm.Relationship",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SQL",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SQLVars",
        "fieldTypeVerbose": "[]any",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Search",
        "fieldTypeVerbose": "*gorm.search",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AddToVars",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "AddToVars(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "AddToVars(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Begin",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Begin()",
        "methodsCompletionVerbose": "Begin()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CallMethod",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "CallMethod(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "CallMethod(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CombinedConditionSql",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "CombinedConditionSql()",
        "methodsCompletionVerbose": "CombinedConditionSql()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CommitOrRollback",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "CommitOrRollback()",
        "methodsCompletionVerbose": "CommitOrRollback()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "DB",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "DB()",
        "methodsCompletionVerbose": "DB()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Dialect",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Dialect()",
        "methodsCompletionVerbose": "Dialect()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Err",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Err(${1:v2 /*type: error*/})",
        "methodsCompletionVerbose": "Err(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Exec()",
        "methodsCompletionVerbose": "Exec()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FieldByName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "FieldByName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FieldByName(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Fields",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Fields()",
        "methodsCompletionVerbose": "Fields()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetModelStruct",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "GetModelStruct()",
        "methodsCompletionVerbose": "GetModelStruct()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetStructFields",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "GetStructFields()",
        "methodsCompletionVerbose": "GetStructFields()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "HasColumn",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "HasColumn(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "HasColumn(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "HasError",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "HasError()",
        "methodsCompletionVerbose": "HasError()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IndirectValue",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "IndirectValue()",
        "methodsCompletionVerbose": "IndirectValue()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "InstanceGet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "InstanceGet(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "InstanceGet(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "InstanceID",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "InstanceID()",
        "methodsCompletionVerbose": "InstanceID()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "InstanceSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "InstanceSet(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "InstanceSet(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Log",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Log(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Log(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "New",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "New(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "New(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewDB",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "NewDB()",
        "methodsCompletionVerbose": "NewDB()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "OmitAttrs",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "OmitAttrs()",
        "methodsCompletionVerbose": "OmitAttrs()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrimaryField",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "PrimaryField()",
        "methodsCompletionVerbose": "PrimaryField()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrimaryFields",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "PrimaryFields()",
        "methodsCompletionVerbose": "PrimaryFields()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrimaryKey",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "PrimaryKey()",
        "methodsCompletionVerbose": "PrimaryKey()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrimaryKeyValue",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "PrimaryKeyValue()",
        "methodsCompletionVerbose": "PrimaryKeyValue()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrimaryKeyZero",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "PrimaryKeyZero()",
        "methodsCompletionVerbose": "PrimaryKeyZero()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Quote",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Quote(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Quote(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "QuotedTableName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "QuotedTableName()",
        "methodsCompletionVerbose": "QuotedTableName()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Raw",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Raw(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Raw(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SQLDB",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "SQLDB()",
        "methodsCompletionVerbose": "SQLDB()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SelectAttrs",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "SelectAttrs()",
        "methodsCompletionVerbose": "SelectAttrs()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetColumn",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "SetColumn(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "SetColumn(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SkipLeft",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "SkipLeft()",
        "methodsCompletionVerbose": "SkipLeft()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TableName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.Scope",
        "structNameShort": "com/jinzhu/gorm.Scope",
        "methodsCompletion": "TableName()",
        "methodsCompletionVerbose": "TableName()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DBName",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "HasDefaultValue",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsForeignKey",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsIgnored",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsNormal",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsPrimaryKey",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsScanner",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Names",
        "fieldTypeVerbose": "[]string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Relationship",
        "fieldTypeVerbose": "*gorm.Relationship",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Struct",
        "fieldTypeVerbose": "reflect.StructField",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Tag",
        "fieldTypeVerbose": "reflect.StructTag",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TagSettings",
        "fieldTypeVerbose": "map[string]string",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsDelete",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "TagSettingsDelete(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsDelete(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsGet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "TagSettingsGet(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsGet(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TagSettingsSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.StructField",
        "structNameShort": "com/jinzhu/gorm.StructField",
        "methodsCompletion": "TagSettingsSet(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "TagSettingsSet(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Unscoped",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Assign",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Assign(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Assign(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Attrs",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Attrs(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Attrs(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Group",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Group(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Group(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Having",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Having(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Having(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Joins",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Joins(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Joins(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Limit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Limit(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Limit(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Not",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Not(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Not(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Offset",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Offset(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Offset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Omit",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Omit(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "Omit(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Or",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Or(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Or(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Order",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Order(${1:v2 /*type: any*/}, ${2:v3 /*type: ...bool*/})",
        "methodsCompletionVerbose": "Order(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Preload",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Preload(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Preload(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Raw",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Raw(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "Raw(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Select",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Select(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Select(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Table",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Table(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Table(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Where",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/jinzhu/gorm.search",
        "structNameShort": "com/jinzhu/gorm.search",
        "methodsCompletion": "Where(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Where(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "AccessVectorCounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BySources",
        "fieldTypeVerbose": "map[string]*cve.Statistics",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CWECounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ComplexityCounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalComplexityCounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NetworkComplexityCounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NetworkCount",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NoAuthNetworkCount",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NoAuthNetworkHighExploitableCount",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SeverityCounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Source",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Total",
        "fieldTypeVerbose": "int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YearsCounter",
        "fieldTypeVerbose": "map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YearsSeverityCounter",
        "fieldTypeVerbose": "map[string]map[string]int",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Feed",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "Feed(${1:v2 /*type: *cveresources.CVE*/})",
        "methodsCompletionVerbose": "Feed(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FeedSource",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "FeedSource(${1:v2 /*type: string*/}, ${2:v3 /*type: *cveresources.CVE*/})",
        "methodsCompletionVerbose": "FeedSource(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGraphs",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/cve.Statistics",
        "methodsCompletion": "ToGraphs()",
        "methodsCompletionVerbose": "ToGraphs()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AccessComplexity",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AccessVector",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Authentication",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AvailabilityImpact",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BaseCVSSv2Score",
        "fieldTypeVerbose": "float64",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CPEConfigurations",
        "fieldTypeVerbose": "bytes",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVE",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVSSVectorString",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVSSVersion",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CWE",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ConfidentialityImpact",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptionMain",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptionMainZh",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Descriptions",
        "fieldTypeVerbose": "bytes",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExploitabilityScore",
        "fieldTypeVerbose": "float64",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ImpactScore",
        "fieldTypeVerbose": "float64",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IntegrityImpact",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LastModifiedData",
        "fieldTypeVerbose": "time.Time",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ObtainAllPrivilege",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ObtainOtherPrivilege",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ObtainUserPrivilege",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ProblemType",
        "fieldTypeVerbose": "bytes",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Product",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PublishedDate",
        "fieldTypeVerbose": "time.Time",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "References",
        "fieldTypeVerbose": "bytes",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Severity",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Solution",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TitleZh",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UserInteractionRequired",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Vendor",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGPRCModel",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "ToGPRCModel()",
        "methodsCompletionVerbose": "ToGPRCModel()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Year",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CVE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CVE",
        "methodsCompletion": "Year()",
        "methodsCompletionVerbose": "Year()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Edition",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Language",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Part",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Product",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Update",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Vendor",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LikeSearchString",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "LikeSearchString()",
        "methodsCompletionVerbose": "LikeSearchString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "github.com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "structNameShort": "com/yaklang/yaklang/common/fp/webfingerprint.CPE",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Key",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.MapIter",
        "structNameShort": "MapIter",
        "methodsCompletion": "Key()",
        "methodsCompletionVerbose": "Key()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Next",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.MapIter",
        "structNameShort": "MapIter",
        "methodsCompletion": "Next()",
        "methodsCompletionVerbose": "Next()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.MapIter",
        "structNameShort": "MapIter",
        "methodsCompletion": "Reset(${1:v2 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "Reset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Value",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.MapIter",
        "structNameShort": "MapIter",
        "methodsCompletion": "Value()",
        "methodsCompletionVerbose": "Value()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Anonymous",
        "fieldTypeVerbose": "bool",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Index",
        "fieldTypeVerbose": "[]int",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Offset",
        "fieldTypeVerbose": "uintptr",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PkgPath",
        "fieldTypeVerbose": "string",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Tag",
        "fieldTypeVerbose": "reflect.StructTag",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "reflect.Type",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsExported",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.StructField",
        "structNameShort": "StructField",
        "methodsCompletion": "IsExported()",
        "methodsCompletionVerbose": "IsExported()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Addr",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Addr()",
        "methodsCompletionVerbose": "Addr()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bool",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Bool()",
        "methodsCompletionVerbose": "Bool()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Bytes()",
        "methodsCompletionVerbose": "Bytes()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Call",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Call(${1:v2 /*type: []reflect.Value*/})",
        "methodsCompletionVerbose": "Call(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CallSlice",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CallSlice(${1:v2 /*type: []reflect.Value*/})",
        "methodsCompletionVerbose": "CallSlice(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanAddr",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanAddr()",
        "methodsCompletionVerbose": "CanAddr()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanComplex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanComplex()",
        "methodsCompletionVerbose": "CanComplex()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanConvert",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanConvert(${1:v2 /*type: reflect.Type*/})",
        "methodsCompletionVerbose": "CanConvert(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanFloat",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanFloat()",
        "methodsCompletionVerbose": "CanFloat()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanInt",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanInt()",
        "methodsCompletionVerbose": "CanInt()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanInterface",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanInterface()",
        "methodsCompletionVerbose": "CanInterface()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanSet",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanSet()",
        "methodsCompletionVerbose": "CanSet()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CanUint",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "CanUint()",
        "methodsCompletionVerbose": "CanUint()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Cap",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Cap()",
        "methodsCompletionVerbose": "Cap()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Comparable",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Comparable()",
        "methodsCompletionVerbose": "Comparable()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Complex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Complex()",
        "methodsCompletionVerbose": "Complex()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Convert",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Convert(${1:v2 /*type: reflect.Type*/})",
        "methodsCompletionVerbose": "Convert(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Elem",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Elem()",
        "methodsCompletionVerbose": "Elem()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Equal",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Equal(${1:v2 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "Equal(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Field",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Field(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Field(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FieldByIndex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "FieldByIndex(${1:v2 /*type: []int*/})",
        "methodsCompletionVerbose": "FieldByIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FieldByIndexErr",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "FieldByIndexErr(${1:v2 /*type: []int*/})",
        "methodsCompletionVerbose": "FieldByIndexErr(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FieldByName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "FieldByName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FieldByName(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FieldByNameFunc",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "FieldByNameFunc(${1:v2 /*type: func (v1: string) return(bool) */})",
        "methodsCompletionVerbose": "FieldByNameFunc(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Float",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Float()",
        "methodsCompletionVerbose": "Float()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Grow",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Grow(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Grow(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Index",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Index(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Index(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Int",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Int()",
        "methodsCompletionVerbose": "Int()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Interface",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Interface()",
        "methodsCompletionVerbose": "Interface()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "InterfaceData",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "InterfaceData()",
        "methodsCompletionVerbose": "InterfaceData()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsNil",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "IsNil()",
        "methodsCompletionVerbose": "IsNil()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsValid",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "IsValid()",
        "methodsCompletionVerbose": "IsValid()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsZero",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "IsZero()",
        "methodsCompletionVerbose": "IsZero()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Kind",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Kind()",
        "methodsCompletionVerbose": "Kind()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Len",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Len()",
        "methodsCompletionVerbose": "Len()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MapIndex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "MapIndex(${1:v2 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "MapIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MapKeys",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "MapKeys()",
        "methodsCompletionVerbose": "MapKeys()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MapRange",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "MapRange()",
        "methodsCompletionVerbose": "MapRange()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Method",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Method(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Method(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MethodByName",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "MethodByName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MethodByName(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NumField",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "NumField()",
        "methodsCompletionVerbose": "NumField()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NumMethod",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "NumMethod()",
        "methodsCompletionVerbose": "NumMethod()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "OverflowComplex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "OverflowComplex(${1:v2 /*type: complex128*/})",
        "methodsCompletionVerbose": "OverflowComplex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "OverflowFloat",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "OverflowFloat(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "OverflowFloat(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "OverflowInt",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "OverflowInt(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "OverflowInt(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "OverflowUint",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "OverflowUint(${1:v2 /*type: uint64*/})",
        "methodsCompletionVerbose": "OverflowUint(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Pointer",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Pointer()",
        "methodsCompletionVerbose": "Pointer()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Recv",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Recv()",
        "methodsCompletionVerbose": "Recv()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Send",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Send(${1:v2 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "Send(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Set(${1:v2 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "Set(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetBool",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetBool(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetBool(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetBytes",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetBytes(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "SetBytes(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetCap",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetCap(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetCap(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetComplex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetComplex(${1:v2 /*type: complex128*/})",
        "methodsCompletionVerbose": "SetComplex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetFloat",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetFloat(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "SetFloat(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetInt",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetInt(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "SetInt(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetIterKey",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetIterKey(${1:v2 /*type: *reflect.MapIter*/})",
        "methodsCompletionVerbose": "SetIterKey(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetIterValue",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetIterValue(${1:v2 /*type: *reflect.MapIter*/})",
        "methodsCompletionVerbose": "SetIterValue(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetLen",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetLen(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetLen(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetMapIndex",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetMapIndex(${1:v2 /*type: reflect.Value*/}, ${2:v3 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "SetMapIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetPointer",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetPointer(${1:v2 /*type: unsafe.Pointer*/})",
        "methodsCompletionVerbose": "SetPointer(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetString",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetUint",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetUint(${1:v2 /*type: uint64*/})",
        "methodsCompletionVerbose": "SetUint(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetZero",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "SetZero()",
        "methodsCompletionVerbose": "SetZero()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Slice",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Slice(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Slice(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Slice3",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Slice3(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/}, ${3:v4 /*type: int*/})",
        "methodsCompletionVerbose": "Slice3(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TryRecv",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "TryRecv()",
        "methodsCompletionVerbose": "TryRecv()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TrySend",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "TrySend(${1:v2 /*type: reflect.Value*/})",
        "methodsCompletionVerbose": "TrySend(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Type",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Type()",
        "methodsCompletionVerbose": "Type()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Uint",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "Uint()",
        "methodsCompletionVerbose": "Uint()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnsafeAddr",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "UnsafeAddr()",
        "methodsCompletionVerbose": "UnsafeAddr()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnsafePointer",
        "fieldTypeVerbose": "",
        "libName": "cve",
        "structName": "reflect.Value",
        "structNameShort": "Value",
        "methodsCompletion": "UnsafePointer()",
        "methodsCompletionVerbose": "UnsafePointer()",
        "isGolangBuildOrigin": true
      }
    ],
    "cwe": [
      {
        "isMethod": false,
        "fieldName": "Abstraction",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CAPECVectors",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVEExamples",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CWESolution",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptionZh",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExtendedDescription",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExtendedDescriptionZh",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Id",
        "fieldTypeVerbose": "int",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IdStr",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Incomplete",
        "fieldTypeVerbose": "bool",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "InferTo",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NameZh",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Parent",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeLanguage",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Requires",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Siblings",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Stable",
        "fieldTypeVerbose": "bool",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Status",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CWEString",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "CWEString()",
        "methodsCompletionVerbose": "CWEString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGRPCModel",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/cve/cveresources.CWE",
        "structNameShort": "com/yaklang/yaklang/common/cve/cveresources.CWE",
        "methodsCompletion": "ToGRPCModel()",
        "methodsCompletionVerbose": "ToGRPCModel()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CWE",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptionZh",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Incomplete",
        "fieldTypeVerbose": "bool",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LongDescription",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LongDescriptionZh",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NameZh",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeCVE",
        "fieldTypeVerbose": "[]string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeLanguage",
        "fieldTypeVerbose": "[]string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Solution",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Stable",
        "fieldTypeVerbose": "bool",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Status",
        "fieldTypeVerbose": "string",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCWE",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetCWE()",
        "methodsCompletionVerbose": "GetCWE()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetDescription",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetDescription()",
        "methodsCompletionVerbose": "GetDescription()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetDescriptionZh",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetDescriptionZh()",
        "methodsCompletionVerbose": "GetDescriptionZh()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetIncomplete",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetIncomplete()",
        "methodsCompletionVerbose": "GetIncomplete()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLongDescription",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetLongDescription()",
        "methodsCompletionVerbose": "GetLongDescription()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLongDescriptionZh",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetLongDescriptionZh()",
        "methodsCompletionVerbose": "GetLongDescriptionZh()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetName",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetName()",
        "methodsCompletionVerbose": "GetName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetNameZh",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetNameZh()",
        "methodsCompletionVerbose": "GetNameZh()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRelativeCVE",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetRelativeCVE()",
        "methodsCompletionVerbose": "GetRelativeCVE()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRelativeLanguage",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetRelativeLanguage()",
        "methodsCompletionVerbose": "GetRelativeLanguage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSolution",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetSolution()",
        "methodsCompletionVerbose": "GetSolution()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetStable",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetStable()",
        "methodsCompletionVerbose": "GetStable()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetStatus",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "GetStatus()",
        "methodsCompletionVerbose": "GetStatus()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "cwe",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.CWEDetail",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      }
    ],
    "db": [
      {
        "isMethod": false,
        "fieldName": "City",
        "fieldTypeVerbose": "struct { GeoNameID uint \"maxminddb:\\\"geoname_id\\\"\"; Names map[string]string \"maxminddb:\\\"names\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Continent",
        "fieldTypeVerbose": "struct { Code string \"maxminddb:\\\"code\\\"\"; GeoNameID uint \"maxminddb:\\\"geoname_id\\\"\"; Names map[string]string \"maxminddb:\\\"names\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Country",
        "fieldTypeVerbose": "struct { GeoNameID uint \"maxminddb:\\\"geoname_id\\\"\"; IsInEuropeanUnion bool \"maxminddb:\\\"is_in_european_union\\\"\"; IsoCode string \"maxminddb:\\\"iso_code\\\"\"; Names map[string]string \"maxminddb:\\\"names\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Location",
        "fieldTypeVerbose": "struct { AccuracyRadius uint16 \"maxminddb:\\\"accuracy_radius\\\"\"; Latitude float64 \"maxminddb:\\\"latitude\\\"\"; Longitude float64 \"maxminddb:\\\"longitude\\\"\"; MetroCode uint \"maxminddb:\\\"metro_code\\\"\"; TimeZone string \"maxminddb:\\\"time_zone\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Postal",
        "fieldTypeVerbose": "struct { Code string \"maxminddb:\\\"code\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RegisteredCountry",
        "fieldTypeVerbose": "struct { GeoNameID uint \"maxminddb:\\\"geoname_id\\\"\"; IsInEuropeanUnion bool \"maxminddb:\\\"is_in_european_union\\\"\"; IsoCode string \"maxminddb:\\\"iso_code\\\"\"; Names map[string]string \"maxminddb:\\\"names\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RepresentedCountry",
        "fieldTypeVerbose": "struct { GeoNameID uint \"maxminddb:\\\"geoname_id\\\"\"; IsInEuropeanUnion bool \"maxminddb:\\\"is_in_european_union\\\"\"; IsoCode string \"maxminddb:\\\"iso_code\\\"\"; Names map[string]string \"maxminddb:\\\"names\\\"\"; Type string \"maxminddb:\\\"type\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Subdivisions",
        "fieldTypeVerbose": "[]struct { GeoNameID uint \"maxminddb:\\\"geoname_id\\\"\"; IsoCode string \"maxminddb:\\\"iso_code\\\"\"; Names map[string]string \"maxminddb:\\\"names\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Traits",
        "fieldTypeVerbose": "struct { IsAnonymousProxy bool \"maxminddb:\\\"is_anonymous_proxy\\\"\"; IsSatelliteProvider bool \"maxminddb:\\\"is_satellite_provider\\\"\" }",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.City",
        "structNameShort": "com/yaklang/yaklang/common/geo.City",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AutonomousSystemNumber",
        "fieldTypeVerbose": "uint",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.ISP",
        "structNameShort": "com/yaklang/yaklang/common/geo.ISP",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AutonomousSystemOrganization",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.ISP",
        "structNameShort": "com/yaklang/yaklang/common/geo.ISP",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ISP",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.ISP",
        "structNameShort": "com/yaklang/yaklang/common/geo.ISP",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Organization",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/geo.ISP",
        "structNameShort": "com/yaklang/yaklang/common/geo.ISP",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Domain",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HTTPTitle",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPAddr",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPInteger",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tags",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CalcHash",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "CalcHash()",
        "methodsCompletionVerbose": "CalcHash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FillDomainHTTPInfo",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Domain",
        "methodsCompletion": "FillDomainHTTPInfo()",
        "methodsCompletionVerbose": "FillDomainHTTPInfo()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BodyLength",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ContentType",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CookieParamsTotal",
        "fieldTypeVerbose": "int",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromPlugin",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "GetParamsTotal",
        "fieldTypeVerbose": "int",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HiddenIndex",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPAddress",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPInteger",
        "fieldTypeVerbose": "int",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsHTTPS",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsWebsocket",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Method",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NoFixContentLength",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Path",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PostParamsTotal",
        "fieldTypeVerbose": "int",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Request",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Response",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RuntimeId",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SourceType",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "StatusCode",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tags",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Url",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "WebsocketHash",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddTag",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "AddTag(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "AddTag(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddTagToFirst",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "AddTagToFirst(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "AddTagToFirst(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Blue",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Blue()",
        "methodsCompletionVerbose": "Blue()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CalcHash",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "CalcHash()",
        "methodsCompletionVerbose": "CalcHash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ColorSharp",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "ColorSharp(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "ColorSharp(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cyan",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Cyan()",
        "methodsCompletionVerbose": "Cyan()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Green",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Green()",
        "methodsCompletionVerbose": "Green()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Grey",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Grey()",
        "methodsCompletionVerbose": "Grey()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Orange",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Orange()",
        "methodsCompletionVerbose": "Orange()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Purple",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Purple()",
        "methodsCompletionVerbose": "Purple()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Red",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Red()",
        "methodsCompletionVerbose": "Red()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoveColor",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "RemoveColor()",
        "methodsCompletionVerbose": "RemoveColor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGRPCModel",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "ToGRPCModel(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "ToGRPCModel(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGRPCModelFull",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "ToGRPCModelFull()",
        "methodsCompletionVerbose": "ToGRPCModelFull()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Yellow",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.HTTPFlow",
        "methodsCompletion": "Yellow()",
        "methodsCompletionVerbose": "Yellow()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Domains",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPInteger",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsInPublicNet",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Host",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CPE",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fingerprint",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "From",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HtmlTitle",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPInteger",
        "fieldTypeVerbose": "int",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Proto",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Reason",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ServiceType",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "State",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TaskName",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CalcHash",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Port",
        "methodsCompletion": "CalcHash()",
        "methodsCompletionVerbose": "CalcHash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Author",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BaseOnlineId",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Content",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "EnablePluginSelector",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ForceInteractive",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromGit",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromLocal",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromStore",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "GeneralModuleKey",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "GeneralModuleVerbose",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HeadImg",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Help",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ignored",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsBatchScript",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsCorePlugin",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsExternal",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsGeneralModule",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsHistory",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Level",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalPath",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineBaseUrl",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineContributors",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineGroup",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineId",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineIsPrivate",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineOfficial",
        "fieldTypeVerbose": "bool",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlineScriptName",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Params",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PluginSelectorTypes",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ScriptName",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tags",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UserId",
        "fieldTypeVerbose": "int64",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Uuid",
        "fieldTypeVerbose": "string",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGRPCModel",
        "fieldTypeVerbose": "",
        "libName": "db",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.YakScript",
        "methodsCompletion": "ToGRPCModel()",
        "methodsCompletionVerbose": "ToGRPCModel()",
        "isGolangBuildOrigin": false
      }
    ],
    "dyn": [
      {
        "isMethod": false,
        "fieldName": "Engine",
        "fieldTypeVerbose": "*antlr4yak.Engine",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak.yakVariable",
        "structNameShort": "com/yaklang/yaklang/common/yak.yakVariable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FilePath",
        "fieldTypeVerbose": "string",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak.yakVariable",
        "structNameShort": "com/yaklang/yaklang/common/yak.yakVariable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak.yakVariable",
        "structNameShort": "com/yaklang/yaklang/common/yak.yakVariable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YakMod",
        "fieldTypeVerbose": "string",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak.yakVariable",
        "structNameShort": "com/yaklang/yaklang/common/yak.yakVariable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Callable",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak.yakVariable",
        "structNameShort": "com/yaklang/yaklang/common/yak.yakVariable",
        "methodsCompletion": "Callable()",
        "methodsCompletionVerbose": "Callable()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallYakFunction",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "CallYakFunction(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []any*/})",
        "methodsCompletionVerbose": "CallYakFunction(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallYakFunctionNative",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "CallYakFunctionNative(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: *yakvm.Function*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "CallYakFunctionNative(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Compile",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "Compile(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Compile(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CopyVars",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "CopyVars()",
        "methodsCompletionVerbose": "CopyVars()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "EnableDebug",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "EnableDebug()",
        "methodsCompletionVerbose": "EnableDebug()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "EnableStrictMode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "EnableStrictMode()",
        "methodsCompletionVerbose": "EnableStrictMode()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Eval",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "Eval(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "Eval(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "EvalInline",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "EvalInline(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "EvalInline(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "EvalWithInline",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "EvalWithInline(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: bool*/})",
        "methodsCompletionVerbose": "EvalWithInline(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ExecYakc",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "ExecYakc(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: string*/})",
        "methodsCompletionVerbose": "ExecYakc(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ExecYakcWithCode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "ExecYakcWithCode(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: string*/})",
        "methodsCompletionVerbose": "ExecYakcWithCode(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ExecuteAsBooleanExpression",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "ExecuteAsBooleanExpression(${1:v2 /*type: string*/}, ${2:v3 /*type: map[string]any*/})",
        "methodsCompletionVerbose": "ExecuteAsBooleanExpression(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ExecuteAsExpression",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "ExecuteAsExpression(${1:v2 /*type: string*/}, ${2:v3 /*type: map[string]any*/})",
        "methodsCompletionVerbose": "ExecuteAsExpression(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FormattedAndSyntaxChecking",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "FormattedAndSyntaxChecking(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormattedAndSyntaxChecking(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCurrentScope",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetCurrentScope()",
        "methodsCompletionVerbose": "GetCurrentScope()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetFntable",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetFntable()",
        "methodsCompletionVerbose": "GetFntable()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLastStackValue",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetLastStackValue()",
        "methodsCompletionVerbose": "GetLastStackValue()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetScopeInspects",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetScopeInspects()",
        "methodsCompletionVerbose": "GetScopeInspects()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSymNames",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetSymNames()",
        "methodsCompletionVerbose": "GetSymNames()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetVM",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetVM()",
        "methodsCompletionVerbose": "GetVM()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetVar",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "GetVar(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetVar(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "HaveEvaluatedCode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "HaveEvaluatedCode()",
        "methodsCompletionVerbose": "HaveEvaluatedCode()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ImportLibs",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "ImportLibs(${1:v2 /*type: map[string]any*/})",
        "methodsCompletionVerbose": "ImportLibs(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ImportSubLibs",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "ImportSubLibs(${1:v2 /*type: string*/}, ${2:v3 /*type: map[string]any*/})",
        "methodsCompletionVerbose": "ImportSubLibs(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LoadCode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "LoadCode(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: map[string]any*/})",
        "methodsCompletionVerbose": "LoadCode(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "Marshal(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "Marshal(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MustCompile",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "MustCompile(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MustCompile(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RunFile",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "RunFile(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "RunFile(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SafeEval",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SafeEval(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SafeEval(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SafeEvalInline",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SafeEvalInline(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SafeEvalInline(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SafeExecYakc",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SafeExecYakc(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: string*/})",
        "methodsCompletionVerbose": "SafeExecYakc(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SafeExecYakcWithCode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SafeExecYakcWithCode(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: string*/})",
        "methodsCompletionVerbose": "SafeExecYakcWithCode(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDebugCallback",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SetDebugCallback(${1:v2 /*type: func (v1: *yakvm.Debugger) */})",
        "methodsCompletionVerbose": "SetDebugCallback(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDebugInit",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SetDebugInit(${1:v2 /*type: func (v1: *yakvm.Debugger) */})",
        "methodsCompletionVerbose": "SetDebugInit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDebugMode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SetDebugMode(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetDebugMode(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetSourceFilePath",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SetSourceFilePath(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetSourceFilePath(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetStrictMode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SetStrictMode(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetStrictMode(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetVar",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "SetVar(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "SetVar(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "UnMarshal",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "UnMarshal(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: string*/})",
        "methodsCompletionVerbose": "UnMarshal(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Var",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak.Engine",
        "methodsCompletion": "Var(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Var(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Copy",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "Copy(${1:v2 /*type: *yakvm.Scope*/})",
        "methodsCompletionVerbose": "Copy(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetActualName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "GetActualName()",
        "methodsCompletionVerbose": "GetActualName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetBindName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "GetBindName()",
        "methodsCompletionVerbose": "GetBindName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCodes",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "GetCodes()",
        "methodsCompletionVerbose": "GetCodes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "GetName()",
        "methodsCompletionVerbose": "GetName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSymbolId",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "GetSymbolId()",
        "methodsCompletionVerbose": "GetSymbolId()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetUUID",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "GetUUID()",
        "methodsCompletionVerbose": "GetUUID()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsVariableParameter",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "IsVariableParameter()",
        "methodsCompletionVerbose": "IsVariableParameter()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetIsVariableParameter",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "SetIsVariableParameter(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetIsVariableParameter(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "SetName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetParamSymbols",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "SetParamSymbols(${1:v2 /*type: []int*/})",
        "methodsCompletionVerbose": "SetParamSymbols(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetSourceCode",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "SetSourceCode(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetSourceCode(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetSymbol",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "SetSymbol(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetSymbol(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Function",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CreateSubScope",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "CreateSubScope(${1:v2 /*type: *yakvm.SymbolTable*/})",
        "methodsCompletionVerbose": "CreateSubScope(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAllIdInScopes",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetAllIdInScopes()",
        "methodsCompletionVerbose": "GetAllIdInScopes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAllNameAndValueInAllScopes",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetAllNameAndValueInAllScopes()",
        "methodsCompletionVerbose": "GetAllNameAndValueInAllScopes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAllNameAndValueInScopes",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetAllNameAndValueInScopes()",
        "methodsCompletionVerbose": "GetAllNameAndValueInScopes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetNameById",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetNameById(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "GetNameById(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSymTable",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetSymTable()",
        "methodsCompletionVerbose": "GetSymTable()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetValueByID",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetValueByID(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "GetValueByID(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetValueByName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "GetValueByName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetValueByName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "InCurrentScope",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "InCurrentScope(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "InCurrentScope(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsRoot",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "IsRoot()",
        "methodsCompletionVerbose": "IsRoot()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "NewValueByID",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "NewValueByID(${1:v2 /*type: int*/}, ${2:v3 /*type: *yakvm.Value*/})",
        "methodsCompletionVerbose": "NewValueByID(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetSymTable",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "SetSymTable(${1:v2 /*type: *yakvm.SymbolTable*/})",
        "methodsCompletionVerbose": "SetSymTable(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetVerbose",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.Scope",
        "methodsCompletion": "SetVerbose(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetVerbose(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "InitedId",
        "fieldTypeVerbose": "map[int]struct {}",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Verbose",
        "fieldTypeVerbose": "string",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CreateSubSymbolTable",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "CreateSubSymbolTable(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "CreateSubSymbolTable(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLocalSymbolByVariableName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetLocalSymbolByVariableName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetLocalSymbolByVariableName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetNameByVariableId",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetNameByVariableId(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "GetNameByVariableId(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetParentSymbolTable",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetParentSymbolTable()",
        "methodsCompletionVerbose": "GetParentSymbolTable()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRoot",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetRoot()",
        "methodsCompletionVerbose": "GetRoot()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSymbolByVariableName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetSymbolByVariableName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetSymbolByVariableName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSymbolTableById",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetSymbolTableById(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "GetSymbolTableById(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTableCount",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetTableCount()",
        "methodsCompletionVerbose": "GetTableCount()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTableIndex",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "GetTableIndex()",
        "methodsCompletionVerbose": "GetTableIndex()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IdIsInited",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "IdIsInited(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "IdIsInited(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNew",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "IsNew()",
        "methodsCompletionVerbose": "IsNew()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MustRoot",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "MustRoot()",
        "methodsCompletionVerbose": "MustRoot()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "NewSymbolWithReturn",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "NewSymbolWithReturn(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "NewSymbolWithReturn(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "NewSymbolWithoutName",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "NewSymbolWithoutName()",
        "methodsCompletionVerbose": "NewSymbolWithoutName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetIdIsInited",
        "fieldTypeVerbose": "",
        "libName": "dyn",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4yak/yakvm.SymbolTable",
        "methodsCompletion": "SetIdIsInited(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetIdIsInited(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "exec": [
      {
        "isMethod": true,
        "fieldName": "Chdir",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Chdir()",
        "methodsCompletionVerbose": "Chdir()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Chmod",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Chmod(${1:v2 /*type: fs.FileMode*/})",
        "methodsCompletionVerbose": "Chmod(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Chown",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Chown(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Chown(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Fd",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Fd()",
        "methodsCompletionVerbose": "Fd()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Name",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Name()",
        "methodsCompletionVerbose": "Name()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadAt",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "ReadAt(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadDir",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "ReadDir(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "ReadDir(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Readdir",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Readdir(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Readdir(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Readdirnames",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Readdirnames(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Readdirnames(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Seek",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Seek(${1:v2 /*type: int64*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Seek(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetDeadline",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetDeadline(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetReadDeadline",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetReadDeadline(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteDeadline",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetWriteDeadline(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Stat",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Stat()",
        "methodsCompletionVerbose": "Stat()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Sync",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Sync()",
        "methodsCompletionVerbose": "Sync()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SyscallConn",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "SyscallConn()",
        "methodsCompletionVerbose": "SyscallConn()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Truncate",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Truncate(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "Truncate(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteAt",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "WriteAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "WriteAt(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteString",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os.File",
        "structNameShort": "File",
        "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "WriteString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Args",
        "fieldTypeVerbose": "[]string",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Cancel",
        "fieldTypeVerbose": "func () return(error) ",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Dir",
        "fieldTypeVerbose": "string",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Env",
        "fieldTypeVerbose": "[]string",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Err",
        "fieldTypeVerbose": "error",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExtraFiles",
        "fieldTypeVerbose": "[]*os.File",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Path",
        "fieldTypeVerbose": "string",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Process",
        "fieldTypeVerbose": "*os.Process",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProcessState",
        "fieldTypeVerbose": "*os.ProcessState",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Stderr",
        "fieldTypeVerbose": "io.Writer",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Stdin",
        "fieldTypeVerbose": "io.Reader",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Stdout",
        "fieldTypeVerbose": "io.Writer",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SysProcAttr",
        "fieldTypeVerbose": "*syscall.SysProcAttr",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "WaitDelay",
        "fieldTypeVerbose": "time.Duration",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CombinedOutput",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "CombinedOutput()",
        "methodsCompletionVerbose": "CombinedOutput()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Environ",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "Environ()",
        "methodsCompletionVerbose": "Environ()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Output",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "Output()",
        "methodsCompletionVerbose": "Output()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Run",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "Run()",
        "methodsCompletionVerbose": "Run()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Start",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "Start()",
        "methodsCompletionVerbose": "Start()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "StderrPipe",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "StderrPipe()",
        "methodsCompletionVerbose": "StderrPipe()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "StdinPipe",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "StdinPipe()",
        "methodsCompletionVerbose": "StdinPipe()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "StdoutPipe",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "StdoutPipe()",
        "methodsCompletionVerbose": "StdoutPipe()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "exec",
        "structName": "os/exec.Cmd",
        "structNameShort": "Cmd",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": true
      }
    ],
    "facades": [
      {
        "isMethod": false,
        "fieldName": "ExternalHost",
        "fieldTypeVerbose": "string",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteAddrConvertorHandler",
        "fieldTypeVerbose": "func (v1: string) return(string) ",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ReverseAddr",
        "fieldTypeVerbose": "string",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddFileResource",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "AddFileResource(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "AddFileResource(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddHttpRoute",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "AddHttpRoute(${1:v2 /*type: string*/}, ${2:v3 /*type: *facades.HttpResource*/})",
        "methodsCompletionVerbose": "AddHttpRoute(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Config",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "Config(${1:v2 /*type: ...facades.FacadeServerConfig*/})",
        "methodsCompletionVerbose": "Config(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ConvertRemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "ConvertRemoteAddr(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "ConvertRemoteAddr(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAddr",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "GetAddr()",
        "methodsCompletionVerbose": "GetAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHTTPHandler",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "GetHTTPHandler(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "GetHTTPHandler(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "OnHandle",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "OnHandle(${1:v2 /*type: func (v1: *facades.Notification) */})",
        "methodsCompletionVerbose": "OnHandle(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "OverwriteFileResource",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "OverwriteFileResource(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "OverwriteFileResource(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoveHTTPResource",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "RemoveHTTPResource(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "RemoveHTTPResource(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SaveHttpRoute",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "SaveHttpRoute(${1:v2 /*type: string*/}, ${2:v3 /*type: *facades.HttpResource*/})",
        "methodsCompletionVerbose": "SaveHttpRoute(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Serve",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "Serve()",
        "methodsCompletionVerbose": "Serve()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ServeWithContext",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "ServeWithContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "ServeWithContext(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetRawResource",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "SetRawResource(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "SetRawResource(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetRawResourceEx",
        "fieldTypeVerbose": "",
        "libName": "facades",
        "structName": "github.com/yaklang/yaklang/common/facades.FacadeServer",
        "structNameShort": "com/yaklang/yaklang/common/facades.FacadeServer",
        "methodsCompletion": "SetRawResourceEx(${1:v2 /*type: string*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bool*/})",
        "methodsCompletionVerbose": "SetRawResourceEx(v2, v3, v4)",
        "isGolangBuildOrigin": false
      }
    ],
    "file": [
      {
        "isMethod": false,
        "fieldName": "BuildIn",
        "fieldTypeVerbose": "fs.FileInfo",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils.FileInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils.FileInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsDir",
        "fieldTypeVerbose": "bool",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils.FileInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils.FileInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils.FileInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils.FileInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Path",
        "fieldTypeVerbose": "string",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils.FileInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils.FileInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLastRecordPtr",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "structNameShort": "com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "methodsCompletion": "GetLastRecordPtr()",
        "methodsCompletionVerbose": "GetLastRecordPtr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPercent",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "structNameShort": "com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "methodsCompletion": "GetPercent()",
        "methodsCompletionVerbose": "GetPercent()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Next",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "structNameShort": "com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "methodsCompletion": "Next()",
        "methodsCompletionVerbose": "Next()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetCurrFileIndex",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "structNameShort": "com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "methodsCompletion": "SetCurrFileIndex(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetCurrFileIndex(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetRecoverPtr",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "structNameShort": "com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "methodsCompletion": "SetRecoverPtr(${1:v2 /*type: string*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "SetRecoverPtr(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Text",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "structNameShort": "com/yaklang/yaklang/common/utils/mfreader.MultiFileLineReader",
        "methodsCompletion": "Text()",
        "methodsCompletionVerbose": "Text()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetOsFile",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "GetOsFile()",
        "methodsCompletionVerbose": "GetOsFile()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Name",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "Name()",
        "methodsCompletionVerbose": "Name()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadAll",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "ReadAll()",
        "methodsCompletionVerbose": "ReadAll()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadAt",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "ReadAt(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadLines",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "ReadLines()",
        "methodsCompletionVerbose": "ReadLines()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadString",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "ReadString()",
        "methodsCompletionVerbose": "ReadString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "Write(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteLine",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "WriteLine(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "WriteLine(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteString",
        "fieldTypeVerbose": "",
        "libName": "file",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib._yakFile",
        "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "WriteString(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "finscan": [
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "finscan",
        "structName": "github.com/yaklang/yaklang/common/finscan.FinScanResult",
        "structNameShort": "com/yaklang/yaklang/common/finscan.FinScanResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "finscan",
        "structName": "github.com/yaklang/yaklang/common/finscan.FinScanResult",
        "structNameShort": "com/yaklang/yaklang/common/finscan.FinScanResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Status",
        "fieldTypeVerbose": "int",
        "libName": "finscan",
        "structName": "github.com/yaklang/yaklang/common/finscan.FinScanResult",
        "structNameShort": "com/yaklang/yaklang/common/finscan.FinScanResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "finscan",
        "structName": "github.com/yaklang/yaklang/common/finscan.FinScanResult",
        "structNameShort": "com/yaklang/yaklang/common/finscan.FinScanResult",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "finscan",
        "structName": "github.com/yaklang/yaklang/common/finscan.FinScanResult",
        "structNameShort": "com/yaklang/yaklang/common/finscan.FinScanResult",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      }
    ],
    "fuzz": [
      {
        "isMethod": false,
        "fieldName": "Opts",
        "fieldTypeVerbose": "[]mutate.BuildFuzzHTTPRequestOption",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "Exec(${1:v2 /*type: ...mutate.HttpPoolConfigOption*/})",
        "methodsCompletionVerbose": "Exec(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ExecFirst",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "ExecFirst(${1:v2 /*type: ...mutate.HttpPoolConfigOption*/})",
        "methodsCompletionVerbose": "ExecFirst(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FirstFuzzHTTPRequest",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FirstFuzzHTTPRequest()",
        "methodsCompletionVerbose": "FirstFuzzHTTPRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FirstHTTPRequestBytes",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FirstHTTPRequestBytes()",
        "methodsCompletionVerbose": "FirstHTTPRequestBytes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookie",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzCookie(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookie(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieBase64",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzCookieBase64(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieBase64(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieBase64JsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzCookieBase64JsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieBase64JsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieJsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzCookieJsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieJsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzCookieRaw(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzFormEncoded",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzFormEncoded(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzFormEncoded(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetBase64JsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzGetBase64JsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetBase64JsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetBase64Params",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzGetBase64Params(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetBase64Params(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetJsonPathParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzGetJsonPathParams(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetJsonPathParams(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzGetParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetParams(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetParamsRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzGetParamsRaw(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzGetParamsRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzHTTPHeader",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzHTTPHeader(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzHTTPHeader(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzMethod",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzMethod(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzMethod(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPath(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzPath(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPathAppend",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPathAppend(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzPathAppend(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostBase64JsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPostBase64JsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostBase64JsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostBase64Params",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPostBase64Params(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostBase64Params(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostJsonParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPostJsonParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostJsonParams(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostJsonPathParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPostJsonPathParams(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostJsonPathParams(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPostParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostParams(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzPostRaw(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzPostRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzUploadFile",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzUploadFile(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: bytes*/})",
        "methodsCompletionVerbose": "FuzzUploadFile(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzUploadFileName",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzUploadFileName(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzUploadFileName(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzUploadKVPair",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "FuzzUploadKVPair(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzUploadKVPair(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAllParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetAllParams()",
        "methodsCompletionVerbose": "GetAllParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetBody",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetBody()",
        "methodsCompletionVerbose": "GetBody()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetBytes",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetBytes()",
        "methodsCompletionVerbose": "GetBytes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCommonParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetCommonParams()",
        "methodsCompletionVerbose": "GetCommonParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetContentType",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetContentType()",
        "methodsCompletionVerbose": "GetContentType()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCookieParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetCookieParams()",
        "methodsCompletionVerbose": "GetCookieParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetFirstFuzzHTTPRequest",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetFirstFuzzHTTPRequest()",
        "methodsCompletionVerbose": "GetFirstFuzzHTTPRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetGetQueryParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetGetQueryParams()",
        "methodsCompletionVerbose": "GetGetQueryParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHeader",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetHeader(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetHeader(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHeaderKeys",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetHeaderKeys()",
        "methodsCompletionVerbose": "GetHeaderKeys()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHeaderParamByName",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetHeaderParamByName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetHeaderParamByName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHeaderParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetHeaderParams()",
        "methodsCompletionVerbose": "GetHeaderParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHeaderValues",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetHeaderValues()",
        "methodsCompletionVerbose": "GetHeaderValues()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetMethod",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetMethod()",
        "methodsCompletionVerbose": "GetMethod()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetOriginHTTPRequest",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetOriginHTTPRequest()",
        "methodsCompletionVerbose": "GetOriginHTTPRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPath()",
        "methodsCompletionVerbose": "GetPath()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPathAppendParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPathAppendParams()",
        "methodsCompletionVerbose": "GetPathAppendParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPathBlockParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPathBlockParams()",
        "methodsCompletionVerbose": "GetPathBlockParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPathParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPathParams()",
        "methodsCompletionVerbose": "GetPathParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPathRawParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPathRawParams()",
        "methodsCompletionVerbose": "GetPathRawParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPathWithQuery",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPathWithQuery()",
        "methodsCompletionVerbose": "GetPathWithQuery()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPostJsonParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPostJsonParams()",
        "methodsCompletionVerbose": "GetPostJsonParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPostParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPostParams()",
        "methodsCompletionVerbose": "GetPostParams()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPostQuery",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPostQuery()",
        "methodsCompletionVerbose": "GetPostQuery()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPostQueryKeys",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPostQueryKeys()",
        "methodsCompletionVerbose": "GetPostQueryKeys()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPostQueryValue",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPostQueryValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetPostQueryValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetPostQueryValues",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetPostQueryValues()",
        "methodsCompletionVerbose": "GetPostQueryValues()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetQueryKeys",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetQueryKeys()",
        "methodsCompletionVerbose": "GetQueryKeys()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetQueryRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetQueryRaw()",
        "methodsCompletionVerbose": "GetQueryRaw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetQueryValue",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetQueryValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetQueryValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetQueryValues",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetQueryValues()",
        "methodsCompletionVerbose": "GetQueryValues()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRequestURI",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetRequestURI()",
        "methodsCompletionVerbose": "GetRequestURI()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetUrl",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "GetUrl()",
        "methodsCompletionVerbose": "GetUrl()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsBodyFormEncoded",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "IsBodyFormEncoded()",
        "methodsCompletionVerbose": "IsBodyFormEncoded()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsBodyJsonEncoded",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "IsBodyJsonEncoded()",
        "methodsCompletionVerbose": "IsBodyJsonEncoded()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsBodyUrlEncoded",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "IsBodyUrlEncoded()",
        "methodsCompletionVerbose": "IsBodyUrlEncoded()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsEmptyBody",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "IsEmptyBody()",
        "methodsCompletionVerbose": "IsEmptyBody()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ParamsHash",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "ParamsHash()",
        "methodsCompletionVerbose": "ParamsHash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Repeat",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "Repeat(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Repeat(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Results",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "Results()",
        "methodsCompletionVerbose": "Results()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequest",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "Exec(${1:v2 /*type: ...mutate.HttpPoolConfigOption*/})",
        "methodsCompletionVerbose": "Exec(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ExecFirst",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "ExecFirst(${1:v2 /*type: ...mutate.HttpPoolConfigOption*/})",
        "methodsCompletionVerbose": "ExecFirst(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FirstFuzzHTTPRequest",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FirstFuzzHTTPRequest()",
        "methodsCompletionVerbose": "FirstFuzzHTTPRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FirstHTTPRequestBytes",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FirstHTTPRequestBytes()",
        "methodsCompletionVerbose": "FirstHTTPRequestBytes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookie",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzCookie(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookie(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieBase64",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzCookieBase64(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieBase64(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieBase64JsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzCookieBase64JsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieBase64JsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieJsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzCookieJsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieJsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzCookieRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzCookieRaw(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzCookieRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzFormEncoded",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzFormEncoded(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzFormEncoded(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetBase64JsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzGetBase64JsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetBase64JsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetBase64Params",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzGetBase64Params(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetBase64Params(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetJsonPathParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzGetJsonPathParams(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetJsonPathParams(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzGetParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzGetParams(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzGetParamsRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzGetParamsRaw(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzGetParamsRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzHTTPHeader",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzHTTPHeader(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzHTTPHeader(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzMethod",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzMethod(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzMethod(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPath(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzPath(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPathAppend",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPathAppend(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzPathAppend(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostBase64JsonPath",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPostBase64JsonPath(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostBase64JsonPath(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostBase64Params",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPostBase64Params(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostBase64Params(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostJsonParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPostJsonParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostJsonParams(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostJsonPathParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPostJsonPathParams(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostJsonPathParams(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostParams",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPostParams(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzPostParams(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzPostRaw",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzPostRaw(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "FuzzPostRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzUploadFile",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzUploadFile(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: bytes*/})",
        "methodsCompletionVerbose": "FuzzUploadFile(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzUploadFileName",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzUploadFileName(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzUploadFileName(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzUploadKVPair",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "FuzzUploadKVPair(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "FuzzUploadKVPair(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetFirstFuzzHTTPRequest",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "GetFirstFuzzHTTPRequest()",
        "methodsCompletionVerbose": "GetFirstFuzzHTTPRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetOriginRequest",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "GetOriginRequest()",
        "methodsCompletionVerbose": "GetOriginRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Repeat",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "Repeat(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Repeat(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Results",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "Results()",
        "methodsCompletionVerbose": "Results()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "structNameShort": "com/yaklang/yaklang/common/mutate.FuzzHTTPRequestBatch",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DurationMs",
        "fieldTypeVerbose": "int64",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Error",
        "fieldTypeVerbose": "error",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LowhttpResponse",
        "fieldTypeVerbose": "*lowhttp.LowhttpResponse",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Payloads",
        "fieldTypeVerbose": "[]string",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Request",
        "fieldTypeVerbose": "*http.Request",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RequestRaw",
        "fieldTypeVerbose": "bytes",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Response",
        "fieldTypeVerbose": "*http.Response",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ResponseRaw",
        "fieldTypeVerbose": "bytes",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ServerDurationMs",
        "fieldTypeVerbose": "int64",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Source",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timestamp",
        "fieldTypeVerbose": "int64",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Url",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/mutate._httpResult",
        "structNameShort": "com/yaklang/yaklang/common/mutate._httpResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Index",
        "fieldTypeVerbose": "protowire.Number",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToBytes",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecord",
        "methodsCompletion": "ToBytes()",
        "methodsCompletionVerbose": "ToBytes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Records",
        "fieldTypeVerbose": "[]*yaklib.ProtobufRecord",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Error",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "Error()",
        "methodsCompletionVerbose": "Error()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Find",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "Find(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Find(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzEveryIndex",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "FuzzEveryIndex(${1:v2 /*type: func (v1: int, v2: string, v3: any) return(any) */})",
        "methodsCompletionVerbose": "FuzzEveryIndex(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FuzzIndex",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "FuzzIndex(${1:v2 /*type: int*/}, ${2:v3 /*type: func (v1: int, v2: string, v3: any) return(any) */})",
        "methodsCompletionVerbose": "FuzzIndex(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MarshalJSON",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "MarshalJSON()",
        "methodsCompletionVerbose": "MarshalJSON()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MarshalYAML",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "MarshalYAML()",
        "methodsCompletionVerbose": "MarshalYAML()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToBytes",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "ToBytes()",
        "methodsCompletionVerbose": "ToBytes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToHex",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "ToHex()",
        "methodsCompletionVerbose": "ToHex()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToJSON",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "ToJSON()",
        "methodsCompletionVerbose": "ToJSON()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToYAML",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "ToYAML()",
        "methodsCompletionVerbose": "ToYAML()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalJSON",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "UnmarshalJSON(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "UnmarshalJSON(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalYAML",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.ProtobufRecords",
        "methodsCompletion": "UnmarshalYAML(${1:v2 /*type: *yaml.Node*/})",
        "methodsCompletionVerbose": "UnmarshalYAML(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Alias",
        "fieldTypeVerbose": "*yaml.Node",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Anchor",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Column",
        "fieldTypeVerbose": "int",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Content",
        "fieldTypeVerbose": "[]*yaml.Node",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "FootComment",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "HeadComment",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Kind",
        "fieldTypeVerbose": "yaml.Kind",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Line",
        "fieldTypeVerbose": "int",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "LineComment",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Style",
        "fieldTypeVerbose": "yaml.Style",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Tag",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "string",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Decode",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "Decode(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Decode(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Encode",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "Encode(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Encode(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsZero",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "IsZero()",
        "methodsCompletionVerbose": "IsZero()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LongTag",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "LongTag()",
        "methodsCompletionVerbose": "LongTag()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetString",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "SetString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ShortTag",
        "fieldTypeVerbose": "",
        "libName": "fuzz",
        "structName": "gopkg.in/yaml.v3.Node",
        "structNameShort": "in/yaml.v3.Node",
        "methodsCompletion": "ShortTag()",
        "methodsCompletionVerbose": "ShortTag()",
        "isGolangBuildOrigin": true
      }
    ],
    "hook": [
      {
        "isMethod": false,
        "fieldName": "VerboseName",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.CallerHookDescription",
        "structNameShort": "com/yaklang/yaklang/common/yak.CallerHookDescription",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YakScriptId",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.CallerHookDescription",
        "structNameShort": "com/yaklang/yaklang/common/yak.CallerHookDescription",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YakScriptName",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.CallerHookDescription",
        "structNameShort": "com/yaklang/yaklang/common/yak.CallerHookDescription",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HookName",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.CallerHooks",
        "structNameShort": "com/yaklang/yaklang/common/yak.CallerHooks",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hooks",
        "fieldTypeVerbose": "[]*yak.CallerHookDescription",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.CallerHooks",
        "structNameShort": "com/yaklang/yaklang/common/yak.CallerHooks",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallHijackRequest",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "CallHijackRequest(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func () return(any) */}, ${4:v5 /*type: func () return(any) */}, ${5:v6 /*type: func () return(any) */})",
        "methodsCompletionVerbose": "CallHijackRequest(v2, v3, v4, v5, v6)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallHijackResponse",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "CallHijackResponse(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func () return(any) */}, ${4:v5 /*type: func () return(any) */}, ${5:v6 /*type: func () return(any) */})",
        "methodsCompletionVerbose": "CallHijackResponse(v2, v3, v4, v5, v6)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallHijackResponseEx",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "CallHijackResponseEx(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func () return(any) */}, ${4:v5 /*type: func () return(any) */}, ${5:v6 /*type: func () return(any) */}, ${6:v7 /*type: func () return(any) */})",
        "methodsCompletionVerbose": "CallHijackResponseEx(v2, v3, v4, v5, v6, v7)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FeedbackOrdinary",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "FeedbackOrdinary(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "FeedbackOrdinary(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetNativeCaller",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "GetNativeCaller()",
        "methodsCompletionVerbose": "GetNativeCaller()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "HandleServiceScanResult",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "HandleServiceScanResult(${1:v2 /*type: *fp.MatchResult*/})",
        "methodsCompletionVerbose": "HandleServiceScanResult(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "HijackSaveHTTPFlow",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "HijackSaveHTTPFlow(${1:v2 /*type: *yakit.HTTPFlow*/}, ${2:v3 /*type: func (v1: *yakit.HTTPFlow) */}, ${3:v4 /*type: func () */})",
        "methodsCompletionVerbose": "HijackSaveHTTPFlow(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LoadHotPatch",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "LoadHotPatch(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "LoadHotPatch(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LoadPlugin",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "LoadPlugin(${1:v2 /*type: string*/}, ${2:v3 /*type: ...*ypb.ExecParamItem*/})",
        "methodsCompletionVerbose": "LoadPlugin(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LoadPluginByName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "LoadPluginByName(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []*ypb.ExecParamItem*/}, ${4:v5 /*type: ...string*/})",
        "methodsCompletionVerbose": "LoadPluginByName(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MirrorHTTPFlow",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "MirrorHTTPFlow(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: bytes*/}, ${5:v6 /*type: bytes*/}, ${6:v7 /*type: ...bool*/})",
        "methodsCompletionVerbose": "MirrorHTTPFlow(v2, v3, v4, v5, v6, v7)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MirrorHTTPFlowEx",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "MirrorHTTPFlowEx(${1:v2 /*type: bool*/}, ${2:v3 /*type: bool*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: bytes*/}, ${5:v6 /*type: bytes*/}, ${6:v7 /*type: bytes*/}, ${7:v8 /*type: ...bool*/})",
        "methodsCompletionVerbose": "MirrorHTTPFlowEx(v2, v3, v4, v5, v6, v7, v8)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ResetFilter",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "ResetFilter()",
        "methodsCompletionVerbose": "ResetFilter()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetCache",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetCache(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetCache(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetConcurrent",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetConcurrent(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetConcurrent(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDividedContext",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetDividedContext(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetDividedContext(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetFeedback",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetFeedback(${1:v2 /*type: func (v1: *ypb.ExecResult) return(error) */})",
        "methodsCompletionVerbose": "SetFeedback(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetLoadPluginTimeout",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetLoadPluginTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "SetLoadPluginTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetProxy",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetProxy(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetProxy(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetRuntimeId",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "SetRuntimeId(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetRuntimeId(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.MixPluginCaller",
        "structNameShort": "com/yaklang/yaklang/common/yak.MixPluginCaller",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "Add(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []*ypb.ExecParamItem*/}, ${4:v5 /*type: string*/}, ${5:v6 /*type: func (v1: *antlr4yak.Engine) return(error) */}, ${6:v7 /*type: ...string*/})",
        "methodsCompletionVerbose": "Add(v2, v3, v4, v5, v6, v7)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddForYakit",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "AddForYakit(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []*ypb.ExecParamItem*/}, ${4:v5 /*type: string*/}, ${5:v6 /*type: interface { Send(*ypb.ExecResult) error }*/}, ${6:v7 /*type: ...string*/})",
        "methodsCompletionVerbose": "AddForYakit(v2, v3, v4, v5, v6, v7)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddGoNative",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "AddGoNative(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func (v1 ...any) */})",
        "methodsCompletionVerbose": "AddGoNative(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallByName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "CallByName(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "CallByName(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallByNameEx",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "CallByNameEx(${1:v2 /*type: string*/}, ${2:v3 /*type: ...func() any*/})",
        "methodsCompletionVerbose": "CallByNameEx(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallByNameExSync",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "CallByNameExSync(${1:v2 /*type: string*/}, ${2:v3 /*type: ...func() any*/})",
        "methodsCompletionVerbose": "CallByNameExSync(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallPluginKeyByName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "CallPluginKeyByName(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "CallPluginKeyByName(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallPluginKeyByNameEx",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "CallPluginKeyByNameEx(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...func() any*/})",
        "methodsCompletionVerbose": "CallPluginKeyByNameEx(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CallPluginKeyByNameExWithAsync",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "CallPluginKeyByNameExWithAsync(${1:v2 /*type: bool*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: ...func() any*/})",
        "methodsCompletionVerbose": "CallPluginKeyByNameExWithAsync(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCurrentHooks",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "GetCurrentHooks()",
        "methodsCompletionVerbose": "GetCurrentHooks()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCurrentHooksGRPCModel",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "GetCurrentHooksGRPCModel()",
        "methodsCompletionVerbose": "GetCurrentHooksGRPCModel()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LoadPlugin",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "LoadPlugin(${1:v2 /*type: string*/}, ${2:v3 /*type: ...string*/})",
        "methodsCompletionVerbose": "LoadPlugin(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LoadPluginContext",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "LoadPluginContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...string*/})",
        "methodsCompletionVerbose": "LoadPluginContext(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Remove",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "Remove(${1:v2 /*type: *ypb.RemoveHookParams*/})",
        "methodsCompletionVerbose": "Remove(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "Set(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: func (v1: *antlr4yak.Engine) return(error) */}, ${4:v5 /*type: ...string*/})",
        "methodsCompletionVerbose": "Set(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetConcurrent",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "SetConcurrent(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetConcurrent(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDividedContext",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "SetDividedContext(${1:v2 /*type: bool*/})",
        "methodsCompletionVerbose": "SetDividedContext(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetForYakit",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "SetForYakit(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: interface { Send(*ypb.ExecResult) error }*/}, ${4:v5 /*type: ...string*/})",
        "methodsCompletionVerbose": "SetForYakit(v2, v3, v4, v5)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetLoadPluginTimeout",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "SetLoadPluginTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "SetLoadPluginTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ShouldCallByName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "ShouldCallByName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "ShouldCallByName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SyncCallPluginKeyByNameEx",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "SyncCallPluginKeyByNameEx(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...func() any*/})",
        "methodsCompletionVerbose": "SyncCallPluginKeyByNameEx(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yak.YakToCallerManager",
        "structNameShort": "com/yaklang/yaklang/common/yak.YakToCallerManager",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Key",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetKey",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "GetKey()",
        "methodsCompletionVerbose": "GetKey()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetValue",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "GetValue()",
        "methodsCompletionVerbose": "GetValue()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.ExecParamItem",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClearAll",
        "fieldTypeVerbose": "bool",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HookName",
        "fieldTypeVerbose": "[]string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoveHookID",
        "fieldTypeVerbose": "[]string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetClearAll",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "GetClearAll()",
        "methodsCompletionVerbose": "GetClearAll()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHookName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "GetHookName()",
        "methodsCompletionVerbose": "GetHookName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemoveHookID",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "GetRemoveHookID()",
        "methodsCompletionVerbose": "GetRemoveHookID()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.RemoveHookParams",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Verbose",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YakScriptId",
        "fieldTypeVerbose": "int64",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YakScriptName",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetVerbose",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "GetVerbose()",
        "methodsCompletionVerbose": "GetVerbose()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetYakScriptId",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "GetYakScriptId()",
        "methodsCompletionVerbose": "GetYakScriptId()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetYakScriptName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "GetYakScriptName()",
        "methodsCompletionVerbose": "GetYakScriptName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHookItem",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HookName",
        "fieldTypeVerbose": "string",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hooks",
        "fieldTypeVerbose": "[]*ypb.YakScriptHookItem",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHookName",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "GetHookName()",
        "methodsCompletionVerbose": "GetHookName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHooks",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "GetHooks()",
        "methodsCompletionVerbose": "GetHooks()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "hook",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/ypb.YakScriptHooks",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      }
    ],
    "http": [
      {
        "isMethod": false,
        "fieldName": "Request",
        "fieldTypeVerbose": "*http.Request",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddCookie",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
        "methodsCompletionVerbose": "AddCookie(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddCookie",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "AddCookie(${1:v2 /*type: *http.Cookie*/})",
        "methodsCompletionVerbose": "AddCookie(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BasicAuth",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "BasicAuth()",
        "methodsCompletionVerbose": "BasicAuth()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BasicAuth",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "BasicAuth()",
        "methodsCompletionVerbose": "BasicAuth()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Clone",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "Clone(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Clone",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Clone(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "Clone(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Context",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Context()",
        "methodsCompletionVerbose": "Context()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Context",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Context()",
        "methodsCompletionVerbose": "Context()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cookie",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Cookie(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cookie",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Cookie(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Cookie(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cookies",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Cookies()",
        "methodsCompletionVerbose": "Cookies()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cookies",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Cookies()",
        "methodsCompletionVerbose": "Cookies()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FormFile",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormFile(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FormFile",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "FormFile(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormFile(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FormValue",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FormValue",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "FormValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FormValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MultipartReader",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "MultipartReader()",
        "methodsCompletionVerbose": "MultipartReader()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MultipartReader",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "MultipartReader()",
        "methodsCompletionVerbose": "MultipartReader()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ParseForm",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "ParseForm()",
        "methodsCompletionVerbose": "ParseForm()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ParseForm",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "ParseForm()",
        "methodsCompletionVerbose": "ParseForm()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ParseMultipartForm",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "ParseMultipartForm(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ParseMultipartForm",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "ParseMultipartForm(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "ParseMultipartForm(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "PostFormValue",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "PostFormValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "PostFormValue",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "PostFormValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "PostFormValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoAtLeast",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "ProtoAtLeast(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoAtLeast",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "ProtoAtLeast(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Referer",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Referer()",
        "methodsCompletionVerbose": "Referer()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Referer",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Referer()",
        "methodsCompletionVerbose": "Referer()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetBasicAuth",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SetBasicAuth(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetBasicAuth",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "SetBasicAuth(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SetBasicAuth(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "UserAgent",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "UserAgent()",
        "methodsCompletionVerbose": "UserAgent()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "UserAgent",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "UserAgent()",
        "methodsCompletionVerbose": "UserAgent()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WithContext",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "WithContext(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WithContext",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "WithContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "WithContext(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteProxy",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteProxy(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteProxy",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpRequest",
        "methodsCompletion": "WriteProxy(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteProxy(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Response",
        "fieldTypeVerbose": "*http.Response",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cookies",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Cookies()",
        "methodsCompletionVerbose": "Cookies()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Cookies",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Cookies()",
        "methodsCompletionVerbose": "Cookies()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Data",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Data()",
        "methodsCompletionVerbose": "Data()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHeader",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "GetHeader(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetHeader(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Json",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Json()",
        "methodsCompletionVerbose": "Json()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Location",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Location()",
        "methodsCompletionVerbose": "Location()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Location",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Location()",
        "methodsCompletionVerbose": "Location()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoAtLeast",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "ProtoAtLeast(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoAtLeast",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "ProtoAtLeast(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "ProtoAtLeast(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Raw",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Raw()",
        "methodsCompletionVerbose": "Raw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "http",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/yakhttp.YakHttpResponse",
        "methodsCompletion": "Write(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "io": [
      {
        "isMethod": true,
        "fieldName": "Error",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "errors.errorString",
        "structNameShort": "errorString",
        "methodsCompletion": "Error()",
        "methodsCompletionVerbose": "Error()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.PipeReader",
        "structNameShort": "PipeReader",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CloseWithError",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.PipeReader",
        "structNameShort": "PipeReader",
        "methodsCompletion": "CloseWithError(${1:v2 /*type: error*/})",
        "methodsCompletionVerbose": "CloseWithError(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.PipeReader",
        "structNameShort": "PipeReader",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.PipeWriter",
        "structNameShort": "PipeWriter",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CloseWithError",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.PipeWriter",
        "structNameShort": "PipeWriter",
        "methodsCompletion": "CloseWithError(${1:v2 /*type: error*/})",
        "methodsCompletionVerbose": "CloseWithError(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.PipeWriter",
        "structNameShort": "PipeWriter",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.discard",
        "structNameShort": "discard",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: io.Reader*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.discard",
        "structNameShort": "discard",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteString",
        "fieldTypeVerbose": "",
        "libName": "io",
        "structName": "io.discard",
        "structNameShort": "discard",
        "methodsCompletion": "WriteString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "WriteString(v2)",
        "isGolangBuildOrigin": true
      }
    ],
    "ja3": [
      {
        "isMethod": false,
        "fieldName": "Certificate",
        "fieldTypeVerbose": "[]bytes",
        "libName": "ja3",
        "structName": "crypto/tls.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Leaf",
        "fieldTypeVerbose": "*x509.Certificate",
        "libName": "ja3",
        "structName": "crypto/tls.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OCSPStaple",
        "fieldTypeVerbose": "bytes",
        "libName": "ja3",
        "structName": "crypto/tls.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PrivateKey",
        "fieldTypeVerbose": "crypto.PrivateKey",
        "libName": "ja3",
        "structName": "crypto/tls.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SignedCertificateTimestamps",
        "fieldTypeVerbose": "[]bytes",
        "libName": "ja3",
        "structName": "crypto/tls.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SupportedSignatureAlgorithms",
        "fieldTypeVerbose": "[]tls.SignatureScheme",
        "libName": "ja3",
        "structName": "crypto/tls.Certificate",
        "structNameShort": "Certificate",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Certificates",
        "fieldTypeVerbose": "[]tls.Certificate",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CipherSuites",
        "fieldTypeVerbose": "[]uint16",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ClientAuth",
        "fieldTypeVerbose": "tls.ClientAuthType",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ClientCAs",
        "fieldTypeVerbose": "*x509.CertPool",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ClientSessionCache",
        "fieldTypeVerbose": "tls.ClientSessionCache",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CurvePreferences",
        "fieldTypeVerbose": "[]tls.CurveID",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DynamicRecordSizingDisabled",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GetCertificate",
        "fieldTypeVerbose": "func (v1: *tls.ClientHelloInfo) return(*tls.Certificate, error) ",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GetClientCertificate",
        "fieldTypeVerbose": "func (v1: *tls.CertificateRequestInfo) return(*tls.Certificate, error) ",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GetConfigForClient",
        "fieldTypeVerbose": "func (v1: *tls.ClientHelloInfo) return(*tls.Config, error) ",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "InsecureSkipVerify",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "KeyLogWriter",
        "fieldTypeVerbose": "io.Writer",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxVersion",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MinVersion",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NameToCertificate",
        "fieldTypeVerbose": "map[string]*tls.Certificate",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NextProtos",
        "fieldTypeVerbose": "[]string",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PreferServerCipherSuites",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Rand",
        "fieldTypeVerbose": "io.Reader",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Renegotiation",
        "fieldTypeVerbose": "tls.RenegotiationSupport",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RootCAs",
        "fieldTypeVerbose": "*x509.CertPool",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ServerName",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SessionTicketKey",
        "fieldTypeVerbose": "[32]byte",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SessionTicketsDisabled",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Time",
        "fieldTypeVerbose": "func () return(time.Time) ",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "VerifyConnection",
        "fieldTypeVerbose": "func (v1: tls.ConnectionState) return(error) ",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "VerifyPeerCertificate",
        "fieldTypeVerbose": "func (v1: []bytes, v2: [][]*x509.Certificate) return(error) ",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "BuildNameToCertificate",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "BuildNameToCertificate()",
        "methodsCompletionVerbose": "BuildNameToCertificate()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Clone",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "Clone()",
        "methodsCompletionVerbose": "Clone()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetSessionTicketKeys",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "crypto/tls.Config",
        "structNameShort": "Config",
        "methodsCompletion": "SetSessionTicketKeys(${1:v2 /*type: [][32]byte*/})",
        "methodsCompletionVerbose": "SetSessionTicketKeys(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CipherSuites",
        "fieldTypeVerbose": "[]uint16",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CompressionMethods",
        "fieldTypeVerbose": "bytes",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Extensions",
        "fieldTypeVerbose": "[]tls.TLSExtension",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GetSessionID",
        "fieldTypeVerbose": "func (v1: bytes) return([32]byte) ",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLSVersMax",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLSVersMin",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AlwaysAddPadding",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "AlwaysAddPadding()",
        "methodsCompletionVerbose": "AlwaysAddPadding()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FromRaw",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "FromRaw(${1:v2 /*type: bytes*/}, ${2:v3 /*type: ...bool*/})",
        "methodsCompletionVerbose": "FromRaw(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ImportTLSClientHello",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "ImportTLSClientHello(${1:v2 /*type: map[string]bytes*/})",
        "methodsCompletionVerbose": "ImportTLSClientHello(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ImportTLSClientHelloFromJSON",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "ImportTLSClientHelloFromJSON(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ImportTLSClientHelloFromJSON(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadCipherSuites",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "ReadCipherSuites(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadCipherSuites(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadCompressionMethods",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "ReadCompressionMethods(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadCompressionMethods(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadTLSExtensions",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "ReadTLSExtensions(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bool*/})",
        "methodsCompletionVerbose": "ReadTLSExtensions(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalJSON",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/refraction-networking/utls.ClientHelloSpec",
        "structNameShort": "com/refraction-networking/utls.ClientHelloSpec",
        "methodsCompletion": "UnmarshalJSON(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "UnmarshalJSON(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ID",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.CipherSuite",
        "structNameShort": "com/yaklang/yaklang/common/ja3.CipherSuite",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Insecure",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.CipherSuite",
        "structNameShort": "com/yaklang/yaklang/common/ja3.CipherSuite",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.CipherSuite",
        "structNameShort": "com/yaklang/yaklang/common/ja3.CipherSuite",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SupportedVersions",
        "fieldTypeVerbose": "[]uint16",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.CipherSuite",
        "structNameShort": "com/yaklang/yaklang/common/ja3.CipherSuite",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurveID",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.EllipticCurve",
        "structNameShort": "com/yaklang/yaklang/common/ja3.EllipticCurve",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurveName",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.EllipticCurve",
        "structNameShort": "com/yaklang/yaklang/common/ja3.EllipticCurve",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurvePoint",
        "fieldTypeVerbose": "byte",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.EllipticCurvePointFormat",
        "structNameShort": "com/yaklang/yaklang/common/ja3.EllipticCurvePointFormat",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurvePointFormatName",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.EllipticCurvePointFormat",
        "structNameShort": "com/yaklang/yaklang/common/ja3.EllipticCurvePointFormat",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.ExtensionsType",
        "structNameShort": "com/yaklang/yaklang/common/ja3.ExtensionsType",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeName",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.ExtensionsType",
        "structNameShort": "com/yaklang/yaklang/common/ja3.ExtensionsType",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CipherSuites",
        "fieldTypeVerbose": "[]*ja3.CipherSuite",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "EllipticCurvePointFormats",
        "fieldTypeVerbose": "[]*ja3.EllipticCurvePointFormat",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "EllipticCurves",
        "fieldTypeVerbose": "[]*ja3.EllipticCurve",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExtensionsTypes",
        "fieldTypeVerbose": "[]*ja3.ExtensionsType",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "JA3FullStr",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TLSVersion",
        "fieldTypeVerbose": "*ja3.TLSVersion",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Calc",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "Calc()",
        "methodsCompletionVerbose": "Calc()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Calc",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "Calc()",
        "methodsCompletionVerbose": "Calc()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AcceptedCipher",
        "fieldTypeVerbose": "*ja3.CipherSuite",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExtensionsTypes",
        "fieldTypeVerbose": "[]*ja3.ExtensionsType",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "JA3SFullStr",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TLSVersion",
        "fieldTypeVerbose": "*ja3.TLSVersion",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Calc",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "Calc()",
        "methodsCompletionVerbose": "Calc()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Calc",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "Calc()",
        "methodsCompletionVerbose": "Calc()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.JA3S",
        "structNameShort": "com/yaklang/yaklang/common/ja3.JA3S",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "uint16",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.TLSVersion",
        "structNameShort": "com/yaklang/yaklang/common/ja3.TLSVersion",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "VersionName",
        "fieldTypeVerbose": "string",
        "libName": "ja3",
        "structName": "github.com/yaklang/yaklang/common/ja3.TLSVersion",
        "structNameShort": "com/yaklang/yaklang/common/ja3.TLSVersion",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Dial",
        "fieldTypeVerbose": "func (v1: string, v2: string) return(net.Conn, error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DialContext",
        "fieldTypeVerbose": "func (v1: context.Context, v2: string, v3: string) return(net.Conn, error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DialTLS",
        "fieldTypeVerbose": "func (v1: string, v2: string) return(net.Conn, error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DialTLSContext",
        "fieldTypeVerbose": "func (v1: context.Context, v2: string, v3: string) return(net.Conn, error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DisableCompression",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DisableKeepAlives",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ExpectContinueTimeout",
        "fieldTypeVerbose": "time.Duration",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ForceAttemptHTTP2",
        "fieldTypeVerbose": "bool",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GetProxyConnectHeader",
        "fieldTypeVerbose": "func (v1: context.Context, v2: *url.URL, v3: string) return(http.Header, error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IdleConnTimeout",
        "fieldTypeVerbose": "time.Duration",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxConnsPerHost",
        "fieldTypeVerbose": "int",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxIdleConns",
        "fieldTypeVerbose": "int",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxIdleConnsPerHost",
        "fieldTypeVerbose": "int",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MaxResponseHeaderBytes",
        "fieldTypeVerbose": "int64",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OnProxyConnectResponse",
        "fieldTypeVerbose": "func (v1: context.Context, v2: *url.URL, v3: *http.Request, v4: *http.Response) return(error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Proxy",
        "fieldTypeVerbose": "func (v1: *http.Request) return(*url.URL, error) ",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProxyConnectHeader",
        "fieldTypeVerbose": "http.Header",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ReadBufferSize",
        "fieldTypeVerbose": "int",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ResponseHeaderTimeout",
        "fieldTypeVerbose": "time.Duration",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLSClientConfig",
        "fieldTypeVerbose": "*tls.Config",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLSHandshakeTimeout",
        "fieldTypeVerbose": "time.Duration",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TLSNextProto",
        "fieldTypeVerbose": "map[string]func(string, *tls.Conn) http.RoundTripper",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "WriteBufferSize",
        "fieldTypeVerbose": "int",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CancelRequest",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "CancelRequest(${1:v2 /*type: *http.Request*/})",
        "methodsCompletionVerbose": "CancelRequest(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Clone",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "Clone()",
        "methodsCompletionVerbose": "Clone()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CloseIdleConnections",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "CloseIdleConnections()",
        "methodsCompletionVerbose": "CloseIdleConnections()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RegisterProtocol",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "RegisterProtocol(${1:v2 /*type: string*/}, ${2:v3 /*type: http.RoundTripper*/})",
        "methodsCompletionVerbose": "RegisterProtocol(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RoundTrip",
        "fieldTypeVerbose": "",
        "libName": "ja3",
        "structName": "net/http.Transport",
        "structNameShort": "Transport",
        "methodsCompletion": "RoundTrip(${1:v2 /*type: *http.Request*/})",
        "methodsCompletionVerbose": "RoundTrip(v2)",
        "isGolangBuildOrigin": true
      }
    ],
    "java": [
      {
        "isMethod": false,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "bytes",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Bytescode",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClassDesc",
        "fieldTypeVerbose": "yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Handle",
        "fieldTypeVerbose": "uint64",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Size",
        "fieldTypeVerbose": "int",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Values",
        "fieldTypeVerbose": "[]*yserx.JavaFieldValue",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaArray",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaArray",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Contents",
        "fieldTypeVerbose": "bytes",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsLong",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Size",
        "fieldTypeVerbose": "uint64",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaBlockData",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BlockData",
        "fieldTypeVerbose": "[]yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fields",
        "fieldTypeVerbose": "[]yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassData",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Detail",
        "fieldTypeVerbose": "*yserx.JavaClassDetails",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Map",
        "fieldTypeVerbose": "map[uint64]*yserx.JavaClassDetails",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDetails",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDesc",
        "methodsCompletion": "SetDetails(${1:v2 /*type: *yserx.JavaClassDetails*/})",
        "methodsCompletionVerbose": "SetDetails(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Annotations",
        "fieldTypeVerbose": "[]yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClassName",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescFlag",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DynamicProxyAnnotation",
        "fieldTypeVerbose": "[]yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DynamicProxyClass",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DynamicProxyClassInterfaceCount",
        "fieldTypeVerbose": "int",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DynamicProxyClassInterfaceNames",
        "fieldTypeVerbose": "[]string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fields",
        "fieldTypeVerbose": "*yserx.JavaClassFields",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Handle",
        "fieldTypeVerbose": "uint64",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsNull",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SerialVersion",
        "fieldTypeVerbose": "bytes",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SuperClass",
        "fieldTypeVerbose": "yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsJavaNull",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "IsJavaNull()",
        "methodsCompletionVerbose": "IsJavaNull()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Is_SC_BLOCKDATA",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "Is_SC_BLOCKDATA()",
        "methodsCompletionVerbose": "Is_SC_BLOCKDATA()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Is_SC_EXTERNALIZABLE",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "Is_SC_EXTERNALIZABLE()",
        "methodsCompletionVerbose": "Is_SC_EXTERNALIZABLE()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Is_SC_SERIALIZABLE",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "Is_SC_SERIALIZABLE()",
        "methodsCompletionVerbose": "Is_SC_SERIALIZABLE()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Is_SC_WRITE_METHOD",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "Is_SC_WRITE_METHOD()",
        "methodsCompletionVerbose": "Is_SC_WRITE_METHOD()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassDetails",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClassName1",
        "fieldTypeVerbose": "yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FieldType",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FieldTypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassField",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassField",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FieldCount",
        "fieldTypeVerbose": "int",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassFields",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassFields",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fields",
        "fieldTypeVerbose": "[]*yserx.JavaClassField",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassFields",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassFields",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassFields",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassFields",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassFields",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassFields",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaClassFields",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaClassFields",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsEmpty",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaEndBlockData",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "bytes",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FieldType",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FieldTypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Object",
        "fieldTypeVerbose": "yserx.JavaSerializable",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaFieldValue",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsEmpty",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaNull",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaNull",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaNull",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaNull",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaNull",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaNull",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaNull",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaNull",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Handle",
        "fieldTypeVerbose": "uint64",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaReference",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaReference",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaReference",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaReference",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaReference",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaReference",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "bytes",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaReference",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaReference",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHandle",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaReference",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaReference",
        "methodsCompletion": "GetHandle()",
        "methodsCompletionVerbose": "GetHandle()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaReference",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaReference",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Handle",
        "fieldTypeVerbose": "uint64",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsLong",
        "fieldTypeVerbose": "bool",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "bytes",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Size",
        "fieldTypeVerbose": "uint64",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "byte",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "string",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "java",
        "structName": "github.com/yaklang/yaklang/common/yserx.JavaString",
        "structNameShort": "com/yaklang/yaklang/common/yserx.JavaString",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      }
    ],
    "js": [
      {
        "isMethod": false,
        "fieldName": "BadSyntax",
        "fieldTypeVerbose": "[]string",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "structNameShort": "com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Float64Literal",
        "fieldTypeVerbose": "[]float64",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "structNameShort": "com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Identifies",
        "fieldTypeVerbose": "[]string",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "structNameShort": "com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Int64Literal",
        "fieldTypeVerbose": "[]int64",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "structNameShort": "com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "StringLiteral",
        "fieldTypeVerbose": "[]string",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "structNameShort": "com/yaklang/yaklang/common/javascript.ASTWalkerResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Call",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Call(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Call",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Call(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Class",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Class()",
        "methodsCompletionVerbose": "Class()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Class",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Class()",
        "methodsCompletionVerbose": "Class()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Keys",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Keys()",
        "methodsCompletionVerbose": "Keys()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Keys",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Keys()",
        "methodsCompletionVerbose": "Keys()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "KeysByParent",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "KeysByParent()",
        "methodsCompletionVerbose": "KeysByParent()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "KeysByParent",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "KeysByParent()",
        "methodsCompletionVerbose": "KeysByParent()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Value",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Value()",
        "methodsCompletionVerbose": "Value()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Value",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Object",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Object",
        "methodsCompletion": "Value()",
        "methodsCompletionVerbose": "Value()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Interrupt",
        "fieldTypeVerbose": "chan func()",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Call",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "Call(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Call",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Call(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "Call(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Compile",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Compile(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Compile(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CompileWithSourceMap",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "CompileWithSourceMap(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "CompileWithSourceMap(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Context",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Context()",
        "methodsCompletionVerbose": "Context()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Context",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Context()",
        "methodsCompletionVerbose": "Context()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ContextLimit",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "ContextLimit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "ContextLimit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ContextLimit",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "ContextLimit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "ContextLimit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ContextSkip",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "ContextSkip(${1:v2 /*type: int*/}, ${2:v3 /*type: bool*/})",
        "methodsCompletionVerbose": "ContextSkip(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ContextSkip",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "ContextSkip(${1:v2 /*type: int*/}, ${2:v3 /*type: bool*/})",
        "methodsCompletionVerbose": "ContextSkip(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Copy",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Copy()",
        "methodsCompletionVerbose": "Copy()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Eval",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Eval(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Eval(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Eval",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Eval(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Eval(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Get(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeCustomError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeCustomError(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "MakeCustomError(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeCustomError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeCustomError(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "MakeCustomError(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeRangeError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeRangeError(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MakeRangeError(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeRangeError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeRangeError(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MakeRangeError(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeSyntaxError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeSyntaxError(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MakeSyntaxError(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeSyntaxError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeSyntaxError(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MakeSyntaxError(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeTypeError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeTypeError(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MakeTypeError(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "MakeTypeError",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "MakeTypeError(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MakeTypeError(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Object",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Object(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Object(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Object",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Object(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Object(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Run",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Run(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Run(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Run",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Run(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Run(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "Set(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDebuggerHandler",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetDebuggerHandler(${1:v2 /*type: func (v1: *otto.Otto) */})",
        "methodsCompletionVerbose": "SetDebuggerHandler(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDebuggerHandler",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetDebuggerHandler(${1:v2 /*type: func (v1: *otto.Otto) */})",
        "methodsCompletionVerbose": "SetDebuggerHandler(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetRandomSource",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetRandomSource(${1:v2 /*type: func () return(float64) */})",
        "methodsCompletionVerbose": "SetRandomSource(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetRandomSource",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetRandomSource(${1:v2 /*type: func () return(float64) */})",
        "methodsCompletionVerbose": "SetRandomSource(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetStackDepthLimit",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetStackDepthLimit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetStackDepthLimit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetStackDepthLimit",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetStackDepthLimit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetStackDepthLimit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetStackTraceLimit",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetStackTraceLimit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetStackTraceLimit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetStackTraceLimit",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "SetStackTraceLimit(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetStackTraceLimit(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToValue",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "ToValue(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "ToValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToValue",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Otto",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Otto",
        "methodsCompletion": "ToValue(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "ToValue(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Call",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "Call(${1:v2 /*type: otto.Value*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Call(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Class",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "Class()",
        "methodsCompletionVerbose": "Class()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Export",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "Export()",
        "methodsCompletionVerbose": "Export()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsBoolean",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsBoolean()",
        "methodsCompletionVerbose": "IsBoolean()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsDefined",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsDefined()",
        "methodsCompletionVerbose": "IsDefined()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsFunction",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsFunction()",
        "methodsCompletionVerbose": "IsFunction()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNaN",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsNaN()",
        "methodsCompletionVerbose": "IsNaN()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNull",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsNull()",
        "methodsCompletionVerbose": "IsNull()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNumber",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsNumber()",
        "methodsCompletionVerbose": "IsNumber()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsObject",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsObject()",
        "methodsCompletionVerbose": "IsObject()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsPrimitive",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsPrimitive()",
        "methodsCompletionVerbose": "IsPrimitive()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsString",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsString()",
        "methodsCompletionVerbose": "IsString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsUndefined",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "IsUndefined()",
        "methodsCompletionVerbose": "IsUndefined()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Object",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "Object()",
        "methodsCompletionVerbose": "Object()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToBoolean",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "ToBoolean()",
        "methodsCompletionVerbose": "ToBoolean()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToFloat",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "ToFloat()",
        "methodsCompletionVerbose": "ToFloat()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToInteger",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "ToInteger()",
        "methodsCompletionVerbose": "ToInteger()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToString",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto.Value",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto.Value",
        "methodsCompletion": "ToString()",
        "methodsCompletionVerbose": "ToString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Begin",
        "fieldTypeVerbose": "file.Idx",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Position",
        "fieldTypeVerbose": "ast.CommentPosition",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Text",
        "fieldTypeVerbose": "string",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Comment",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Body",
        "fieldTypeVerbose": "[]ast.Statement",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Comments",
        "fieldTypeVerbose": "ast.CommentMap",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DeclarationList",
        "fieldTypeVerbose": "[]ast.Declaration",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "File",
        "fieldTypeVerbose": "*file.File",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Idx0",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "methodsCompletion": "Idx0()",
        "methodsCompletionVerbose": "Idx0()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Idx1",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/ast.Program",
        "methodsCompletion": "Idx1()",
        "methodsCompletionVerbose": "Idx1()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Base",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.File",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.File",
        "methodsCompletion": "Base()",
        "methodsCompletionVerbose": "Base()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Name",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.File",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.File",
        "methodsCompletion": "Name()",
        "methodsCompletionVerbose": "Name()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Position",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.File",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.File",
        "methodsCompletion": "Position(${1:v2 /*type: file.Idx*/})",
        "methodsCompletionVerbose": "Position(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Source",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.File",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.File",
        "methodsCompletion": "Source()",
        "methodsCompletionVerbose": "Source()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WithSourceMap",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.File",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.File",
        "methodsCompletion": "WithSourceMap(${1:v2 /*type: *sourcemap.Consumer*/})",
        "methodsCompletionVerbose": "WithSourceMap(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Column",
        "fieldTypeVerbose": "int",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.Position",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.Position",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Filename",
        "fieldTypeVerbose": "string",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.Position",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.Position",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Line",
        "fieldTypeVerbose": "int",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.Position",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.Position",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Offset",
        "fieldTypeVerbose": "int",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.Position",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.Position",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "github.com/yaklang/yaklang/common/javascript/otto/file.Position",
        "structNameShort": "com/yaklang/yaklang/common/javascript/otto/file.Position",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "File",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "gopkg.in/sourcemap.v1.Consumer",
        "structNameShort": "in/sourcemap.v1.Consumer",
        "methodsCompletion": "File()",
        "methodsCompletionVerbose": "File()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Source",
        "fieldTypeVerbose": "",
        "libName": "js",
        "structName": "gopkg.in/sourcemap.v1.Consumer",
        "structNameShort": "in/sourcemap.v1.Consumer",
        "methodsCompletion": "Source(${1:v2 /*type: int*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Source(v2, v3)",
        "isGolangBuildOrigin": true
      }
    ],
    "json": [
      {
        "isMethod": true,
        "fieldName": "IsArray",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsArray()",
        "methodsCompletionVerbose": "IsArray()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsMap",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsMap()",
        "methodsCompletionVerbose": "IsMap()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNil",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsNil()",
        "methodsCompletionVerbose": "IsNil()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNull",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsNull()",
        "methodsCompletionVerbose": "IsNull()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNumber",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsNumber()",
        "methodsCompletionVerbose": "IsNumber()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsObject",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsObject()",
        "methodsCompletionVerbose": "IsObject()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsSlice",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsSlice()",
        "methodsCompletionVerbose": "IsSlice()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsString",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "IsString()",
        "methodsCompletionVerbose": "IsString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Value",
        "fieldTypeVerbose": "",
        "libName": "json",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakJson",
        "methodsCompletion": "Value()",
        "methodsCompletionVerbose": "Value()",
        "isGolangBuildOrigin": false
      }
    ],
    "judge": [
      {
        "isMethod": false,
        "fieldName": "NegativeSample",
        "fieldTypeVerbose": "bytes",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NegativeThresholdAverage",
        "fieldTypeVerbose": "float64",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PositiveSample",
        "fieldTypeVerbose": "bytes",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PositiveThresholdAverage",
        "fieldTypeVerbose": "float64",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AdjustNegativeThreshold",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "AdjustNegativeThreshold(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "AdjustNegativeThreshold(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AdjustPositiveThreshold",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "AdjustPositiveThreshold(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "AdjustPositiveThreshold(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNegative",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "IsNegative(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "IsNegative(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsNegativeWithThreshold",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "IsNegativeWithThreshold(${1:v2 /*type: bytes*/}, ${2:v3 /*type: float64*/})",
        "methodsCompletionVerbose": "IsNegativeWithThreshold(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsPositive",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "IsPositive(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "IsPositive(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsPositiveWithThreshold",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "IsPositiveWithThreshold(${1:v2 /*type: bytes*/}, ${2:v3 /*type: float64*/})",
        "methodsCompletionVerbose": "IsPositiveWithThreshold(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetNegativeSample",
        "fieldTypeVerbose": "",
        "libName": "judge",
        "structName": "github.com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "structNameShort": "com/yaklang/yaklang/common/utils/comparer.Discriminator",
        "methodsCompletion": "SetNegativeSample(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "SetNegativeSample(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "jwt": [
      {
        "isMethod": false,
        "fieldName": "Claims",
        "fieldTypeVerbose": "jwt.Claims",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Header",
        "fieldTypeVerbose": "map[string]any",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Method",
        "fieldTypeVerbose": "jwt.SigningMethod",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "string",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Signature",
        "fieldTypeVerbose": "string",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Valid",
        "fieldTypeVerbose": "bool",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SignedString",
        "fieldTypeVerbose": "",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "SignedString(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "SignedString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SigningString",
        "fieldTypeVerbose": "",
        "libName": "jwt",
        "structName": "github.com/dgrijalva/jwt-go.Token",
        "structNameShort": "com/dgrijalva/jwt-go.Token",
        "methodsCompletion": "SigningString()",
        "methodsCompletionVerbose": "SigningString()",
        "isGolangBuildOrigin": true
      }
    ],
    "ldap": [
      {
        "isMethod": false,
        "fieldName": "Attributes",
        "fieldTypeVerbose": "[]ldap.Attribute",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.AddRequest",
        "structNameShort": "com/go-ldap/ldap.AddRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.AddRequest",
        "structNameShort": "com/go-ldap/ldap.AddRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.AddRequest",
        "structNameShort": "com/go-ldap/ldap.AddRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Attribute",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.AddRequest",
        "structNameShort": "com/go-ldap/ldap.AddRequest",
        "methodsCompletion": "Attribute(${1:v2 /*type: string*/}, ${2:v3 /*type: []string*/})",
        "methodsCompletionVerbose": "Attribute(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Attribute",
        "structNameShort": "com/go-ldap/ldap.Attribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Vals",
        "fieldTypeVerbose": "[]string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Attribute",
        "structNameShort": "com/go-ldap/ldap.Attribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Modification",
        "fieldTypeVerbose": "ldap.PartialAttribute",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Change",
        "structNameShort": "com/go-ldap/ldap.Change",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Operation",
        "fieldTypeVerbose": "uint",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Change",
        "structNameShort": "com/go-ldap/ldap.Change",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Debug",
        "fieldTypeVerbose": "ldap.debugging",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Add(${1:v2 /*type: *ldap.AddRequest*/})",
        "methodsCompletionVerbose": "Add(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Bind",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Bind(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "Bind(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Compare",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Compare(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: string*/})",
        "methodsCompletionVerbose": "Compare(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Del",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Del(${1:v2 /*type: *ldap.DelRequest*/})",
        "methodsCompletionVerbose": "Del(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "IsClosing",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "IsClosing()",
        "methodsCompletionVerbose": "IsClosing()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Modify",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Modify(${1:v2 /*type: *ldap.ModifyRequest*/})",
        "methodsCompletionVerbose": "Modify(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ModifyDN",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "ModifyDN(${1:v2 /*type: *ldap.ModifyDNRequest*/})",
        "methodsCompletionVerbose": "ModifyDN(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PasswordModify",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "PasswordModify(${1:v2 /*type: *ldap.PasswordModifyRequest*/})",
        "methodsCompletionVerbose": "PasswordModify(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Search",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Search(${1:v2 /*type: *ldap.SearchRequest*/})",
        "methodsCompletionVerbose": "Search(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SearchWithPaging",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "SearchWithPaging(${1:v2 /*type: *ldap.SearchRequest*/}, ${2:v3 /*type: uint32*/})",
        "methodsCompletionVerbose": "SearchWithPaging(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetTimeout",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "SetTimeout(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "SetTimeout(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SimpleBind",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "SimpleBind(${1:v2 /*type: *ldap.SimpleBindRequest*/})",
        "methodsCompletionVerbose": "SimpleBind(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Start",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "Start()",
        "methodsCompletionVerbose": "Start()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "StartTLS",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "StartTLS(${1:v2 /*type: *tls.Config*/})",
        "methodsCompletionVerbose": "StartTLS(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TLSConnectionState",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "TLSConnectionState()",
        "methodsCompletionVerbose": "TLSConnectionState()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnauthenticatedBind",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Conn",
        "structNameShort": "com/go-ldap/ldap.Conn",
        "methodsCompletion": "UnauthenticatedBind(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "UnauthenticatedBind(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.DelRequest",
        "structNameShort": "com/go-ldap/ldap.DelRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.DelRequest",
        "structNameShort": "com/go-ldap/ldap.DelRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Attributes",
        "fieldTypeVerbose": "[]*ldap.EntryAttribute",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetAttributeValue",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "GetAttributeValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetAttributeValue(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetAttributeValues",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "GetAttributeValues(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetAttributeValues(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetRawAttributeValue",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "GetRawAttributeValue(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetRawAttributeValue(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "GetRawAttributeValues",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "GetRawAttributeValues(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetRawAttributeValues(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrettyPrint",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "PrettyPrint(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "PrettyPrint(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Print",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.Entry",
        "structNameShort": "com/go-ldap/ldap.Entry",
        "methodsCompletion": "Print()",
        "methodsCompletionVerbose": "Print()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ByteValues",
        "fieldTypeVerbose": "[]bytes",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.EntryAttribute",
        "structNameShort": "com/go-ldap/ldap.EntryAttribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.EntryAttribute",
        "structNameShort": "com/go-ldap/ldap.EntryAttribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Values",
        "fieldTypeVerbose": "[]string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.EntryAttribute",
        "structNameShort": "com/go-ldap/ldap.EntryAttribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrettyPrint",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.EntryAttribute",
        "structNameShort": "com/go-ldap/ldap.EntryAttribute",
        "methodsCompletion": "PrettyPrint(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "PrettyPrint(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Print",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.EntryAttribute",
        "structNameShort": "com/go-ldap/ldap.EntryAttribute",
        "methodsCompletion": "Print()",
        "methodsCompletionVerbose": "Print()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyDNRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyDNRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DeleteOldRDN",
        "fieldTypeVerbose": "bool",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyDNRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyDNRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NewRDN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyDNRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyDNRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NewSuperior",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyDNRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyDNRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Changes",
        "fieldTypeVerbose": "[]ldap.Change",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyRequest",
        "methodsCompletion": "Add(${1:v2 /*type: string*/}, ${2:v3 /*type: []string*/})",
        "methodsCompletionVerbose": "Add(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Delete",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyRequest",
        "methodsCompletion": "Delete(${1:v2 /*type: string*/}, ${2:v3 /*type: []string*/})",
        "methodsCompletionVerbose": "Delete(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Replace",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.ModifyRequest",
        "structNameShort": "com/go-ldap/ldap.ModifyRequest",
        "methodsCompletion": "Replace(${1:v2 /*type: string*/}, ${2:v3 /*type: []string*/})",
        "methodsCompletionVerbose": "Replace(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PartialAttribute",
        "structNameShort": "com/go-ldap/ldap.PartialAttribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Vals",
        "fieldTypeVerbose": "[]string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PartialAttribute",
        "structNameShort": "com/go-ldap/ldap.PartialAttribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NewPassword",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PasswordModifyRequest",
        "structNameShort": "com/go-ldap/ldap.PasswordModifyRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OldPassword",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PasswordModifyRequest",
        "structNameShort": "com/go-ldap/ldap.PasswordModifyRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "UserIdentity",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PasswordModifyRequest",
        "structNameShort": "com/go-ldap/ldap.PasswordModifyRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "GeneratedPassword",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PasswordModifyResult",
        "structNameShort": "com/go-ldap/ldap.PasswordModifyResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Referral",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.PasswordModifyResult",
        "structNameShort": "com/go-ldap/ldap.PasswordModifyResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Attributes",
        "fieldTypeVerbose": "[]string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "BaseDN",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DerefAliases",
        "fieldTypeVerbose": "int",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Filter",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Scope",
        "fieldTypeVerbose": "int",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SizeLimit",
        "fieldTypeVerbose": "int",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TimeLimit",
        "fieldTypeVerbose": "int",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TypesOnly",
        "fieldTypeVerbose": "bool",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchRequest",
        "structNameShort": "com/go-ldap/ldap.SearchRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchResult",
        "structNameShort": "com/go-ldap/ldap.SearchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Entries",
        "fieldTypeVerbose": "[]*ldap.Entry",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchResult",
        "structNameShort": "com/go-ldap/ldap.SearchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Referrals",
        "fieldTypeVerbose": "[]string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchResult",
        "structNameShort": "com/go-ldap/ldap.SearchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "PrettyPrint",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchResult",
        "structNameShort": "com/go-ldap/ldap.SearchResult",
        "methodsCompletion": "PrettyPrint(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "PrettyPrint(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Print",
        "fieldTypeVerbose": "",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SearchResult",
        "structNameShort": "com/go-ldap/ldap.SearchResult",
        "methodsCompletion": "Print()",
        "methodsCompletionVerbose": "Print()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "AllowEmptyPassword",
        "fieldTypeVerbose": "bool",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SimpleBindRequest",
        "structNameShort": "com/go-ldap/ldap.SimpleBindRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SimpleBindRequest",
        "structNameShort": "com/go-ldap/ldap.SimpleBindRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Password",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SimpleBindRequest",
        "structNameShort": "com/go-ldap/ldap.SimpleBindRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Username",
        "fieldTypeVerbose": "string",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SimpleBindRequest",
        "structNameShort": "com/go-ldap/ldap.SimpleBindRequest",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Controls",
        "fieldTypeVerbose": "[]ldap.Control",
        "libName": "ldap",
        "structName": "github.com/go-ldap/ldap.SimpleBindResult",
        "structNameShort": "com/go-ldap/ldap.SimpleBindResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      }
    ],
    "mmdb": [
      {
        "isMethod": false,
        "fieldName": "BinaryFormatMajorVersion",
        "fieldTypeVerbose": "uint",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "BinaryFormatMinorVersion",
        "fieldTypeVerbose": "uint",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "BuildEpoch",
        "fieldTypeVerbose": "uint",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DatabaseType",
        "fieldTypeVerbose": "string",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "map[string]string",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IPVersion",
        "fieldTypeVerbose": "uint",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Languages",
        "fieldTypeVerbose": "[]string",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NodeCount",
        "fieldTypeVerbose": "uint",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "RecordSize",
        "fieldTypeVerbose": "uint",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Metadata",
        "structNameShort": "com/oschwald/maxminddb-golang.Metadata",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Metadata",
        "fieldTypeVerbose": "maxminddb.Metadata",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Decode",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "Decode(${1:v2 /*type: uintptr*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Decode(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Lookup",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "Lookup(${1:v2 /*type: net.IP*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Lookup(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LookupNetwork",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "LookupNetwork(${1:v2 /*type: net.IP*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "LookupNetwork(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LookupOffset",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "LookupOffset(${1:v2 /*type: net.IP*/})",
        "methodsCompletionVerbose": "LookupOffset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Networks",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "Networks()",
        "methodsCompletionVerbose": "Networks()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NetworksWithin",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "NetworksWithin(${1:v2 /*type: *net.IPNet*/})",
        "methodsCompletionVerbose": "NetworksWithin(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Verify",
        "fieldTypeVerbose": "",
        "libName": "mmdb",
        "structName": "github.com/oschwald/maxminddb-golang.Reader",
        "structNameShort": "com/oschwald/maxminddb-golang.Reader",
        "methodsCompletion": "Verify()",
        "methodsCompletionVerbose": "Verify()",
        "isGolangBuildOrigin": true
      }
    ],
    "nasl": [
      {
        "isMethod": false,
        "fieldName": "BugtraqId",
        "fieldTypeVerbose": "[]int",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVE",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Category",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Copyright",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Dependencies",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExcludeKeys",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Family",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ip",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MandatoryKeys",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OID",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OriginFileName",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Preferences",
        "fieldTypeVerbose": "map[string]any",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RecvTimeout",
        "fieldTypeVerbose": "int",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RequireKeys",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RequirePorts",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RequireUdpPorts",
        "fieldTypeVerbose": "[]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Script",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ScriptName",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tags",
        "fieldTypeVerbose": "map[string]any",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timeout",
        "fieldTypeVerbose": "int",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Vhosts",
        "fieldTypeVerbose": "[]*antlr4nasl.NaslVhost",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Xrefs",
        "fieldTypeVerbose": "map[string]string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Save",
        "fieldTypeVerbose": "",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslScriptInfo",
        "methodsCompletion": "Save()",
        "methodsCompletionVerbose": "Save()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hostname",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslVhost",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslVhost",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Source",
        "fieldTypeVerbose": "string",
        "libName": "nasl",
        "structName": "github.com/yaklang/yaklang/common/yak/antlr4nasl.NaslVhost",
        "structNameShort": "com/yaklang/yaklang/common/yak/antlr4nasl.NaslVhost",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "nuclei": [
      {
        "isMethod": false,
        "fieldName": "CVE",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptionZh",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Details",
        "fieldTypeVerbose": "map[string]any",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MatchedAt",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Payload",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PocName",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawJson",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Severity",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Source",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tags",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Target",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timestamp",
        "fieldTypeVerbose": "int64",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TitleName",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocVul",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Id",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Info",
        "fieldTypeVerbose": "struct { Name string \"yaml:\\\"name\\\"\"; Author string \"yaml:\\\"author\\\"\"; Description string \"yaml:\\\"description\\\"\"; Tags string \"yaml:\\\"tags\\\"\" }",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalPath",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.templateDesc",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVE",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CveAccessComplexity",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CveAccessVector",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Details",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromYakScript",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPInteger",
        "fieldTypeVerbose": "int64",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ignore",
        "fieldTypeVerbose": "bool",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsPotential",
        "fieldTypeVerbose": "bool",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsRead",
        "fieldTypeVerbose": "bool",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Parameter",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Payload",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "QuotedRequest",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "QuotedResponse",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ReverseToken",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RiskType",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RiskTypeVerbose",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RuntimeId",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Severity",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Solution",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TaskName",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Title",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TitleVerbose",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UploadOnline",
        "fieldTypeVerbose": "bool",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Url",
        "fieldTypeVerbose": "string",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "WaitingVerified",
        "fieldTypeVerbose": "bool",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGRPCModel",
        "fieldTypeVerbose": "",
        "libName": "nuclei",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Risk",
        "methodsCompletion": "ToGRPCModel()",
        "methodsCompletionVerbose": "ToGRPCModel()",
        "isGolangBuildOrigin": false
      }
    ],
    "pcapx": [
      {
        "isMethod": false,
        "fieldName": "HttpRequest",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HttpResponse",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPIPInboundPayload",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPIPOutboundPayload",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LinkLayerPayload",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalIP",
        "fieldTypeVerbose": "string",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawTCP",
        "fieldTypeVerbose": "bool",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TCPIPPayload",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UDPIPInboundPayload",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UDPIPOutboundPayload",
        "fieldTypeVerbose": "bytes",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.ChaosTraffic",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPStatistics",
        "fieldTypeVerbose": "map[string]int64",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LinkLayerStatistics",
        "fieldTypeVerbose": "map[string]int64",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NetworkLayerStatistics",
        "fieldTypeVerbose": "map[string]int64",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TransportationLayerStatistics",
        "fieldTypeVerbose": "map[string]int64",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddICMPStatistics",
        "fieldTypeVerbose": "",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "AddICMPStatistics(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "AddICMPStatistics(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddLinkLayerStatistics",
        "fieldTypeVerbose": "",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "AddLinkLayerStatistics(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "AddLinkLayerStatistics(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddNetworkLayerStatistics",
        "fieldTypeVerbose": "",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "AddNetworkLayerStatistics(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "AddNetworkLayerStatistics(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddTransportationLayerStatistics",
        "fieldTypeVerbose": "",
        "libName": "pcapx",
        "structName": "github.com/yaklang/yaklang/common/pcapx.Statistics",
        "structNameShort": "com/yaklang/yaklang/common/pcapx.Statistics",
        "methodsCompletion": "AddTransportationLayerStatistics(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "AddTransportationLayerStatistics(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "ping": [
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "string",
        "libName": "ping",
        "structName": "github.com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ok",
        "fieldTypeVerbose": "bool",
        "libName": "ping",
        "structName": "github.com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RTT",
        "fieldTypeVerbose": "int64",
        "libName": "ping",
        "structName": "github.com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Reason",
        "fieldTypeVerbose": "string",
        "libName": "ping",
        "structName": "github.com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/pingutil.PingResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "poc": [
      {
        "isMethod": false,
        "fieldName": "FromPlugin",
        "fieldTypeVerbose": "string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Http2",
        "fieldTypeVerbose": "bool",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Https",
        "fieldTypeVerbose": "bool",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MultiResponse",
        "fieldTypeVerbose": "bool",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PortIsOpen",
        "fieldTypeVerbose": "bool",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Proxy",
        "fieldTypeVerbose": "string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawPacket",
        "fieldTypeVerbose": "bytes",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawRequest",
        "fieldTypeVerbose": "bytes",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RedirectRawPackets",
        "fieldTypeVerbose": "[]*lowhttp.RedirectFlow",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RuntimeId",
        "fieldTypeVerbose": "string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Source",
        "fieldTypeVerbose": "string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TraceInfo",
        "fieldTypeVerbose": "*lowhttp.LowhttpTraceInfo",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Url",
        "fieldTypeVerbose": "string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetDurationFloat",
        "fieldTypeVerbose": "",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpResponse",
        "methodsCompletion": "GetDurationFloat()",
        "methodsCompletionVerbose": "GetDurationFloat()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AvailableDNSServers",
        "fieldTypeVerbose": "[]string",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ConnTime",
        "fieldTypeVerbose": "time.Duration",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DNSTime",
        "fieldTypeVerbose": "time.Duration",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ServerTime",
        "fieldTypeVerbose": "time.Duration",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TotalTime",
        "fieldTypeVerbose": "time.Duration",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetServerDurationMS",
        "fieldTypeVerbose": "",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.LowhttpTraceInfo",
        "methodsCompletion": "GetServerDurationMS()",
        "methodsCompletionVerbose": "GetServerDurationMS()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsHttps",
        "fieldTypeVerbose": "bool",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.RedirectFlow",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.RedirectFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Request",
        "fieldTypeVerbose": "bytes",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.RedirectFlow",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.RedirectFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Response",
        "fieldTypeVerbose": "bytes",
        "libName": "poc",
        "structName": "github.com/yaklang/yaklang/common/utils/lowhttp.RedirectFlow",
        "structNameShort": "com/yaklang/yaklang/common/utils/lowhttp.RedirectFlow",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "re": [
      {
        "isMethod": true,
        "fieldName": "Copy",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "Copy()",
        "methodsCompletionVerbose": "Copy()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Expand",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "Expand(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: bytes*/}, ${4:v5 /*type: []int*/})",
        "methodsCompletionVerbose": "Expand(v2, v3, v4, v5)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ExpandString",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ExpandString(${1:v2 /*type: bytes*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: string*/}, ${4:v5 /*type: []int*/})",
        "methodsCompletionVerbose": "ExpandString(v2, v3, v4, v5)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Find",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "Find(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Find(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAll",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAll(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAll(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllIndex(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllString",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllString(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllString(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllStringIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllStringIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllStringIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllStringSubmatch",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllStringSubmatch(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllStringSubmatch(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllStringSubmatchIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllStringSubmatchIndex(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllStringSubmatchIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllSubmatch",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllSubmatch(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllSubmatch(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindAllSubmatchIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindAllSubmatchIndex(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "FindAllSubmatchIndex(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindIndex(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "FindIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindReaderIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindReaderIndex(${1:v2 /*type: io.RuneReader*/})",
        "methodsCompletionVerbose": "FindReaderIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindReaderSubmatchIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindReaderSubmatchIndex(${1:v2 /*type: io.RuneReader*/})",
        "methodsCompletionVerbose": "FindReaderSubmatchIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindString",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindStringIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindStringIndex(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindStringIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindStringSubmatch",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindStringSubmatch(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindStringSubmatch(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindStringSubmatchIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindStringSubmatchIndex(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindStringSubmatchIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindSubmatch",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindSubmatch(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "FindSubmatch(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "FindSubmatchIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "FindSubmatchIndex(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "FindSubmatchIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LiteralPrefix",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "LiteralPrefix()",
        "methodsCompletionVerbose": "LiteralPrefix()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Longest",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "Longest()",
        "methodsCompletionVerbose": "Longest()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Match",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "Match(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Match(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MatchReader",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "MatchReader(${1:v2 /*type: io.RuneReader*/})",
        "methodsCompletionVerbose": "MatchReader(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MatchString",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "MatchString(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "MatchString(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NumSubexp",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "NumSubexp()",
        "methodsCompletionVerbose": "NumSubexp()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReplaceAll",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ReplaceAll(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReplaceAll(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReplaceAllFunc",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ReplaceAllFunc(${1:v2 /*type: bytes*/}, ${2:v3 /*type: func (v1: bytes) return(bytes) */})",
        "methodsCompletionVerbose": "ReplaceAllFunc(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReplaceAllLiteral",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ReplaceAllLiteral(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReplaceAllLiteral(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReplaceAllLiteralString",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ReplaceAllLiteralString(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "ReplaceAllLiteralString(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReplaceAllString",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ReplaceAllString(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "ReplaceAllString(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReplaceAllStringFunc",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "ReplaceAllStringFunc(${1:v2 /*type: string*/}, ${2:v3 /*type: func (v1: string) return(string) */})",
        "methodsCompletionVerbose": "ReplaceAllStringFunc(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Split",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "Split(${1:v2 /*type: string*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Split(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SubexpIndex",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "SubexpIndex(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SubexpIndex(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SubexpNames",
        "fieldTypeVerbose": "",
        "libName": "re",
        "structName": "regexp.Regexp",
        "structNameShort": "Regexp",
        "methodsCompletion": "SubexpNames()",
        "methodsCompletionVerbose": "SubexpNames()",
        "isGolangBuildOrigin": true
      }
    ],
    "redis": [
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Do",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "Do(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Do(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "Get(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Get(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetEx",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "GetEx(${1:v2 /*type: any*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "GetEx(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Publish",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "Publish(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "Publish(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Set",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "Set(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Set(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWithTTL",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "SetWithTTL(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: int*/})",
        "methodsCompletionVerbose": "SetWithTTL(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Subscribe",
        "fieldTypeVerbose": "",
        "libName": "redis",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.redisClient",
        "methodsCompletion": "Subscribe(${1:v2 /*type: string*/}, ${2:v3 /*type: func (v1: *redis.Message) */})",
        "methodsCompletionVerbose": "Subscribe(v2, v3)",
        "isGolangBuildOrigin": false
      }
    ],
    "report": [
      {
        "isMethod": false,
        "fieldName": "FromValue",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Items",
        "fieldTypeVerbose": "[]*yakit.ReportItem",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OwnerValue",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TitleValue",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BarGraphHorizontal",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "BarGraphHorizontal(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "BarGraphHorizontal(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BarGraphVertical",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "BarGraphVertical(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "BarGraphVertical(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Code",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Code(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Code(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Divider",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Divider()",
        "methodsCompletionVerbose": "Divider()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "From",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "From(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "From(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Markdown",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Markdown(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Markdown(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Owner",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Owner(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Owner(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "PieGraph",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "PieGraph(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "PieGraph(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Raw",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Raw(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Raw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Save",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Save()",
        "methodsCompletionVerbose": "Save()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SearchTable",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "SearchTable(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "SearchTable(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Table",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Table(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Table(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Title",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "Title(${1:v2 /*type: any*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Title(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToRecord",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "ToRecord()",
        "methodsCompletionVerbose": "ToRecord()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WordCloud",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.Report",
        "methodsCompletion": "WordCloud(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "WordCloud(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Content",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportItem",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "From",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Owner",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PublishedAt",
        "fieldTypeVerbose": "time.Time",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "QuotedJson",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Title",
        "fieldTypeVerbose": "string",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CalcHash",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "CalcHash()",
        "methodsCompletionVerbose": "CalcHash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGRPCModel",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "ToGRPCModel()",
        "methodsCompletionVerbose": "ToGRPCModel()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToReport",
        "fieldTypeVerbose": "",
        "libName": "report",
        "structName": "github.com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "structNameShort": "com/yaklang/yaklang/common/yakgrpc/yakit.ReportRecord",
        "methodsCompletion": "ToReport()",
        "methodsCompletionVerbose": "ToReport()",
        "isGolangBuildOrigin": false
      }
    ],
    "risk": [
      {
        "isMethod": false,
        "fieldName": "Domain",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Mode",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "bytes",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteIP",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemotePort",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timestamp",
        "fieldTypeVerbose": "int64",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Token",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetDomain",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetDomain()",
        "methodsCompletionVerbose": "GetDomain()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetMode",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetMode()",
        "methodsCompletionVerbose": "GetMode()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRaw",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetRaw()",
        "methodsCompletionVerbose": "GetRaw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetRemoteAddr()",
        "methodsCompletionVerbose": "GetRemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemoteIP",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetRemoteIP()",
        "methodsCompletionVerbose": "GetRemoteIP()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemotePort",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetRemotePort()",
        "methodsCompletionVerbose": "GetRemotePort()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTimestamp",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetTimestamp()",
        "methodsCompletionVerbose": "GetTimestamp()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetToken",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetToken()",
        "methodsCompletionVerbose": "GetToken()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetType",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "GetType()",
        "methodsCompletionVerbose": "GetType()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.DNSLogEvent",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurrentRemoteAddr",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurrentRemoteCachedConnectionCount",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Histories",
        "fieldTypeVerbose": "[]string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Size",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SizeCachedHistoryConnectionCount",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timestamp",
        "fieldTypeVerbose": "int64",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TriggerTimestamp",
        "fieldTypeVerbose": "int64",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCurrentRemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetCurrentRemoteAddr()",
        "methodsCompletionVerbose": "GetCurrentRemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCurrentRemoteCachedConnectionCount",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetCurrentRemoteCachedConnectionCount()",
        "methodsCompletionVerbose": "GetCurrentRemoteCachedConnectionCount()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHistories",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetHistories()",
        "methodsCompletionVerbose": "GetHistories()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSize",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetSize()",
        "methodsCompletionVerbose": "GetSize()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSizeCachedHistoryConnectionCount",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetSizeCachedHistoryConnectionCount()",
        "methodsCompletionVerbose": "GetSizeCachedHistoryConnectionCount()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTimestamp",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetTimestamp()",
        "methodsCompletionVerbose": "GetTimestamp()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTriggerTimestamp",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "GetTriggerTimestamp()",
        "methodsCompletionVerbose": "GetTriggerTimestamp()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.ICMPTriggerNotification",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CurrentRemoteCachedConnectionCount",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "History",
        "fieldTypeVerbose": "[]string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalPort",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalPortCachedHistoryConnectionCount",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemoteIP",
        "fieldTypeVerbose": "string",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RemotePort",
        "fieldTypeVerbose": "int32",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timestamp",
        "fieldTypeVerbose": "int64",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TriggerTimestamp",
        "fieldTypeVerbose": "int64",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Descriptor",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "Descriptor()",
        "methodsCompletionVerbose": "Descriptor()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCurrentRemoteCachedConnectionCount",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetCurrentRemoteCachedConnectionCount()",
        "methodsCompletionVerbose": "GetCurrentRemoteCachedConnectionCount()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHistory",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetHistory()",
        "methodsCompletionVerbose": "GetHistory()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLocalPort",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetLocalPort()",
        "methodsCompletionVerbose": "GetLocalPort()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLocalPortCachedHistoryConnectionCount",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetLocalPortCachedHistoryConnectionCount()",
        "methodsCompletionVerbose": "GetLocalPortCachedHistoryConnectionCount()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetRemoteAddr()",
        "methodsCompletionVerbose": "GetRemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemoteIP",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetRemoteIP()",
        "methodsCompletionVerbose": "GetRemoteIP()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRemotePort",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetRemotePort()",
        "methodsCompletionVerbose": "GetRemotePort()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTimestamp",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetTimestamp()",
        "methodsCompletionVerbose": "GetTimestamp()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTriggerTimestamp",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "GetTriggerTimestamp()",
        "methodsCompletionVerbose": "GetTriggerTimestamp()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoMessage",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "ProtoMessage()",
        "methodsCompletionVerbose": "ProtoMessage()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ProtoReflect",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "ProtoReflect()",
        "methodsCompletionVerbose": "ProtoReflect()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "Reset()",
        "methodsCompletionVerbose": "Reset()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "risk",
        "structName": "github.com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "structNameShort": "com/yaklang/yaklang/common/cybertunnel/tpb.RandomPortTriggerEvent",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      }
    ],
    "sca": [
      {
        "isMethod": false,
        "fieldName": "AmendedCPE",
        "fieldTypeVerbose": "[]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AssociatedCVE",
        "fieldTypeVerbose": "[]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DependsOn",
        "fieldTypeVerbose": "dxtypes.PackageRelationShip",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DownStreamPackages",
        "fieldTypeVerbose": "map[string]*dxtypes.Package",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromAnalyzer",
        "fieldTypeVerbose": "[]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromFile",
        "fieldTypeVerbose": "[]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsVersionRange",
        "fieldTypeVerbose": "bool",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "License",
        "fieldTypeVerbose": "[]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Potential",
        "fieldTypeVerbose": "bool",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UpStreamPackages",
        "fieldTypeVerbose": "map[string]*dxtypes.Package",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Verification",
        "fieldTypeVerbose": "string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "From",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "From()",
        "methodsCompletionVerbose": "From()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "HasVersionRange",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "HasVersionRange()",
        "methodsCompletionVerbose": "HasVersionRange()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Identifier",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "Identifier()",
        "methodsCompletionVerbose": "Identifier()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LinkDepend",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "LinkDepend(${1:v2 /*type: *dxtypes.Package*/})",
        "methodsCompletionVerbose": "LinkDepend(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Merge",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "Merge(${1:v2 /*type: *dxtypes.Package*/})",
        "methodsCompletionVerbose": "Merge(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetFrom",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "SetFrom(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SetFrom(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.Package",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.Package",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "And",
        "fieldTypeVerbose": "map[string]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.PackageRelationShip",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.PackageRelationShip",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Or",
        "fieldTypeVerbose": "[]map[string]string",
        "libName": "sca",
        "structName": "github.com/yaklang/yaklang/common/sca/dxtypes.PackageRelationShip",
        "structNameShort": "com/yaklang/yaklang/common/sca/dxtypes.PackageRelationShip",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "servicescan": [
      {
        "isMethod": false,
        "fieldName": "Banner",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CPEFromUrls",
        "fieldTypeVerbose": "map[string][]*webfingerprint.CPE",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CPEs",
        "fieldTypeVerbose": "[]string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DeviceType",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hostname",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HttpFlows",
        "fieldTypeVerbose": "[]*fp.HTTPFlow",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Info",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OperationVerbose",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ProductVerbose",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Proto",
        "fieldTypeVerbose": "fp.TransportProto",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ServiceName",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Version",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FromRegexp2Match",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.FingerprintInfo",
        "structNameShort": "com/yaklang/yaklang/common/fp.FingerprintInfo",
        "methodsCompletion": "FromRegexp2Match(${1:v2 /*type: *regexp2.Match*/})",
        "methodsCompletionVerbose": "FromRegexp2Match(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fingerprint",
        "fieldTypeVerbose": "*fp.FingerprintInfo",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Reason",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "State",
        "fieldTypeVerbose": "fp.PortState",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Target",
        "fieldTypeVerbose": "string",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetBanner",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetBanner()",
        "methodsCompletionVerbose": "GetBanner()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetCPEs",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetCPEs()",
        "methodsCompletionVerbose": "GetCPEs()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetDomains",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetDomains()",
        "methodsCompletionVerbose": "GetDomains()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetFuzzRequest",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetFuzzRequest()",
        "methodsCompletionVerbose": "GetFuzzRequest()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHtmlTitle",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetHtmlTitle()",
        "methodsCompletionVerbose": "GetHtmlTitle()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetProto",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetProto()",
        "methodsCompletionVerbose": "GetProto()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetRequestRaw",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetRequestRaw()",
        "methodsCompletionVerbose": "GetRequestRaw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetResponseRaw",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetResponseRaw()",
        "methodsCompletionVerbose": "GetResponseRaw()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetServiceName",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "GetServiceName()",
        "methodsCompletionVerbose": "GetServiceName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "HaveDialFailed",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "HaveDialFailed()",
        "methodsCompletionVerbose": "HaveDialFailed()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsOpen",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "IsOpen()",
        "methodsCompletionVerbose": "IsOpen()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Merge",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "Merge(${1:v2 /*type: *fp.MatchResult*/})",
        "methodsCompletionVerbose": "Merge(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "String(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "String(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Tidy",
        "fieldTypeVerbose": "",
        "libName": "servicescan",
        "structName": "github.com/yaklang/yaklang/common/fp.MatchResult",
        "structNameShort": "com/yaklang/yaklang/common/fp.MatchResult",
        "methodsCompletion": "Tidy()",
        "methodsCompletionVerbose": "Tidy()",
        "isGolangBuildOrigin": false
      }
    ],
    "smb": [
      {
        "isMethod": false,
        "fieldName": "Data",
        "fieldTypeVerbose": "gss.NegTokenInitData",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "OID",
        "fieldTypeVerbose": "asn1.ObjectIdentifier",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "MarshalBinary",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
        "methodsCompletion": "MarshalBinary(${1:v2 /*type: *encoder.Metadata*/})",
        "methodsCompletionVerbose": "MarshalBinary(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnmarshalBinary",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInit",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInit",
        "methodsCompletion": "UnmarshalBinary(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *encoder.Metadata*/})",
        "methodsCompletionVerbose": "UnmarshalBinary(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MechToken",
        "fieldTypeVerbose": "bytes",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MechTokenMIC",
        "fieldTypeVerbose": "bytes",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MechTypes",
        "fieldTypeVerbose": "[]asn1.ObjectIdentifier",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ReqFlags",
        "fieldTypeVerbose": "asn1.BitString",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/gss.NegTokenInitData",
        "structNameShort": "com/stacktitan/smb/gss.NegTokenInitData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Command",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "CreditCharge",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Credits",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Flags",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "MessageID",
        "fieldTypeVerbose": "uint64",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NextCommand",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ProtocolID",
        "fieldTypeVerbose": "bytes",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Reserved",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SessionID",
        "fieldTypeVerbose": "uint64",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Signature",
        "fieldTypeVerbose": "bytes",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Status",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StructureSize",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "TreeID",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Header",
        "structNameShort": "com/stacktitan/smb/smb.Header",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Capabilities",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ClientGuid",
        "fieldTypeVerbose": "bytes",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "ClientStartTime",
        "fieldTypeVerbose": "uint64",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DialectCount",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Dialects",
        "fieldTypeVerbose": "[]uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Header",
        "fieldTypeVerbose": "smb.Header",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Reserved",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SecurityMode",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StructureSize",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.NegotiateReq",
        "structNameShort": "com/stacktitan/smb/smb.NegotiateReq",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsAuthenticated",
        "fieldTypeVerbose": "bool",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "IsSigningRequired",
        "fieldTypeVerbose": "bool",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Debug",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "Debug(${1:v2 /*type: string*/}, ${2:v3 /*type: error*/})",
        "methodsCompletionVerbose": "Debug(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NegotiateProtocol",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "NegotiateProtocol()",
        "methodsCompletionVerbose": "NegotiateProtocol()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewNegotiateReq",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "NewNegotiateReq()",
        "methodsCompletionVerbose": "NewNegotiateReq()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewSessionSetup1Req",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "NewSessionSetup1Req()",
        "methodsCompletionVerbose": "NewSessionSetup1Req()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewSessionSetup2Req",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "NewSessionSetup2Req()",
        "methodsCompletionVerbose": "NewSessionSetup2Req()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewTreeConnectReq",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "NewTreeConnectReq(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "NewTreeConnectReq(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "NewTreeDisconnectReq",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "NewTreeDisconnectReq(${1:v2 /*type: uint32*/})",
        "methodsCompletionVerbose": "NewTreeDisconnectReq(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TreeConnect",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "TreeConnect(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TreeConnect(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TreeDisconnect",
        "fieldTypeVerbose": "",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.Session",
        "structNameShort": "com/stacktitan/smb/smb.Session",
        "methodsCompletion": "TreeDisconnect(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "TreeDisconnect(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Capabilities",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Channel",
        "fieldTypeVerbose": "uint32",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Flags",
        "fieldTypeVerbose": "byte",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Header",
        "fieldTypeVerbose": "smb.Header",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PreviousSessionID",
        "fieldTypeVerbose": "uint64",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SecurityBlob",
        "fieldTypeVerbose": "*gss.NegTokenInit",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SecurityBufferLength",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SecurityBufferOffset",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "SecurityMode",
        "fieldTypeVerbose": "byte",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "StructureSize",
        "fieldTypeVerbose": "uint16",
        "libName": "smb",
        "structName": "github.com/stacktitan/smb/smb.SessionSetup1Req",
        "structNameShort": "com/stacktitan/smb/smb.SessionSetup1Req",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      }
    ],
    "spacengine": [
      {
        "isMethod": false,
        "fieldName": "Addr",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Asn",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Banner",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "City",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ConfirmHttps",
        "fieldTypeVerbose": "bool",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Domains",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fingerprints",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromEngine",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromFilter",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HtmlTitle",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Latitude",
        "fieldTypeVerbose": "float64",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Location",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Longitude",
        "fieldTypeVerbose": "float64",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Province",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ServiceProvider",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Url",
        "fieldTypeVerbose": "string",
        "libName": "spacengine",
        "structName": "github.com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/spacengine.NetSpaceEngineResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "str": [
      {
        "isMethod": false,
        "fieldName": "Mutex",
        "fieldTypeVerbose": "sync.Mutex",
        "libName": "str",
        "structName": "github.com/yaklang/yaklang/common/filter.StringFilter",
        "structNameShort": "com/yaklang/yaklang/common/filter.StringFilter",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Exist",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "github.com/yaklang/yaklang/common/filter.StringFilter",
        "structNameShort": "com/yaklang/yaklang/common/filter.StringFilter",
        "methodsCompletion": "Exist(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Exist(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Insert",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "github.com/yaklang/yaklang/common/filter.StringFilter",
        "structNameShort": "com/yaklang/yaklang/common/filter.StringFilter",
        "methodsCompletion": "Insert(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Insert(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Lock",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "github.com/yaklang/yaklang/common/filter.StringFilter",
        "structNameShort": "com/yaklang/yaklang/common/filter.StringFilter",
        "methodsCompletion": "Lock()",
        "methodsCompletionVerbose": "Lock()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "TryLock",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "github.com/yaklang/yaklang/common/filter.StringFilter",
        "structNameShort": "com/yaklang/yaklang/common/filter.StringFilter",
        "methodsCompletion": "TryLock()",
        "methodsCompletionVerbose": "TryLock()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Unlock",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "github.com/yaklang/yaklang/common/filter.StringFilter",
        "structNameShort": "com/yaklang/yaklang/common/filter.StringFilter",
        "methodsCompletion": "Unlock()",
        "methodsCompletionVerbose": "Unlock()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Len",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Len()",
        "methodsCompletionVerbose": "Len()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadAt",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadAt(${1:v2 /*type: bytes*/}, ${2:v3 /*type: int64*/})",
        "methodsCompletionVerbose": "ReadAt(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadByte",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadByte()",
        "methodsCompletionVerbose": "ReadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadRune",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "ReadRune()",
        "methodsCompletionVerbose": "ReadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Reset(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Reset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Seek",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Seek(${1:v2 /*type: int64*/}, ${2:v3 /*type: int*/})",
        "methodsCompletionVerbose": "Seek(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Size",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "Size()",
        "methodsCompletionVerbose": "Size()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadByte",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "UnreadByte()",
        "methodsCompletionVerbose": "UnreadByte()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "UnreadRune",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "UnreadRune()",
        "methodsCompletionVerbose": "UnreadRune()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "str",
        "structName": "strings.Reader",
        "structNameShort": "Reader",
        "methodsCompletion": "WriteTo(${1:v2 /*type: io.Writer*/})",
        "methodsCompletionVerbose": "WriteTo(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Delta",
        "fieldTypeVerbose": "unicode.d",
        "libName": "str",
        "structName": "unicode.CaseRange",
        "structNameShort": "CaseRange",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Hi",
        "fieldTypeVerbose": "uint32",
        "libName": "str",
        "structName": "unicode.CaseRange",
        "structNameShort": "CaseRange",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Lo",
        "fieldTypeVerbose": "uint32",
        "libName": "str",
        "structName": "unicode.CaseRange",
        "structNameShort": "CaseRange",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      }
    ],
    "subdomain": [
      {
        "isMethod": false,
        "fieldName": "Domain",
        "fieldTypeVerbose": "string",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromDNSServer",
        "fieldTypeVerbose": "string",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromModeRaw",
        "fieldTypeVerbose": "int",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FromTarget",
        "fieldTypeVerbose": "string",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IP",
        "fieldTypeVerbose": "string",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tags",
        "fieldTypeVerbose": "[]string",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Hash",
        "fieldTypeVerbose": "",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "Hash()",
        "methodsCompletionVerbose": "Hash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToString",
        "fieldTypeVerbose": "",
        "libName": "subdomain",
        "structName": "github.com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "structNameShort": "com/yaklang/yaklang/common/subdomain.SubdomainResult",
        "methodsCompletion": "ToString()",
        "methodsCompletionVerbose": "ToString()",
        "isGolangBuildOrigin": false
      }
    ],
    "suricata": [
      {
        "isMethod": false,
        "fieldName": "ChaosRules",
        "fieldTypeVerbose": "[]*rule.Storage",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LocalIPAddress",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ApplyAll",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "methodsCompletion": "ApplyAll()",
        "methodsCompletionVerbose": "ApplyAll()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FeedRule",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "methodsCompletion": "FeedRule(${1:v2 /*type: ...*rule.Storage*/})",
        "methodsCompletionVerbose": "FeedRule(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generate",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker.ChaosMaker",
        "methodsCompletion": "Generate()",
        "methodsCompletionVerbose": "Generate()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Action",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "CVE",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClassType",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClassTypeZh",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptionZh",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Group",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Hash",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Keywords",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "KeywordsZh",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Model",
        "fieldTypeVerbose": "gorm.Model",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NameZh",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Protocol",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawTrafficBeyondHTTPBase64",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawTrafficBeyondIPPacketBase64",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawTrafficBeyondLinkLayerBase64",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RuleType",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SuricataRaw",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "BeforeSave",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "BeforeSave()",
        "methodsCompletionVerbose": "BeforeSave()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "CalcHash",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "CalcHash()",
        "methodsCompletionVerbose": "CalcHash()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "DecoratedByOpenAI",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "DecoratedByOpenAI(${1:v2 /*type: *gorm.DB*/}, ${2:v3 /*type: ...openai.ConfigOption*/})",
        "methodsCompletionVerbose": "DecoratedByOpenAI(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ToGPRCModel",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "structNameShort": "com/yaklang/yaklang/common/chaosmaker/rule.Storage",
        "methodsCompletion": "ToGPRCModel()",
        "methodsCompletionVerbose": "ToGPRCModel()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Len",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/data.Matched",
        "structNameShort": "com/yaklang/yaklang/common/suricata/data.Matched",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Pos",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/data.Matched",
        "structNameShort": "com/yaklang/yaklang/common/suricata/data.Matched",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PCRE",
        "fieldTypeVerbose": "*pcre.PCRE",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generate",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Generate()",
        "methodsCompletionVerbose": "Generate()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generator",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Generator()",
        "methodsCompletionVerbose": "Generator()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generator",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Generator()",
        "methodsCompletionVerbose": "Generator()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreCase",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "IgnoreCase()",
        "methodsCompletionVerbose": "IgnoreCase()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreCase",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "IgnoreCase()",
        "methodsCompletionVerbose": "IgnoreCase()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreEndNewline",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "IgnoreEndNewline()",
        "methodsCompletionVerbose": "IgnoreEndNewline()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreEndNewline",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "IgnoreEndNewline()",
        "methodsCompletionVerbose": "IgnoreEndNewline()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Matcher",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Matcher()",
        "methodsCompletionVerbose": "Matcher()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Matcher",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Matcher()",
        "methodsCompletionVerbose": "Matcher()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Modifier",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Modifier()",
        "methodsCompletionVerbose": "Modifier()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Modifier",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Modifier()",
        "methodsCompletionVerbose": "Modifier()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Relative",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Relative()",
        "methodsCompletionVerbose": "Relative()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Relative",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "Relative()",
        "methodsCompletionVerbose": "Relative()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "StartsWith",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "StartsWith()",
        "methodsCompletionVerbose": "StartsWith()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "StartsWith",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Generator",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Generator",
        "methodsCompletion": "StartsWith()",
        "methodsCompletionVerbose": "StartsWith()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PCRE",
        "fieldTypeVerbose": "*pcre.PCRE",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generator",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Generator()",
        "methodsCompletionVerbose": "Generator()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generator",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Generator()",
        "methodsCompletionVerbose": "Generator()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreCase",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "IgnoreCase()",
        "methodsCompletionVerbose": "IgnoreCase()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreCase",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "IgnoreCase()",
        "methodsCompletionVerbose": "IgnoreCase()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreEndNewline",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "IgnoreEndNewline()",
        "methodsCompletionVerbose": "IgnoreEndNewline()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreEndNewline",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "IgnoreEndNewline()",
        "methodsCompletionVerbose": "IgnoreEndNewline()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Match",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Match(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Match(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Matcher",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Matcher()",
        "methodsCompletionVerbose": "Matcher()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Matcher",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Matcher()",
        "methodsCompletionVerbose": "Matcher()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Modifier",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Modifier()",
        "methodsCompletionVerbose": "Modifier()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Modifier",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Modifier()",
        "methodsCompletionVerbose": "Modifier()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Relative",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Relative()",
        "methodsCompletionVerbose": "Relative()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Relative",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "Relative()",
        "methodsCompletionVerbose": "Relative()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "StartsWith",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "StartsWith()",
        "methodsCompletionVerbose": "StartsWith()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "StartsWith",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.Matcher",
        "methodsCompletion": "StartsWith()",
        "methodsCompletionVerbose": "StartsWith()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Generator",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "Generator()",
        "methodsCompletionVerbose": "Generator()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreCase",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "IgnoreCase()",
        "methodsCompletionVerbose": "IgnoreCase()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IgnoreEndNewline",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "IgnoreEndNewline()",
        "methodsCompletionVerbose": "IgnoreEndNewline()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Matcher",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "Matcher()",
        "methodsCompletionVerbose": "Matcher()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Modifier",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "Modifier()",
        "methodsCompletionVerbose": "Modifier()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Relative",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "Relative()",
        "methodsCompletionVerbose": "Relative()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "StartsWith",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "structNameShort": "com/yaklang/yaklang/common/suricata/pcre.PCRE",
        "methodsCompletion": "StartsWith()",
        "methodsCompletionVerbose": "StartsWith()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Any",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Env",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPv4CIDR",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPv6CIDR",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Negative",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SubRules",
        "fieldTypeVerbose": "[]*rule.AddressRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetLocalIPAddress",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "GetLocalIPAddress()",
        "methodsCompletionVerbose": "GetLocalIPAddress()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Match",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.AddressRule",
        "methodsCompletion": "Match(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "Match(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "BSize",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Base64Data",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Base64Decode",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ByteExtract",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ByteJump",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ByteMath",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ByteTest",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Content",
        "fieldTypeVerbose": "bytes",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DSize",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Depth",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Distance",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "EndsWith",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ExtraFlags",
        "fieldTypeVerbose": "[]string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FastPattern",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FlowBits",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FlowInt",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsDataAt",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Modifier",
        "fieldTypeVerbose": "modifier.Modifier",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Negative",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NoAlert",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Nocase",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Offset",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PCRE",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PCREParsed",
        "fieldTypeVerbose": "*pcre.PCRE",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RPC",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RawBytes",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Replace",
        "fieldTypeVerbose": "bytes",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "StartsWith",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Within",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "XBits",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ContentRules",
        "fieldTypeVerbose": "[]*rule.ContentRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DNS",
        "fieldTypeVerbose": "*rule.DNSRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Flow",
        "fieldTypeVerbose": "*rule.FlowRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "HTTPConfig",
        "fieldTypeVerbose": "*rule.HTTPConfig",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPConfig",
        "fieldTypeVerbose": "*rule.IPLayerRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IcmpConfig",
        "fieldTypeVerbose": "*rule.ICMPLayerRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "PrefilterRule",
        "fieldTypeVerbose": "*rule.ContentRuleConfig",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TcpConfig",
        "fieldTypeVerbose": "*rule.TCPLayerRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Thresholding",
        "fieldTypeVerbose": "*rule.ThresholdingConfig",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UdpConfig",
        "fieldTypeVerbose": "*rule.UDPLayerRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ContentRuleConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Opcode",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.DNSRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.DNSRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OpcodeNegative",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.DNSRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.DNSRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Established",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.FlowRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.FlowRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ToClient",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.FlowRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.FlowRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ToServer",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.FlowRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.FlowRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Uricontent",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UrilenNum1",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UrilenNum2",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UrilenOp",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.HTTPConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPId",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPSeq",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPv4Header",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPv6Header",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICMPv6MTU",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ICode",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IType",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ICMPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FragBits",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FragOffset",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Geoip",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPOpts",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IPProto",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Id",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Sameip",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TTL",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Tos",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.IPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Any",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Env",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Negative",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ports",
        "fieldTypeVerbose": "[]int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Rules",
        "fieldTypeVerbose": "[]*rule.PortRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAvailablePort",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "GetAvailablePort()",
        "methodsCompletionVerbose": "GetAvailablePort()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHighPort",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "GetHighPort()",
        "methodsCompletionVerbose": "GetHighPort()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Match",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.PortRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.PortRule",
        "methodsCompletion": "Match(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Match(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Action",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ClassType",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ContentRuleConfig",
        "fieldTypeVerbose": "*rule.ContentRuleConfig",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DestinationAddress",
        "fieldTypeVerbose": "*rule.AddressRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DestinationPort",
        "fieldTypeVerbose": "*rule.PortRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Gid",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Message",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Metadata",
        "fieldTypeVerbose": "[]string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Priority",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Protocol",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Reference",
        "fieldTypeVerbose": "map[string]string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Rev",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Sid",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SourceAddress",
        "fieldTypeVerbose": "*rule.AddressRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SourcePort",
        "fieldTypeVerbose": "*rule.PortRule",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Target",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.Rule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.Rule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Ack",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Flags",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NegativeWindow",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Seq",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TCPMssNum1",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TCPMssNum2",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TCPMssOp",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Window",
        "fieldTypeVerbose": "*int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.TCPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Count",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "LimitMode",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Seconds",
        "fieldTypeVerbose": "int",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ThresholdMode",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Track",
        "fieldTypeVerbose": "string",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Repeat",
        "fieldTypeVerbose": "",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.ThresholdingConfig",
        "methodsCompletion": "Repeat()",
        "methodsCompletionVerbose": "Repeat()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "UDPHeader",
        "fieldTypeVerbose": "bool",
        "libName": "suricata",
        "structName": "github.com/yaklang/yaklang/common/suricata/rule.UDPLayerRule",
        "structNameShort": "com/yaklang/yaklang/common/suricata/rule.UDPLayerRule",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "sync": [
      {
        "isMethod": false,
        "fieldName": "Size",
        "fieldTypeVerbose": "int",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "structNameShort": "com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "WaitingEventCount",
        "fieldTypeVerbose": "int",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "structNameShort": "com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "structNameShort": "com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "methodsCompletion": "Add(${1:v2 /*type: ...int*/})",
        "methodsCompletionVerbose": "Add(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "AddWithContext",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "structNameShort": "com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "methodsCompletion": "AddWithContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: ...int*/})",
        "methodsCompletionVerbose": "AddWithContext(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Done",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "structNameShort": "com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "methodsCompletion": "Done()",
        "methodsCompletionVerbose": "Done()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "structNameShort": "com/yaklang/yaklang/common/utils.SizedWaitGroup",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "WaitGroup",
        "fieldTypeVerbose": "*sync.WaitGroup",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "methodsCompletion": "Add(${1:v2 /*type: ...int*/})",
        "methodsCompletionVerbose": "Add(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Done",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "methodsCompletion": "Done()",
        "methodsCompletionVerbose": "Done()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Done",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "methodsCompletion": "Done()",
        "methodsCompletionVerbose": "Done()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.WaitGroupProxy",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "L",
        "fieldTypeVerbose": "sync.Locker",
        "libName": "sync",
        "structName": "sync.Cond",
        "structNameShort": "Cond",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Broadcast",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Cond",
        "structNameShort": "Cond",
        "methodsCompletion": "Broadcast()",
        "methodsCompletionVerbose": "Broadcast()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Signal",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Cond",
        "structNameShort": "Cond",
        "methodsCompletion": "Signal()",
        "methodsCompletionVerbose": "Signal()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Cond",
        "structNameShort": "Cond",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CompareAndDelete",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "CompareAndDelete(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "CompareAndDelete(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "CompareAndSwap",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "CompareAndSwap(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: any*/})",
        "methodsCompletionVerbose": "CompareAndSwap(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Delete",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "Delete(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Delete(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Load",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "Load(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Load(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LoadAndDelete",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "LoadAndDelete(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "LoadAndDelete(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LoadOrStore",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "LoadOrStore(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "LoadOrStore(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Range",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "Range(${1:v2 /*type: func (v1: any, v2: any) return(bool) */})",
        "methodsCompletionVerbose": "Range(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Store",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "Store(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Store(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Swap",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Map",
        "structNameShort": "Map",
        "methodsCompletion": "Swap(${1:v2 /*type: any*/}, ${2:v3 /*type: any*/})",
        "methodsCompletionVerbose": "Swap(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Do",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Once",
        "structNameShort": "Once",
        "methodsCompletion": "Do(${1:v2 /*type: func () */})",
        "methodsCompletionVerbose": "Do(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "New",
        "fieldTypeVerbose": "func () return(any) ",
        "libName": "sync",
        "structName": "sync.Pool",
        "structNameShort": "Pool",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Get",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Pool",
        "structNameShort": "Pool",
        "methodsCompletion": "Get()",
        "methodsCompletionVerbose": "Get()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Put",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.Pool",
        "structNameShort": "Pool",
        "methodsCompletion": "Put(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Put(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Lock",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "Lock()",
        "methodsCompletionVerbose": "Lock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RLock",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "RLock()",
        "methodsCompletionVerbose": "RLock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RLocker",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "RLocker()",
        "methodsCompletionVerbose": "RLocker()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RUnlock",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "RUnlock()",
        "methodsCompletionVerbose": "RUnlock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TryLock",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "TryLock()",
        "methodsCompletionVerbose": "TryLock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "TryRLock",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "TryRLock()",
        "methodsCompletionVerbose": "TryRLock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Unlock",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.RWMutex",
        "structNameShort": "RWMutex",
        "methodsCompletion": "Unlock()",
        "methodsCompletionVerbose": "Unlock()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.WaitGroup",
        "structNameShort": "WaitGroup",
        "methodsCompletion": "Add(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "Add(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Done",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.WaitGroup",
        "structNameShort": "WaitGroup",
        "methodsCompletion": "Done()",
        "methodsCompletionVerbose": "Done()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Wait",
        "fieldTypeVerbose": "",
        "libName": "sync",
        "structName": "sync.WaitGroup",
        "structNameShort": "WaitGroup",
        "methodsCompletion": "Wait()",
        "methodsCompletionVerbose": "Wait()",
        "isGolangBuildOrigin": true
      }
    ],
    "synscan": [
      {
        "isMethod": false,
        "fieldName": "Host",
        "fieldTypeVerbose": "string",
        "libName": "synscan",
        "structName": "github.com/yaklang/yaklang/common/synscan.SynScanResult",
        "structNameShort": "com/yaklang/yaklang/common/synscan.SynScanResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Port",
        "fieldTypeVerbose": "int",
        "libName": "synscan",
        "structName": "github.com/yaklang/yaklang/common/synscan.SynScanResult",
        "structNameShort": "com/yaklang/yaklang/common/synscan.SynScanResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "synscan",
        "structName": "github.com/yaklang/yaklang/common/synscan.SynScanResult",
        "structNameShort": "com/yaklang/yaklang/common/synscan.SynScanResult",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "synscan",
        "structName": "github.com/yaklang/yaklang/common/synscan.SynScanResult",
        "structNameShort": "com/yaklang/yaklang/common/synscan.SynScanResult",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      }
    ],
    "tcp": [
      {
        "isMethod": false,
        "fieldName": "Conn",
        "fieldTypeVerbose": "net.Conn",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTimeout",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "GetTimeout()",
        "methodsCompletionVerbose": "GetTimeout()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LocalAddr",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "LocalAddr()",
        "methodsCompletionVerbose": "LocalAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LocalAddr",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "LocalAddr()",
        "methodsCompletionVerbose": "LocalAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Recv",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Recv()",
        "methodsCompletionVerbose": "Recv()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvLen",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "RecvLen(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "RecvLen(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvString",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "RecvString()",
        "methodsCompletionVerbose": "RecvString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvStringTimeout",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "RecvStringTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "RecvStringTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvTimeout",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "RecvTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "RecvTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "RemoteAddr()",
        "methodsCompletionVerbose": "RemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "RemoteAddr()",
        "methodsCompletionVerbose": "RemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Send",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Send(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Send(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDeadline",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDeadline",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetReadDeadline",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetReadDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetReadDeadline",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetReadDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetTimeout",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "SetTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteDeadline",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetWriteDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteDeadline",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetWriteDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "tcp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.tcpConnection",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "time": [
      {
        "isMethod": false,
        "fieldName": "C",
        "fieldTypeVerbose": "\u003c-chan time.Time",
        "libName": "time",
        "structName": "time.Ticker",
        "structNameShort": "Ticker",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "time",
        "structName": "time.Ticker",
        "structNameShort": "Ticker",
        "methodsCompletion": "Reset(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "Reset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Stop",
        "fieldTypeVerbose": "",
        "libName": "time",
        "structName": "time.Ticker",
        "structNameShort": "Ticker",
        "methodsCompletion": "Stop()",
        "methodsCompletionVerbose": "Stop()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "C",
        "fieldTypeVerbose": "\u003c-chan time.Time",
        "libName": "time",
        "structName": "time.Timer",
        "structNameShort": "Timer",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Reset",
        "fieldTypeVerbose": "",
        "libName": "time",
        "structName": "time.Timer",
        "structNameShort": "Timer",
        "methodsCompletion": "Reset(${1:v2 /*type: time.Duration*/})",
        "methodsCompletionVerbose": "Reset(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Stop",
        "fieldTypeVerbose": "",
        "libName": "time",
        "structName": "time.Timer",
        "structNameShort": "Timer",
        "methodsCompletion": "Stop()",
        "methodsCompletionVerbose": "Stop()",
        "isGolangBuildOrigin": true
      }
    ],
    "tls": [
      {
        "isMethod": false,
        "fieldName": "Description",
        "fieldTypeVerbose": "string",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Raw",
        "fieldTypeVerbose": "bytes",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeAccount",
        "fieldTypeVerbose": "[]string",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeDomains",
        "fieldTypeVerbose": "[]string",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeEmail",
        "fieldTypeVerbose": "[]string",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RelativeURIs",
        "fieldTypeVerbose": "[]string",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Show",
        "fieldTypeVerbose": "",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "Show()",
        "methodsCompletionVerbose": "Show()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "tls",
        "structName": "github.com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "structNameShort": "com/yaklang/yaklang/common/utils/tlsutils.TLSInspectResult",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      }
    ],
    "tools": [
      {
        "isMethod": false,
        "fieldName": "Password",
        "fieldTypeVerbose": "string",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Target",
        "fieldTypeVerbose": "string",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Username",
        "fieldTypeVerbose": "string",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Result",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "methodsCompletion": "Result()",
        "methodsCompletionVerbose": "Result()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "String",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteItem",
        "methodsCompletion": "String()",
        "methodsCompletionVerbose": "String()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "FinishingThreshold",
        "fieldTypeVerbose": "int",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OkToStop",
        "fieldTypeVerbose": "bool",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OnlyNeedPassword",
        "fieldTypeVerbose": "bool",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TargetTaskConcurrent",
        "fieldTypeVerbose": "int",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Feed",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "Feed(${1:v2 /*type: *bruteutils.BruteItem*/})",
        "methodsCompletionVerbose": "Feed(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetAllTargetsProcessing",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "GetAllTargetsProcessing()",
        "methodsCompletionVerbose": "GetAllTargetsProcessing()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetProcessingByTarget",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "GetProcessingByTarget(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "GetProcessingByTarget(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoteProcessingByTarget",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "RemoteProcessingByTarget(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "RemoteProcessingByTarget(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Run",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "Run()",
        "methodsCompletionVerbose": "Run()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RunWithContext",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "RunWithContext(${1:v2 /*type: context.Context*/})",
        "methodsCompletionVerbose": "RunWithContext(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetResultCallback",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "SetResultCallback(${1:v2 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
        "methodsCompletionVerbose": "SetResultCallback(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "StreamBruteContext",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "structNameShort": "com/yaklang/yaklang/common/utils/bruteutils.BruteUtil",
        "methodsCompletion": "StreamBruteContext(${1:v2 /*type: context.Context*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: []string*/}, ${4:v5 /*type: []string*/}, ${5:v6 /*type: []string*/}, ${6:v7 /*type: func BruteItemResultCallback(v1: *bruteutils.BruteItemResult) */})",
        "methodsCompletionVerbose": "StreamBruteContext(v2, v3, v4, v5, v6, v7)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Exec",
        "fieldTypeVerbose": "",
        "libName": "tools",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib/tools.PocInvoker",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib/tools.PocInvoker",
        "methodsCompletion": "Exec(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "Exec(v2)",
        "isGolangBuildOrigin": false
      }
    ],
    "udp": [
      {
        "isMethod": false,
        "fieldName": "UDPConn",
        "fieldTypeVerbose": "*net.UDPConn",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "File",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "File()",
        "methodsCompletionVerbose": "File()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "File",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "File()",
        "methodsCompletionVerbose": "File()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetTimeout",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "GetTimeout()",
        "methodsCompletionVerbose": "GetTimeout()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LocalAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "LocalAddr()",
        "methodsCompletionVerbose": "LocalAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "LocalAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "LocalAddr()",
        "methodsCompletionVerbose": "LocalAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFromAddr()",
        "methodsCompletionVerbose": "ReadFromAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFromUDP(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFromUDP(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFromUDP(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFromUDP(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFromUDPAddrPort(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFromUDPAddrPort(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadFromUDPAddrPort(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFromUDPAddrPort(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadMsgUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadMsgUDP(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadMsgUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadMsgUDP(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadMsgUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadMsgUDPAddrPort(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadMsgUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadMsgUDPAddrPort(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "ReadStringFromAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "ReadStringFromAddr()",
        "methodsCompletionVerbose": "ReadStringFromAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Recv",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Recv()",
        "methodsCompletionVerbose": "Recv()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvLen",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "RecvLen(${1:v2 /*type: int64*/})",
        "methodsCompletionVerbose": "RecvLen(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvString",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "RecvString()",
        "methodsCompletionVerbose": "RecvString()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvStringTimeout",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "RecvStringTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "RecvStringTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RecvTimeout",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "RecvTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "RecvTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "RemoteAddr()",
        "methodsCompletionVerbose": "RemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "RemoteAddr()",
        "methodsCompletionVerbose": "RemoteAddr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Send",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Send(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Send(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SendTo",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SendTo(${1:v2 /*type: any*/}, ${2:v3 /*type: string*/})",
        "methodsCompletionVerbose": "SendTo(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetReadBuffer",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetReadBuffer(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetReadBuffer(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetReadBuffer",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetReadBuffer(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetReadBuffer(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetReadDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetReadDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetReadDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetReadDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetTimeout",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetTimeout(${1:v2 /*type: float64*/})",
        "methodsCompletionVerbose": "SetTimeout(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteBuffer",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetWriteBuffer(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetWriteBuffer(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteBuffer",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetWriteBuffer(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetWriteBuffer(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetWriteDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetWriteDeadline(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SyscallConn",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SyscallConn()",
        "methodsCompletionVerbose": "SyscallConn()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SyscallConn",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "SyscallConn()",
        "methodsCompletionVerbose": "SyscallConn()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteMsgUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: *net.UDPAddr*/})",
        "methodsCompletionVerbose": "WriteMsgUDP(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteMsgUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: *net.UDPAddr*/})",
        "methodsCompletionVerbose": "WriteMsgUDP(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteMsgUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: netip.AddrPort*/})",
        "methodsCompletionVerbose": "WriteMsgUDPAddrPort(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteMsgUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: netip.AddrPort*/})",
        "methodsCompletionVerbose": "WriteMsgUDPAddrPort(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteTo(${1:v2 /*type: bytes*/}, ${2:v3 /*type: net.Addr*/})",
        "methodsCompletionVerbose": "WriteTo(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteTo(${1:v2 /*type: bytes*/}, ${2:v3 /*type: net.Addr*/})",
        "methodsCompletionVerbose": "WriteTo(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteToUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteToUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *net.UDPAddr*/})",
        "methodsCompletionVerbose": "WriteToUDP(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteToUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteToUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *net.UDPAddr*/})",
        "methodsCompletionVerbose": "WriteToUDP(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteToUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteToUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: netip.AddrPort*/})",
        "methodsCompletionVerbose": "WriteToUDPAddrPort(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "WriteToUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.udpConn",
        "methodsCompletion": "WriteToUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: netip.AddrPort*/})",
        "methodsCompletionVerbose": "WriteToUDPAddrPort(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Close",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "Close()",
        "methodsCompletionVerbose": "Close()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "File",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "File()",
        "methodsCompletionVerbose": "File()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "LocalAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "LocalAddr()",
        "methodsCompletionVerbose": "LocalAddr()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Read",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "Read(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Read(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFrom",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "ReadFrom(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFrom(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "ReadFromUDP(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFromUDP(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadFromUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "ReadFromUDPAddrPort(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadFromUDPAddrPort(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadMsgUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "ReadMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadMsgUDP(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "ReadMsgUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "ReadMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/})",
        "methodsCompletionVerbose": "ReadMsgUDPAddrPort(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RemoteAddr",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "RemoteAddr()",
        "methodsCompletionVerbose": "RemoteAddr()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "SetDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetDeadline(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetReadBuffer",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "SetReadBuffer(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetReadBuffer(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetReadDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "SetReadDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetReadDeadline(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteBuffer",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "SetWriteBuffer(${1:v2 /*type: int*/})",
        "methodsCompletionVerbose": "SetWriteBuffer(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SetWriteDeadline",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "SetWriteDeadline(${1:v2 /*type: time.Time*/})",
        "methodsCompletionVerbose": "SetWriteDeadline(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "SyscallConn",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "SyscallConn()",
        "methodsCompletionVerbose": "SyscallConn()",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "Write",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "Write(${1:v2 /*type: bytes*/})",
        "methodsCompletionVerbose": "Write(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteMsgUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "WriteMsgUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: *net.UDPAddr*/})",
        "methodsCompletionVerbose": "WriteMsgUDP(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteMsgUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "WriteMsgUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: bytes*/}, ${3:v4 /*type: netip.AddrPort*/})",
        "methodsCompletionVerbose": "WriteMsgUDPAddrPort(v2, v3, v4)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteTo",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "WriteTo(${1:v2 /*type: bytes*/}, ${2:v3 /*type: net.Addr*/})",
        "methodsCompletionVerbose": "WriteTo(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteToUDP",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "WriteToUDP(${1:v2 /*type: bytes*/}, ${2:v3 /*type: *net.UDPAddr*/})",
        "methodsCompletionVerbose": "WriteToUDP(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "WriteToUDPAddrPort",
        "fieldTypeVerbose": "",
        "libName": "udp",
        "structName": "net.UDPConn",
        "structNameShort": "UDPConn",
        "methodsCompletion": "WriteToUDPAddrPort(${1:v2 /*type: bytes*/}, ${2:v3 /*type: netip.AddrPort*/})",
        "methodsCompletionVerbose": "WriteToUDPAddrPort(v2, v3)",
        "isGolangBuildOrigin": true
      }
    ],
    "x": [
      {
        "isMethod": false,
        "fieldName": "Element1",
        "fieldTypeVerbose": "any",
        "libName": "x",
        "structName": "github.com/yaklang/yaklang/common/go-funk.Tuple",
        "structNameShort": "com/yaklang/yaklang/common/go-funk.Tuple",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Element2",
        "fieldTypeVerbose": "any",
        "libName": "x",
        "structName": "github.com/yaklang/yaklang/common/go-funk.Tuple",
        "structNameShort": "com/yaklang/yaklang/common/go-funk.Tuple",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "xhtml": [
      {
        "isMethod": false,
        "fieldName": "FuzzRaw",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.DiffInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.DiffInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Node",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.DiffInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.DiffInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "OriginRaw",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.DiffInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.DiffInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Reason",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.DiffInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.DiffInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "xhtml.OutputPosType",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.DiffInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.DiffInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "XpathPos",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.DiffInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.DiffInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Key",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MatchNode",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MatchText",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Quote",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TagName",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Val",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Xpath",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsAttr",
        "fieldTypeVerbose": "",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "IsAttr()",
        "methodsCompletionVerbose": "IsAttr()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsCOMMENT",
        "fieldTypeVerbose": "",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "IsCOMMENT()",
        "methodsCompletionVerbose": "IsCOMMENT()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsText",
        "fieldTypeVerbose": "",
        "libName": "xhtml",
        "structName": "github.com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "structNameShort": "com/yaklang/yaklang/common/xhtml.MatchNodeInfo",
        "methodsCompletion": "IsText()",
        "methodsCompletionVerbose": "IsText()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Key",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Attribute",
        "structNameShort": "org/x/net/html.Attribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Namespace",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Attribute",
        "structNameShort": "org/x/net/html.Attribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Val",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Attribute",
        "structNameShort": "org/x/net/html.Attribute",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Attr",
        "fieldTypeVerbose": "[]html.Attribute",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Data",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "DataAtom",
        "fieldTypeVerbose": "atom.Atom",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "FirstChild",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "LastChild",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Namespace",
        "fieldTypeVerbose": "string",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "NextSibling",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Parent",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "PrevSibling",
        "fieldTypeVerbose": "*html.Node",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "html.NodeType",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "AppendChild",
        "fieldTypeVerbose": "",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "AppendChild(${1:v2 /*type: *html.Node*/})",
        "methodsCompletionVerbose": "AppendChild(v2)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "InsertBefore",
        "fieldTypeVerbose": "",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "InsertBefore(${1:v2 /*type: *html.Node*/}, ${2:v3 /*type: *html.Node*/})",
        "methodsCompletionVerbose": "InsertBefore(v2, v3)",
        "isGolangBuildOrigin": true
      },
      {
        "isMethod": true,
        "fieldName": "RemoveChild",
        "fieldTypeVerbose": "",
        "libName": "xhtml",
        "structName": "golang.org/x/net/html.Node",
        "structNameShort": "org/x/net/html.Node",
        "methodsCompletion": "RemoveChild(${1:v2 /*type: *html.Node*/})",
        "methodsCompletionVerbose": "RemoveChild(v2)",
        "isGolangBuildOrigin": true
      }
    ],
    "yakit": [
      {
        "isMethod": true,
        "fieldName": "Error",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "Error(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Error(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Info",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "Info(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Info(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Output",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "Output(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Output(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "OutputLog",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "OutputLog(${1:v2 /*type: string*/}, ${2:v3 /*type: string*/}, ${3:v4 /*type: ...any*/})",
        "methodsCompletionVerbose": "OutputLog(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Save",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "Save(${1:v2 /*type: any*/})",
        "methodsCompletionVerbose": "Save(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SendRaw",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "SendRaw(${1:v2 /*type: *yaklib.YakitLog*/})",
        "methodsCompletionVerbose": "SendRaw(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetProgress",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "SetProgress(${1:v2 /*type: string*/}, ${2:v3 /*type: float64*/})",
        "methodsCompletionVerbose": "SetProgress(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Warn",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitClient",
        "methodsCompletion": "Warn(${1:v2 /*type: string*/}, ${2:v3 /*type: ...any*/})",
        "methodsCompletionVerbose": "Warn(v2, v3)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Data",
        "fieldTypeVerbose": "map[string]any",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitFixedTableData",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitFixedTableData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "TableName",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitFixedTableData",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitFixedTableData",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Data",
        "fieldTypeVerbose": "[]*yaklib.yakitGraphValue",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitGraph",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitGraph",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitGraph",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitGraph",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Add",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitGraph",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitGraph",
        "methodsCompletion": "Add(${1:v2 /*type: string*/}, ${2:v3 /*type: any*/}, ${3:v4 /*type: ...string*/})",
        "methodsCompletionVerbose": "Add(v2, v3, v4)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fragment",
        "fieldTypeVerbose": "[]string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Highlight",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "IsHTTPS",
        "fieldTypeVerbose": "bool",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Level",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Request",
        "fieldTypeVerbose": "bytes",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Response",
        "fieldTypeVerbose": "bytes",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "RiskName",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Url",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetFragment",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "SetFragment(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "SetFragment(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetLevel",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitHTTPFlowRisk",
        "methodsCompletion": "SetLevel(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetLevel(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Data",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitLog",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitLog",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Level",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitLog",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitLog",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Timestamp",
        "fieldTypeVerbose": "int64",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitLog",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitLog",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Data",
        "fieldTypeVerbose": "[][]string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Head",
        "fieldTypeVerbose": "[]string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Append",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "methodsCompletion": "Append(${1:v2 /*type: ...any*/})",
        "methodsCompletionVerbose": "Append(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetHead",
        "fieldTypeVerbose": "",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.YakitTable",
        "methodsCompletion": "SetHead(${1:v2 /*type: ...string*/})",
        "methodsCompletionVerbose": "SetHead(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Id",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakitGraphValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakitGraphValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Key",
        "fieldTypeVerbose": "string",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakitGraphValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakitGraphValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "any",
        "libName": "yakit",
        "structName": "github.com/yaklang/yaklang/common/yak/yaklib.yakitGraphValue",
        "structNameShort": "com/yaklang/yaklang/common/yak/yaklib.yakitGraphValue",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      }
    ],
    "yso": [
      {
        "isMethod": false,
        "fieldName": "AccessFlags",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AccessFlagsVerbose",
        "fieldTypeVerbose": "[]string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Attributes",
        "fieldTypeVerbose": "[]javaclassparser.AttributeInfo",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ConstantPool",
        "fieldTypeVerbose": "[]javaclassparser.ConstantInfo",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Fields",
        "fieldTypeVerbose": "[]*javaclassparser.MemberInfo",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Interfaces",
        "fieldTypeVerbose": "[]uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "InterfacesVerbose",
        "fieldTypeVerbose": "[]string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Magic",
        "fieldTypeVerbose": "uint32",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MajorVersion",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Methods",
        "fieldTypeVerbose": "[]*javaclassparser.MemberInfo",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "MinorVersion",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SuperClass",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SuperClassVerbose",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ThisClass",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "ThisClassVerbose",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Bcel",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "Bcel()",
        "methodsCompletionVerbose": "Bcel()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Bytes",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "Bytes()",
        "methodsCompletionVerbose": "Bytes()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Dump",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "Dump()",
        "methodsCompletionVerbose": "Dump()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FindConstStringFromPool",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "FindConstStringFromPool(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindConstStringFromPool(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FindFields",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "FindFields(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindFields(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "FindMethods",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "FindMethods(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "FindMethods(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetClassName",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "GetClassName()",
        "methodsCompletionVerbose": "GetClassName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetInterfacesName",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "GetInterfacesName()",
        "methodsCompletionVerbose": "GetInterfacesName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetSupperClassName",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "GetSupperClassName()",
        "methodsCompletionVerbose": "GetSupperClassName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Json",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "Json()",
        "methodsCompletionVerbose": "Json()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "SetClassName",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ClassObject",
        "methodsCompletion": "SetClassName(${1:v2 /*type: string*/})",
        "methodsCompletionVerbose": "SetClassName(v2)",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ConstantUtf8Info",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ConstantUtf8Info",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Value",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.ConstantUtf8Info",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.ConstantUtf8Info",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AccessFlags",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "AccessFlagsVerbose",
        "fieldTypeVerbose": "[]string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Attributes",
        "fieldTypeVerbose": "[]javaclassparser.AttributeInfo",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptorIndex",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "DescriptorIndexVerbose",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NameIndex",
        "fieldTypeVerbose": "uint16",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NameIndexVerbose",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Type",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "structNameShort": "com/yaklang/yaklang/common/javaclassparser.MemberInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Generator",
        "fieldTypeVerbose": "any",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "GeneratorName",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Help",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "Name",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "NameVerbose",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "SupportTemplate",
        "fieldTypeVerbose": "bool",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "YakFun",
        "fieldTypeVerbose": "string",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetHelp",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "GetHelp()",
        "methodsCompletionVerbose": "GetHelp()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetName",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "GetName()",
        "methodsCompletionVerbose": "GetName()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "GetNameVerbose",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "GetNameVerbose()",
        "methodsCompletionVerbose": "GetNameVerbose()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "IsSupportTemplate",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.GadgetInfo",
        "structNameShort": "com/yaklang/yaklang/common/yso.GadgetInfo",
        "methodsCompletion": "IsSupportTemplate()",
        "methodsCompletionVerbose": "IsSupportTemplate()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": false,
        "fieldName": "JavaSerializable",
        "fieldTypeVerbose": "yserx.JavaSerializable",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.JavaObject",
        "structNameShort": "com/yaklang/yaklang/common/yso.JavaObject",
        "methodsCompletion": "",
        "methodsCompletionVerbose": "",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.JavaObject",
        "structNameShort": "com/yaklang/yaklang/common/yso.JavaObject",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Marshal",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.JavaObject",
        "structNameShort": "com/yaklang/yaklang/common/yso.JavaObject",
        "methodsCompletion": "Marshal()",
        "methodsCompletionVerbose": "Marshal()",
        "isGolangBuildOrigin": false
      },
      {
        "isMethod": true,
        "fieldName": "Verbose",
        "fieldTypeVerbose": "",
        "libName": "yso",
        "structName": "github.com/yaklang/yaklang/common/yso.JavaObject",
        "structNameShort": "com/yaklang/yaklang/common/yso.JavaObject",
        "methodsCompletion": "Verbose()",
        "methodsCompletionVerbose": "Verbose()",
        "isGolangBuildOrigin": false
      }
    ]
  }
}